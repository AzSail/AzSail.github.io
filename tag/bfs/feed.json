{
    "version": "https://jsonfeed.org/version/1",
    "title": "mioe • All posts by \"bfs\" tag",
    "description": "花店不开了，花继续开",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "title": "BFS模板",
            "date_published": "2023-01-05T09:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行，</p>\n<p>对于每一组数据，输出吃到奶酪的最少单位时间。</p>\n<p>若无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p>\n<p>在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h6 id=\"二维\"><a href=\"#二维\" class=\"headerlink\" title=\"二维\"></a>二维</h6><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 210;\n\n// 方向偏移量\nint dx[4] = &#123;-1, 0, 1, 0&#125;;\nint dy[4] = &#123;0, 1, 0, -1&#125;;\n// 距离\nint dist[N][N];\nint n, m;\npair&lt;int, int&gt; start;\npair&lt;int, int&gt; ed;\n// 迷宫\nchar g[N][N];\n\nint bfs(pair&lt;int, int&gt; s, pair&lt;int, int&gt; e)&#123;\n    queue&lt;pair&lt;int, int&gt;&gt; q;\n    memset(dist, -1, sizeof dist);\n\n    dist[s.first][s.second] = 0;\t\t\t\t\t\t// 起点\n    q.push(s);\n\n    while(!q.empty())&#123;\n        pair&lt;int, int&gt; t = q.front();\n        q.pop();\n\n        if(t == e) return dist[t.first][t.second];\t\t\t// 判断是否终点\n\n        for(int i = 0; i &lt; 4; i++)&#123;\n            int x = t.first + dx[i];\n            int y = t.second + dy[i];\n            if(x &lt; 0 || y &lt; 0 || x &gt;= n || y &gt;= m) continue;\t// 越界\n            if(g[x][y] == &#39;#&#39;) continue;\t\t\t\t// 碰墙\n            if(dist[x][y] != -1) continue;\t\t\t\t// 已遍历\n\n            dist[x][y] = dist[t.first][t.second] + 1;\t\t// 距离加一\n            q.push(&#123;x, y&#125;);\n        &#125;\n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--)&#123;\n        scanf(&quot;%d %d&quot;, &amp;n, &amp;m);\n        for(int i = 0; i &lt; n; i++) scanf(&quot;%s&quot;, g[i]);\n        for(int i = 0; i &lt; n; i++)&#123;\n            for(int j = 0; j &lt; m; j++)&#123;\n                if(g[i][j] == &#39;S&#39;) start = &#123;i, j&#125;;\n                if(g[i][j] == &#39;E&#39;) ed = &#123;i, j&#125;;\n            &#125;\n        &#125;\n\n        int d = bfs(start, ed);\n        if(d == -1) printf(&quot;oop!\\n&quot;);\n        else printf(&quot;%d\\n&quot;, d);\n    &#125;\n\n\n    return 0;\n&#125;\n</code></pre>\n<h5 id=\"三维\"><a href=\"#三维\" class=\"headerlink\" title=\"三维\"></a>三维</h5><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 101;\n\npair&lt;int, pair&lt;int, int&gt;&gt; start, ed, tmp;\nchar g[N][N][N];\nint st[N][N][N];\nint dy[4] = &#123;-1, 0, 1, 0&#125;;\nint dz[4] = &#123;0, -1, 0, 1&#125;;\nint l, r, c;\n\nint bfs(pair&lt;int, pair&lt;int, int&gt;&gt; s, pair&lt;int, pair&lt;int, int&gt;&gt; e)&#123;\n    memset(st, -1, sizeof st);\n    queue&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; q;\n    st[s.first][s.second.first][s.second.second] = 0;\n    q.push(s);\n\n    while(!q.empty())&#123;\n        tmp = q.front();\n        q.pop();\n        if(tmp == e) return st[tmp.first][tmp.second.first][tmp.second.second];\n    \n        int x = tmp.first, y, z;\n    \n        if(x + 1 &lt; l &amp;&amp; st[x + 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x + 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x + 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x + 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n        if(x - 1 &gt;= 0 &amp;&amp; st[x - 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x - 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x - 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x - 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n    \n        for(int i = 0; i &lt; 4; i++)&#123;\n            y = tmp.second.first + dy[i];\n            z = tmp.second.second + dz[i];\n            if(st[x][y][z] != -1) continue;\n            if(y &lt; 0 || z &lt; 0 || y &gt;= r || z &gt;= c) continue;\n            if(g[x][y][z] == &#39;#&#39;) continue;\n        \n            st[x][y][z] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x, &#123;y, z&#125;&#125;);\n        &#125;\n    \n    \n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    while(1)&#123;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;\n        if(l == 0) break;\n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++) \n                scanf(&quot;%s&quot;, g[i][j]);\n    \n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++)\n                for(int z = 0; z &lt; c; z++)\n                    if(g[i][j][z] == &#39;S&#39;) start = &#123;i, &#123;j, z&#125;&#125;;\n                    else if(g[i][j][z] == &#39;E&#39;) ed = &#123;i, &#123;j, z&#125;&#125;;\n    \n        int step = bfs(start, ed);\n        if(step == -1) printf(&quot;Trapped!\\n&quot;);\n        else printf(&quot;Escaped in %d minute(s).\\n&quot;, step);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "BFS"
            ]
        }
    ]
}