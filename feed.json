{
    "version": "https://jsonfeed.org/version/1",
    "title": "書架",
    "description": "花店不开了，花继续开",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/02/07/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "url": "http://example.com/2023/02/07/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "title": "最小生成树",
            "date_published": "2023-02-07T11:45:54.000Z",
            "content_html": "<h1 id=\"最短生成树\"><a href=\"#最短生成树\" class=\"headerlink\" title=\"最短生成树\"></a>最短生成树</h1><h2 id=\"Prim\"><a href=\"#Prim\" class=\"headerlink\" title=\"Prim\"></a>Prim</h2><pre><code class=\"cpp\">#include&lt;iostream&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nconst int N = 505, INF = 0x3f3f3f3f;\n\nint n, m;\nint g[N][N];\nint dist[N];\nbool st[N];\n\nintprim()\n&#123;\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;   // 第一个点一定在最小生成树中\n\n    int res = 0;  // 用来存放权值之和\n    for(int i = 0; i &lt; n; i ++)\n    &#123;\n        int t = -1;\n        for(int j = 1; j &lt;= n; j ++)\n            if(!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t]))\n                t = j;\n\n        if(dist[t] == INF) return INF;   // 尽早跳出循环防止TLE，如果不加则需要在输出的地方更改\n        res += dist[t];\n        st[t] = true;\n\n        for(int j = 1; j &lt;= n; j ++)\n            dist[j] = min(dist[j], g[t][j]); // 注意和dijkstra的区别\n                                             // prim的dist是到已经生成的树的最短距离\n    &#125;\n    return res;\n&#125;\n\n\nintmain()\n&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    memset(g, 0x3f, sizeof g);\n\n    while(m --)\n    &#123;\n        int a, b, c;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        g[a][b] = g[b][a] = min(g[a][b], c);\n    &#125;\n\n    int t = prim();\n\n    if(t == INF) cout &lt;&lt; &quot;impossible&quot; &lt;&lt; endl;  // 如果上面不及时跳出循环则在这里改为(t &gt;= INF / 2)\n    else cout &lt;&lt; t &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"kruskal\"><a href=\"#kruskal\" class=\"headerlink\" title=\"kruskal\"></a>kruskal</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nstructNode&#123;\n    int a, b, w;\n  \n    bool operator&lt; (const Node &amp;N) const &#123;\n        return w &lt; N.w;\n    &#125;\n&#125;edges[N];\n\nint n, m, res, cnt;\nint g[N];\n\nintfind(int a)&#123;\n    if (a != g[a]) g[a] = find(g[a]);\n    return g[a];\n&#125;\n\nintkruskal()&#123;\n    for (int i = 0; i &lt; m; i++) &#123;\n        int a = edges[i].a, b = edges[i].b, w = edges[i].w;\n  \n        a = find(a), b = find(b);  \n        if (a != b) &#123;\n            g[a] = b;\n            res += w;\n            cnt++;\n        &#125;\n    &#125;\n  \n    if (cnt &lt; n - 1) return -1;\n    else return res;\n&#125;\n\nintmain()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n  \n    for (int i = 0; i &lt; m; i++) &#123;\n        int a, b, c;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        edges[i] = &#123;a, b, c&#125;;\n    &#125;\n    for (int i = 1; i &lt;= n; i++) g[i] = i;\n    sort(edges, edges + m);\n  \n    int t = kruskal();\n    cout &lt;&lt; t;\n  \n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/04/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/02/04/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/",
            "title": "最短路问题",
            "date_published": "2023-02-04T10:51:00.000Z",
            "content_html": "<h1 id=\"单源最短路\"><a href=\"#单源最短路\" class=\"headerlink\" title=\"单源最短路\"></a>单源最短路</h1><h2 id=\"dijkstra-稠密图\"><a href=\"#dijkstra-稠密图\" class=\"headerlink\" title=\"dijkstra 稠密图\"></a>dijkstra 稠密图</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e4;\n\nint n, m, s;\nint g[N][N];\nint dist[N];\nbool st[N];\n\nvoid dijkstra() &#123;\n    memset(dist, 0x3f, sizeof dist);\n\n    dist[s] = 0;\n\n    for (int i = 0; i &lt; n; i++) &#123;\n        int t = -1;\n        for (int j = 1; j &lt;= n; j++)\n            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))\n                t = j;\n        st[t] = true;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            dist[j] = min(dist[j], dist[t] + g[t][j]);\n        &#125;\n    &#125;\n\n    //\tif(dist[n] == 0x3f3f3f3f) return -1;\n    //\telse return n;\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);\n\n    memset(g, 0x3f, sizeof g);\n\n    int a, b, c;\n    while (m--) &#123;\n        scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);\n        g[a][b] = min(g[a][b], c);\n    &#125;\n\n    //\tint t = dijkstra();\n    //\tprintf(&quot;%d&quot;, t);\n\n    dijkstra();\n\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, dist[i]);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"堆优化dijkstra\"><a href=\"#堆优化dijkstra\" class=\"headerlink\" title=\"堆优化dijkstra\"></a>堆优化dijkstra</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 2e6 + 5;\ntypedef pair&lt;int, int&gt; PII;\n\nint n, m, s;\nint h[N], ne[N], e[N], w[N], idx;\nint dist[N];\nbool st[N];\n\nvoid add(int a, int b, int c) &#123;\n    w[idx] = c, e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n&#125;\n\nvoid dijkstra() &#123;\n    memset(dist, 127, sizeof dist);\n    dist[s] = 0;\n\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;\n    heap.push(&#123;0, s&#125;);\n\n    while (heap.size()) &#123;\n        auto t = heap.top();\n        heap.pop();\n\n        int ver = t.second, distance = t.first;\n\n        if (st[ver]) continue;\n        st[ver] = true;\n\n        for (int i = h[ver]; i != -1; i = ne[i]) &#123;\n            int j = e[i];\n            if (dist[j] &gt; distance + w[i]) &#123;\n                dist[j] = distance + w[i];\n                heap.push(&#123;dist[j], j&#125;);\n            &#125;\n        &#125;\n    &#125;\n\n    //\tif(dist[n] == 0x3f3f3f3f) return -1;\n    //\telse return n;\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);\n\n    memset(h, -1, sizeof h);\n    int a, b, c;\n    while (m--) &#123;\n        scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);\n        add(a, b, c);\n    &#125;\n    //\tint t = dijkstra();\n    //\tprintf(&quot;%d&quot;, t);\n\n    dijkstra();\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, dist[i]);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h2><pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 505, M = 10010;\n\nint n, m, k;\nint dist[N], backup[N], st[N];\n\nstruct Node &#123;\n    int a, b, w;\n&#125; edges[M];\n\nint b_f() &#123;\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n\n    for (int i = 0; i &lt; k; i++) &#123;\n        memcpy(backup, dist, sizeof dist);\n        for (int j = 0; j &lt; m; j++) &#123;\n            int a = edges[j].a, b = edges[j].b, w = edges[j].w;\n            dist[b] = min(dist[b], backup[a] + w);\n        &#125;\n    &#125;\n    if (dist[n] &gt;= 0x3f3f3f3f / 2) return -1;\n    else return dist[n];\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);\n\n    for (int i = 0; i &lt; m; i++) &#123;\n        int x, y, z;\n        scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;z);\n        edges[i] = &#123;x, y, z&#125;;\n    &#125;\n\n    int t = b_f();\n    if (t == -1 &amp;&amp; dist[n] != -1) printf(&quot;impossible&quot;);\n    else printf(&quot;%d&quot;, t);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h2><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2023/02/568055134.png\" alt=\"《信息学奥赛一本通》 , usaco training 3.2\"></p>\n<h4 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><pre><code>3 4 5\n2\n3\n4\n1 2 1\n1 3 5\n2 3 7\n2 4 3\n3 4 5\n</code></pre>\n<h4 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><pre><code>8\n</code></pre>\n<h4 id=\"AC\"><a href=\"#AC\" class=\"headerlink\" title=\"AC\"></a>AC</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 510, P = 805, C = 1455 * 2;    // 无向图 边 * 2;\n\nbool st[P];\nint cow[N];\nint dist[P];\nint ne[C], e[C], h[C], w[C], idx;\n\nvoid add(int a, int b, int v) &#123;\n    e[idx] = b, w[idx] = v, ne[idx] = h[a], h[a] = idx++;\n&#125;\n\nvoid spfa(int cw) &#123;\n    memset(dist, 0x3f, sizeof dist);\n    dist[cw] = 0;\n\n    queue&lt;int&gt; q;\n    q.push(cw);\n    st[cw] = true;\n\n    while (!q.empty()) &#123;\n        int t = q.front();\n        q.pop();\n        st[t] = false;\n        for (int i = h[t]; i != -1; i = ne[i]) &#123;\n            int j = e[i];\n            if (dist[j] &gt; dist[t] + w[i]) &#123;\n                dist[j] = dist[t] + w[i];\n                if (!st[j]) &#123;\n                    q.push(j);\n                    st[j] = true;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, p, c;\n    cin &gt;&gt; n &gt;&gt; p &gt;&gt; c;\n\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; cow[i];\n\n    memset(h, -1, sizeof h);\n    for (int i = 0; i &lt; c; i++) &#123;\n        int a, b, v;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;\n        add(a, b, v);\n        add(b, a, v);\n    &#125;\n\n    int res = 0x3f3f3f3f, t = 0;\n    for (int i = 1; i &lt;= p; i++) &#123;\n        t = 0;\n        spfa(i);\n        for (int j = 0; j &lt; n; j++) &#123;\n            if (t &gt;= 0x3f3f3f3f) continue;\n            t += dist[cow[j]];\n        &#125;\n        res = min(res, t);\n    &#125;\n\n    cout &lt;&lt; res;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"负环判断\"><a href=\"#负环判断\" class=\"headerlink\" title=\"负环判断\"></a>负环判断</h2><pre><code class=\"cpp\">cnt[x] = cnt[i] + 1;\nif(cnt[x] &gt;= n) return true;\n</code></pre>\n<h1 id=\"多源最短路\"><a href=\"#多源最短路\" class=\"headerlink\" title=\"多源最短路\"></a>多源最短路</h1><h2 id=\"Floyd\"><a href=\"#Floyd\" class=\"headerlink\" title=\"Floyd\"></a>Floyd</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 205, inf = 0x3f3f3f3f;\n\nint g[N][N], path[N][N];\nint n, m, q;\nint tx, ty;\n\nvoid writePath(int x, int y)&#123;\n    if (path[x][y] != 0) &#123;\n        writePath(x, path[x][y]);\n        cout &lt;&lt; path[x][y] &lt;&lt; &quot; &quot;;\n    &#125;\n    if (y == ty) cout &lt;&lt; y &lt;&lt; &quot; &quot;;\n&#125;\n\nvoid floyd() &#123;\n    for (int k = 1; k &lt;= n; k++)\n        for (int i = 1; i &lt;= n; i++)\n            for (int j = 1; j &lt;= n; j++)\n                if (g[i][k] + g[k][j] &lt; g[i][j]) &#123;\n                    g[i][j] = g[i][k] + g[k][j];\n                    path[i][j] = path[k][j];\n                &#125;\n&#125; \n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            if (i == j) g[i][j] = 0;\n            else g[i][j] = inf;\n        &#125;\n    &#125;\n\n    for (int i = 0; i &lt; m; i++) &#123;\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        path[x][y] = x;\n        g[x][y] = min(g[x][y], z);\n    &#125;\n\n    floyd();\n\n    cin &gt;&gt; tx &gt;&gt; ty;\n    cout &lt;&lt; g[tx][ty] &lt;&lt; endl;\n    writePath(tx, ty);\n\n    return 0;\n&#125;\n</code></pre>\n<pre><code>\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/03/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89/",
            "url": "http://example.com/2023/02/03/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89/",
            "title": "树的深度优先遍历（邻接表）",
            "date_published": "2023-02-03T10:24:20.000Z",
            "content_html": "<h4 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint idx, n;\nint h[N], e[N], ne[N];\nbool st[N];\n\nvoid ins(int a, int b)&#123;\n    e[idx] = b;\n    ne[idx] = h[a];\n    h[a] = idx++;\n&#125;\n\nvoid dfs(int u)&#123;\n    st[u] = true;\n    cout &lt;&lt; u;\n    for(int i = h[u]; i != -1; i = ne[i])&#123;\n        int j = e[i];\n        if(!st[j]) dfs(j);\n    &#125;\n&#125;\n\nint main()&#123;\n    memset(h, -1, sizeof h);\n\n    cin &gt;&gt; n;\n    int a, b;\n\n    while(n--)&#123;\n        cin &gt;&gt; a &gt;&gt; b;\n        ins(a, b);\n    &#125;\n\n    dfs(1);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "url": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "title": "字符串哈希",
            "date_published": "2023-02-02T08:36:57.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1010, P = 131;\n\nunsigned long long h[N], p[N];\nint n, m;\nchar str[N];\n\nunsigned long long gethash(int l, int r)&#123;\n    return h[r] - h[l - 1] * p[r - l + 1];\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d %d %s&quot;, &amp;n, &amp;m, str + 1);\n\n    p[0] = 1;\n    for(int i = 1; i &lt;= n; i++)&#123;\n        p[i] = p[i - 1] * P;\n        h[i] = h[i - 1] * P + str[i];\n    &#125;\n\n    int l1, r1, l2, r2;\n    while(m--)&#123;\n        scanf(&quot;%d %d %d %d&quot;, &amp;l1, &amp;r1, &amp;l2, &amp;r2);\n        if(gethash(l1, r1) == gethash(l2, r2)) printf(&quot;Yes\\n&quot;);\n        else printf(&quot;No\\n&quot;);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "url": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "title": "小根堆",
            "date_published": "2023-02-01T10:38:45.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e6+10;\n\nint hp[N], idx;\nint n;\n\nvoid down(int k)&#123;\n    int t = k;\n    if(hp[k &lt;&lt; 1] &lt; hp[t] &amp;&amp; (k &lt;&lt; 1) &lt;= idx) t = k &lt;&lt; 1;\n    if(hp[k &lt;&lt; 1 | 1] &lt; hp[t] &amp;&amp; (k &lt;&lt; 1 | 1) &lt;= idx) t = k &lt;&lt; 1 | 1;\n    if(t != k)&#123;\n        swap(hp[k], hp[t]);\n        down(t);\n    &#125;\n&#125;\n\nvoid up(int k)&#123;\n    while(k &gt;&gt; 1 &amp;&amp; hp[k &gt;&gt; 1] &gt; hp[k])&#123;\n        swap(hp[k &gt;&gt; 1], hp[k]);\n        k &gt;&gt;= 1;\n    &#125;\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d&quot;, &amp;n);\n\n    int x, y;\n    while(n--)&#123;\n        scanf(&quot;%d&quot;, &amp;x);\n        if(x == 1)&#123;\n            scanf(&quot;%d&quot;, &amp;y);\n            hp[++idx] = y;\n            up(idx);\n        &#125;else if(x == 2) printf(&quot;%d\\n&quot;, hp[1]);\n        else hp[1] = hp[idx], idx--, down(1);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/31/%E9%9B%86%E5%90%88%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "url": "http://example.com/2023/01/31/%E9%9B%86%E5%90%88%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "title": "集合与并查集",
            "date_published": "2023-01-31T10:11:00.000Z",
            "content_html": "<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint son[N][26], cnt[N], idx;\nint n;\n\nvoid insert(string str)&#123;\n    int p = 0;\n    for(int i = 0; str[i]; i++)&#123;\n        int u = str[i] - &#39;a&#39;;\n        if(!son[p][u]) son[p][u] = ++idx;\n        p = son[p][u];\n    &#125;\n    cnt[p]++;\n&#125;\n\nint query(string str)&#123;\n    int p = 0;\n    for(int i = 0; str[i]; i++)&#123;\n        int u = str[i] - &#39;a&#39;;\n        if(!son[p][u]) return 0;\n        p = son[p][u];\n    &#125;\n\n    return cnt[p];\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    while(n--)&#123;\n        char op;\n        string str;\n        cin &gt;&gt; op &gt;&gt; str;\n        if(op == &#39;I&#39;) insert(str);\n        else printf(&quot;%d\\n&quot;, query(str)); \n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 10010;\n\nint p[N], n, m;\n\nint find(int x)&#123;\n    if(p[x] != x) p[x] = find(p[x]);\n    return x;\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i++) p[i] = i;\n\n    while(m--)&#123;\n        int z, x, y;\n        scanf(&quot;%d%d%d&quot;, &amp;z, &amp;x, &amp;y);\n        if(z == 1) p[find(x)] = find(y);\n        else&#123;\n            if(find(x) == find(y)) printf(&quot;Y\\n&quot;);\n            else printf(&quot;N\\n&quot;);\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/30/KMP/",
            "url": "http://example.com/2023/01/30/KMP/",
            "title": "KMP",
            "date_published": "2023-01-30T10:25:00.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100, M = 1000;\n\nint n, m;\nchar p[N], s[M];\nint ne[N];\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;\n\n    for(int i = 2, j = 0; i &lt;= n; i++)&#123;\n        while(j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\n        if(p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    &#125;\n\n    for(int i = 1, j = 0; i &lt;= m; i++)&#123;\n        while(j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\n        if(s[i] == p[j + 1]) j++;\n        if(j == n)&#123;\n            printf(&quot;%d&quot;, i - n);\n            break;\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "url": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "title": "单调栈、滑动窗口（单调队列）",
            "date_published": "2023-01-30T09:07:00.000Z",
            "content_html": "<h4 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint stk[N], arr[N];\nint n, t;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++)&#123;\n        cin &gt;&gt; arr[i];\n        while(t &amp;&amp; arr[i] &lt;= stk[t]) t--;\n    \n        if(t) cout &lt;&lt; stk[t] &lt;&lt; &quot; &quot;;\n        else cout &lt;&lt; -1 &lt;&lt; &quot; &quot;;\n    \n        stk[++t] = arr[i];\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint arr[N], q[N];\nint n, k;\n\nint main()&#123;\n    scanf(&quot;%d %d&quot;, &amp;n, &amp;k);\n\n    for(int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;arr[i]);\n\n    int h = 0, r = -1;\n    for(int i = 0; i &lt; n; i++)&#123;\n        if(h &lt;= r &amp;&amp; i - k + 1 &gt; q[h]) h++;\n\n        while(h &lt;= r &amp;&amp; arr[q[r]] &gt;= arr[i]) r--;\n\n        q[++r] = i;\n\n        if(i &gt;= k - 1) printf(&quot;%d &quot;, arr[q[h]]);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "url": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "title": "双指针数组去重",
            "date_published": "2023-01-20T12:23:01.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint n; \nint arr[N];\n\nint main()&#123;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++) cin &gt;&gt; arr[i];\n\n    int j = 0;\t// 非重复个数\n    for(int i = 0; i &lt; n; i++)\n        if(!i || arr[i] != arr[i - 1])\n            arr[j++] = arr[i];\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/20/%E7%A6%BB%E6%95%A3%E5%8C%96%E5%8C%BA%E9%97%B4%E5%92%8C/",
            "url": "http://example.com/2023/01/20/%E7%A6%BB%E6%95%A3%E5%8C%96%E5%8C%BA%E9%97%B4%E5%92%8C/",
            "title": "离散化区间和",
            "date_published": "2023-01-20T11:29:00.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\ntypedef pair&lt;int, int&gt; PII;\n\nint n, m;\nint arr[N], sum[N];\nvector&lt;int&gt; alls;\nvector&lt;PII&gt; add, query;\n\n// 查找x在alls数组中的下标\nint find(int x)&#123;\n    int l = 0, r = alls.size() - 1, mid;\n    while(l &lt; r)&#123;\n        mid = l + r &gt;&gt; 1;\n        if(alls[mid] &gt;= x) r = mid;\n        else l = mid + 1;\n    &#125;\n    return l + 1;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int x, c;\n    for(int i = 0; i &lt; n; i++)&#123;\n        cin &gt;&gt; x &gt;&gt; c;\n        add.push_back(&#123;x, c&#125;);\n        alls.push_back(x);\n    &#125;\n\n    int l, r;\n    for(int i = 0; i &lt; m; i++)&#123;\n        cin &gt;&gt; l &gt;&gt; r;\n        query.push_back(&#123;l, r&#125;);\n        alls.push_back(l);\n        alls.push_back(r);\n    &#125;\n\n    // 排序去重\n    sort(alls.begin(), alls.end());\n    alls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n    for(auto item : add)\n        arr[find(item.first)] += item.second;\n\n    // 处理前缀和\n    for(int i = 1; i &lt;= alls.size(); i++)\n        sum[i] = sum[i - 1] + arr[i];\n\n    for(auto item : query)\n        printf(&quot;%d\\n&quot;, sum[find(item.second)] - sum[find(item.first) - 1]);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/10/gcd%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%B4%A8%E6%95%B0%E7%AD%9B%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/10/gcd%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%B4%A8%E6%95%B0%E7%AD%9B%E6%A8%A1%E6%9D%BF/",
            "title": "gcd与欧拉质数筛模板",
            "date_published": "2023-01-10T08:04:00.000Z",
            "content_html": "<h2 id=\"欧几里得辗转相除法\"><a href=\"#欧几里得辗转相除法\" class=\"headerlink\" title=\"欧几里得辗转相除法\"></a>欧几里得辗转相除法</h2><p>$gcd(a, b)&#x3D;gcd(b,a\\ mod\\ b)&#x3D;···&#x3D;gcd(n,0)$</p>\n<pre><code class=\"c++\">int gcd(int a, int b)&#123;\n    return b ? gcd(b, a % b) : a;\n&#125;\n</code></pre>\n<h2 id=\"欧拉质数筛\"><a href=\"#欧拉质数筛\" class=\"headerlink\" title=\"欧拉质数筛\"></a>欧拉质数筛</h2><h4 id=\"时间复杂度-O-n\"><a href=\"#时间复杂度-O-n\" class=\"headerlink\" title=\"时间复杂度$O(n)$\"></a>时间复杂度$O(n)$</h4><pre><code class=\"c++\">const int N = 1e8 + 10;\nint p[N], cnt;\nbool st[N];\nvoid get_primes(int n)&#123;\n    for(int i = 2; i &lt;= n; i++)&#123;\n        if(!st[i]) p[cnt++] = i;\n        for(int j = 0; i * p[i] &lt;= n; j++)&#123;\n            st[p[j] * i] = true;\n            if(i % p[j] == 0) break;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "数论"
            ]
        },
        {
            "id": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "url": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "title": "树的直径",
            "date_published": "2023-01-08T08:58:43.000Z",
            "content_html": "<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nstruct Node&#123;\n    int id, w;\n&#125;;\n\nvector&lt;Node&gt; m[N];\nint dist[N];\nint n;\n\nvoid dfs(int idx, int root, int dst)&#123;\n    dist[idx] = dst;\n    for(auto node : m[idx])\n        if(node.id != root)\tdfs(node.id, idx, dst + node.w);\n&#125;\n\nint main()&#123;\n    int p, q, d, t;\n    cin &gt;&gt; n;\n    t = n - 1;\n    while(t--)&#123;\n        scanf(&quot;%d%d%d&quot;, &amp;p, &amp;q, &amp;d);\n        m[p].push_back(&#123;q, d&#125;);\n        m[q].push_back(&#123;p, d&#125;);\n    &#125;\n    dfs(1, -1, 0);\n    int idx = 1;\n    for(int i = 1; i &lt;= n; i++)\n        if(dist[i] &gt; dist[idx]) idx = i;\n    dfs(idx, -1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        if(dist[i] &gt; dist[idx]) idx = i;\n    idx = dist[idx];\n    printf(&quot;%lld&quot;, 10 * idx + (1ll + idx) * idx / 2);\t\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "title": "BFS模板",
            "date_published": "2023-01-05T09:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行，</p>\n<p>对于每一组数据，输出吃到奶酪的最少单位时间。</p>\n<p>若无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p>\n<p>在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h6 id=\"二维\"><a href=\"#二维\" class=\"headerlink\" title=\"二维\"></a>二维</h6><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 210;\n\n// 方向偏移量\nint dx[4] = &#123;-1, 0, 1, 0&#125;;\nint dy[4] = &#123;0, 1, 0, -1&#125;;\n// 距离\nint dist[N][N];\nint n, m;\npair&lt;int, int&gt; start;\npair&lt;int, int&gt; ed;\n// 迷宫\nchar g[N][N];\n\nint bfs(pair&lt;int, int&gt; s, pair&lt;int, int&gt; e)&#123;\n    queue&lt;pair&lt;int, int&gt;&gt; q;\n    memset(dist, -1, sizeof dist);\n\n    dist[s.first][s.second] = 0;\t\t\t\t\t\t// 起点\n    q.push(s);\n\n    while(!q.empty())&#123;\n        pair&lt;int, int&gt; t = q.front();\n        q.pop();\n\n        if(t == e) return dist[t.first][t.second];\t\t\t// 判断是否终点\n\n        for(int i = 0; i &lt; 4; i++)&#123;\n            int x = t.first + dx[i];\n            int y = t.second + dy[i];\n            if(x &lt; 0 || y &lt; 0 || x &gt;= n || y &gt;= m) continue;\t// 越界\n            if(g[x][y] == &#39;#&#39;) continue;\t\t\t\t// 碰墙\n            if(dist[x][y] != -1) continue;\t\t\t\t// 已遍历\n\n            dist[x][y] = dist[t.first][t.second] + 1;\t\t// 距离加一\n            q.push(&#123;x, y&#125;);\n        &#125;\n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--)&#123;\n        scanf(&quot;%d %d&quot;, &amp;n, &amp;m);\n        for(int i = 0; i &lt; n; i++) scanf(&quot;%s&quot;, g[i]);\n        for(int i = 0; i &lt; n; i++)&#123;\n            for(int j = 0; j &lt; m; j++)&#123;\n                if(g[i][j] == &#39;S&#39;) start = &#123;i, j&#125;;\n                if(g[i][j] == &#39;E&#39;) ed = &#123;i, j&#125;;\n            &#125;\n        &#125;\n\n        int d = bfs(start, ed);\n        if(d == -1) printf(&quot;oop!\\n&quot;);\n        else printf(&quot;%d\\n&quot;, d);\n    &#125;\n\n\n    return 0;\n&#125;\n</code></pre>\n<h5 id=\"三维\"><a href=\"#三维\" class=\"headerlink\" title=\"三维\"></a>三维</h5><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 101;\n\npair&lt;int, pair&lt;int, int&gt;&gt; start, ed, tmp;\nchar g[N][N][N];\nint st[N][N][N];\nint dy[4] = &#123;-1, 0, 1, 0&#125;;\nint dz[4] = &#123;0, -1, 0, 1&#125;;\nint l, r, c;\n\nint bfs(pair&lt;int, pair&lt;int, int&gt;&gt; s, pair&lt;int, pair&lt;int, int&gt;&gt; e)&#123;\n    memset(st, -1, sizeof st);\n    queue&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; q;\n    st[s.first][s.second.first][s.second.second] = 0;\n    q.push(s);\n\n    while(!q.empty())&#123;\n        tmp = q.front();\n        q.pop();\n        if(tmp == e) return st[tmp.first][tmp.second.first][tmp.second.second];\n    \n        int x = tmp.first, y, z;\n    \n        if(x + 1 &lt; l &amp;&amp; st[x + 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x + 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x + 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x + 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n        if(x - 1 &gt;= 0 &amp;&amp; st[x - 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x - 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x - 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x - 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n    \n        for(int i = 0; i &lt; 4; i++)&#123;\n            y = tmp.second.first + dy[i];\n            z = tmp.second.second + dz[i];\n            if(st[x][y][z] != -1) continue;\n            if(y &lt; 0 || z &lt; 0 || y &gt;= r || z &gt;= c) continue;\n            if(g[x][y][z] == &#39;#&#39;) continue;\n        \n            st[x][y][z] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x, &#123;y, z&#125;&#125;);\n        &#125;\n    \n    \n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    while(1)&#123;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;\n        if(l == 0) break;\n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++) \n                scanf(&quot;%s&quot;, g[i][j]);\n    \n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++)\n                for(int z = 0; z &lt; c; z++)\n                    if(g[i][j][z] == &#39;S&#39;) start = &#123;i, &#123;j, z&#125;&#125;;\n                    else if(g[i][j][z] == &#39;E&#39;) ed = &#123;i, &#123;j, z&#125;&#125;;\n    \n        int step = bfs(start, ed);\n        if(step == -1) printf(&quot;Trapped!\\n&quot;);\n        else printf(&quot;Escaped in %d minute(s).\\n&quot;, step);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "title": "线段树 / 树状数组 模板",
            "date_published": "2022-12-30T13:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>给定 <strong>n</strong> 个数组成的一个数列，规定有两种操作，一是修改某个元素，二是求子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含两个整数 <strong>n</strong> 和 <strong>m</strong>，分别表示数的个数和操作次数。</p>\n<p>第二行包含 <strong>n</strong> 个整数，表示完整数列。</p>\n<p>接下来 <strong>m</strong> 行，每行包含三个整数 <strong>k</strong>,<strong>a</strong>,<strong>b</strong> （<strong>k&#x3D;0</strong>，表示求子数列 <strong>[a,b]</strong> 的和；<strong>k&#x3D;1</strong>，表示第 <strong>a</strong> 个数加 <strong>b</strong>）。</p>\n<p>数列从 <strong>1</strong> 开始计数。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出若干行数字，表示 <strong>k</strong>&#x3D;<strong>0</strong> 时，对应的子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>n</strong>≤<strong>100000</strong>,<br><strong>1</strong>≤<strong>m</strong>≤<strong>100000，<br>1</strong>≤<strong>a</strong>≤<strong>b</strong>≤<strong>n</strong>,<br>数据保证在任何时候，数列中所有元素之和均在 int 范围内。</p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>10 5\n1 2 3 4 5 6 7 8 9 10\n1 1 5\n0 1 3\n0 4 8\n1 7 5\n0 4 8\n</code></pre>\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre><code>11\n30\n35\n</code></pre>\n<h4 id=\"树状数组模板\"><a href=\"#树状数组模板\" class=\"headerlink\" title=\"树状数组模板\"></a>树状数组模板</h4><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint arr[N], tr[N];\n\nint lowbit(int i)&#123;\n    return i &amp; -i;\n&#125;\n\nvoid add(int index, int x)&#123;\n    for(int i = index; i &lt;= n; i += lowbit(i))\n        tr[i] += x;\n    return;\n&#125;\n\nvoid change(int index, int x)&#123;\n    int c = x - arr[index];\n    for(int i = index; i &lt;= n; i += lowbit(i))\n        tr[i] += c;\n    return;\n&#125;\n\nint query(int index)&#123;\n    int res = 0;\n    for(int i = index; i; i -= lowbit(i))\n        res += tr[i];\n    return res;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;arr[i]);\n    for(int i = 1; i &lt;= n; i++) add(i, arr[i]);\n\n    while(m--)&#123;\n        int tag, l, r;\n        int res;\n        scanf(&quot;%d %d %d&quot;, &amp;tag, &amp;l, &amp;r);\n        if(tag) add(l, r);\n        else printf(&quot;%d\\n&quot;, query(r) - query(l - 1));\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"线段树模板\"><a href=\"#线段树模板\" class=\"headerlink\" title=\"线段树模板\"></a>线段树模板</h4><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint num[N];\n\nstruct node&#123;\n    int l, r;\n    int sum;\n&#125;sgt[N * 4];\t\t// 需要开N * 4\n\n// 更新当前节点\nvoid pushup(int root)&#123;\n    sgt[root].sum = sgt[root &lt;&lt; 1].sum + sgt[root &lt;&lt; 1 | 1].sum;\n&#125;\n\n// 初始化线段树\nvoid build(int root, int l, int r)&#123;\n    if(l == r) sgt[root].sum = num[l];\n    else&#123;\n        sgt[root] = &#123;l, r&#125;;\n        int mid = l + r &gt;&gt; 1;\n        build(root &lt;&lt; 1, l, mid);\n        build(root &lt;&lt; 1 | 1, mid + 1, r);\n        pushup(root);\n    &#125;\n    return;\n&#125;\n\nint query(int root, int l, int r)&#123;\n    if(sgt[root].l &gt;= l &amp;&amp; sgt[root].r &lt;= r) return sgt[root].sum;\n    int mid = sgt[root].l + sgt[root].r &gt;&gt; 1;\n    int sum = 0;\n    if(l &lt;= mid) sum += query(root &lt;&lt; 1, l, r);\n    if(r &gt; mid) sum += query(root &lt;&lt; 1 | 1, l, r);\n    return sum;\n&#125;\n\nvoid modify(int root, int index, int c)&#123;\n    if(sgt[root].l == sgt[root].r) sgt[root].sum += c;\n    else&#123;\n        int mid = sgt[root].l + sgt[root].r &gt;&gt; 1;\n        if(index &lt;= mid) modify(root &lt;&lt; 1, index, c);\n        else modify(root &lt;&lt; 1 | 1, index, c);\n        pushup(root);\n    &#125;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;num[i]);\n    build(1, 1, n);\n    int k, a, b;\n    while(m--)&#123;\n        scanf(&quot;%d %d %d&quot;, &amp;k, &amp;a, &amp;b);\n        if(k) modify(1, a, b);\n        else printf(&quot;%d\\n&quot;, query(1, a, b));\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法模板"
            ]
        },
        {
            "id": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "url": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "title": "stringstream 字符串转 int/double",
            "date_published": "2022-12-27T12:29:00.000Z",
            "content_html": "<p>某涉密单位下发了某种票据，并要在年终全部收回。</p>\n<p>每张票据有唯一的ID号。</p>\n<p>全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</p>\n<p>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</p>\n<p>你的任务是通过编程，找出断号的ID和重号的ID。</p>\n<p>假设断号不可能发生在最大和最小号。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含整数 <strong>N</strong>，表示后面共有 <strong>N</strong> 行数据。</p>\n<p>接下来 <strong>N</strong> 行，每行包含空格分开的若干个（不大于100个）正整数（不大于100000），每个整数代表一个ID号。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>要求程序输出1行，含两个整数 <strong>m</strong>,<strong>n</strong>用空格分隔。</p>\n<p>其中，<strong>m</strong>表示断号ID，<strong>n</strong>表示重号ID。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>N</strong>≤<strong>100</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>2\n5 6 8 11 9 \n10 12 9\n</code></pre>\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre><code>7 9\n</code></pre>\n<h4 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h4><pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint a[10001];\nint c, n;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    string line;\n    getline(cin, line);\t\\\\ cin 会读取换行符\n    while(n--)&#123;\n        getline(cin, line);\n        stringstream ssin(line);\n        while(ssin &gt;&gt; a[c])&#123;\n            c++;\n        &#125;\n    &#125;\n    sort(a, a + c);\n    int r1, r2;\n    for(int i = 1; i &lt; c; i++)&#123;\n        if(a[i] == a[i - 1]) r1 = a[i];\n        if(a[i] - 2 == a[i - 1]) r2 = a[i] - 1;\n    &#125;\n    cout &lt;&lt; r2 &lt;&lt; &quot; &quot; &lt;&lt; r1;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"stringstream技巧：\"><a href=\"#stringstream技巧：\" class=\"headerlink\" title=\"stringstream技巧：\"></a>stringstream技巧：</h4><h5 id=\"转int-x2F-double\"><a href=\"#转int-x2F-double\" class=\"headerlink\" title=\"转int&#x2F;double\"></a>转int&#x2F;double</h5><pre><code class=\"c++\">string result = &quot;10000&quot;;\t// double 同理, result = &quot;1.5&quot;;\nstringstream stream(result);\t// 可以是字符串也可以是数字，总之后面直接输入到目标变量里面\nint n = 0;\nstream &gt;&gt; n;\t//n 等于10000\n</code></pre>\n<h5 id=\"转int-x2F-double数组\"><a href=\"#转int-x2F-double数组\" class=\"headerlink\" title=\"转int&#x2F;double数组\"></a>转int&#x2F;double数组</h5><p><code>stringstream</code>以空格作为分隔符</p>\n<pre><code class=\"c++\">string str = &quot;1 2 3 4 5&quot;;\t// double 同理\nstringstream ssin(str);\nint i = 0;\nint a[10] = &#123;0&#125;;\nwhile(ssin &gt;&gt; a[i]) i++;\t// 此时a[0] = 1, a[1] = 2 ...\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "url": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "title": "在整数运算里处理浮点数",
            "date_published": "2022-12-25T08:23:44.000Z",
            "content_html": "<p><code>n = m / 2</code> 可以写成 <code>n * 2 = m</code></p>\n<p>同理：</p>\n<p><code>n &lt; m / 2</code> -&gt; <code>n * 2 &lt; m</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/21/AcWing_116._%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/",
            "url": "http://example.com/2022/12/21/AcWing_116._%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/",
            "title": "AcWing 116. 飞行员兄弟",
            "date_published": "2022-12-21T12:19:43.000Z",
            "content_html": "<p>“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 <strong>16</strong>个把手的冰箱。</p>\n<p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p>\n<p>只有当所有把手都打开时，冰箱才会打开。</p>\n<p>把手可以表示为一个 <strong>4</strong>×<strong>4</strong>的矩阵，您可以改变任何一个位置 **[<strong>i</strong>,<strong>j</strong>]**上把手的状态。</p>\n<p>但是，这也会使得第 <strong>i</strong>行和第 <strong>j</strong> 列上的所有把手的状态也随着改变。</p>\n<p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>输入一共包含四行，每行包含四个把手的初始状态。</p>\n<p>符号 <code>+</code> 表示把手处于闭合状态，而符号 <code>-</code> 表示把手处于打开状态。</p>\n<p>至少一个手柄的初始状态是关闭的。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>第一行输出一个整数 <strong>N</strong>，表示所需的最小切换把手次数。</p>\n<p>接下来 <strong>N</strong> 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p>\n<p><strong>注意</strong> ：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>i</strong>,<strong>j</strong>≤<strong>4</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>-+--\n----\n----\n-+--\n</code></pre>\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre><code>6\n1 1\n1 3\n1 4\n4 1\n4 3\n4 4\n</code></pre>\n<h3 id=\"思路，深搜\"><a href=\"#思路，深搜\" class=\"headerlink\" title=\"思路，深搜\"></a>思路，深搜</h3><pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint N = 999, kk;\nchar m[4][4], backup[4][4]; \nvector&lt;int&gt; ans, ways;\n\nvoid dfs(int x, int y, int step)&#123;\n    if(x == 4)&#123;\n        for(int i = 0; i &lt; 4; i++)&#123;\n            for(int j = 0; j &lt; 4; j++)&#123;\n                if(m[i][j] == &#39;+&#39;) return;\n            &#125;\n        &#125;\n        if(ans.empty())&#123;\n            ans = ways;\n        &#125;\n        if(step &lt; N)&#123;\n            N = step;\n            ans = ways;\n        &#125;\n        return;\n    &#125;\n    if(y == 4)&#123;\n        dfs(x + 1, 0, step);\n        return;\n    &#125;\n    for(int i = 0; i &lt; 4; i++)&#123;\n        m[x][i] == &#39;-&#39; ? m[x][i] = &#39;+&#39; : m[x][i] = &#39;-&#39;;\n        m[i][y] == &#39;-&#39; ? m[i][y] = &#39;+&#39; : m[i][y] = &#39;-&#39;;\n    &#125;\n    m[x][y] == &#39;-&#39; ? m[x][y] = &#39;+&#39; : m[x][y] = &#39;-&#39;;\n    ways.push_back(x + 1);\n    ways.push_back(y + 1);\n    dfs(x, y + 1, step + 1);\n\n    for(int i = 0; i &lt; 4; i++)&#123;\n        m[x][i] == &#39;-&#39; ? m[x][i] = &#39;+&#39; : m[x][i] = &#39;-&#39;;\n        m[i][y] == &#39;-&#39; ? m[i][y] = &#39;+&#39; : m[i][y] = &#39;-&#39;;\n    &#125;\n    m[x][y] == &#39;-&#39; ? m[x][y] = &#39;+&#39; : m[x][y] = &#39;-&#39;;\n    ways.pop_back();\n    ways.pop_back();\n    dfs(x, y + 1, step);\n&#125;\n\nint main()&#123;\n    for(int i = 0; i &lt; 4; i++)&#123;\n        scanf(&quot;%s&quot;, &amp;m[i]);\n    &#125;\n\n    dfs(0, 0, 0);\n\n    cout &lt;&lt; N &lt;&lt; endl;\n    for(int i = 0; i &lt; ans.size(); i++)&#123;\n        cout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;\n        if(i &amp; 1) cout &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "url": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "title": "AcWing 95. 费解的开关",
            "date_published": "2022-12-21T11:02:00.000Z",
            "content_html": "<p>你玩过“拉灯”游戏吗？</p>\n<p><strong>25</strong> 盏灯排成一个 <strong>5</strong>×<strong>5</strong> 的方形。</p>\n<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>\n<p>每一步，游戏者可以改变某一个灯的状态。</p>\n<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>\n<p>我们用数字 <strong>1</strong> 表示一盏开着的灯，用数字 <strong>0</strong> 表示关着的灯。</p>\n<p>下面这种状态</p>\n<pre><code>10111\n01101\n10111\n10000\n11011\n</code></pre>\n<p>在改变了最左上角的灯的状态后将变成：</p>\n<pre><code>01111\n11101\n10111\n10000\n11011\n</code></pre>\n<p>再改变它正中间的灯后状态将变成：</p>\n<pre><code>01111\n11001\n11001\n10100\n11011\n</code></pre>\n<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 <strong>6</strong>6 步以内使所有的灯都变亮。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行输入正整数 <strong>n</strong>，代表数据中共有 <strong>n</strong> 个待解决的游戏初始状态。</p>\n<p>以下若干行数据分为 <strong>n</strong> 组，每组数据有 <strong>5</strong> 行，每行 <strong>5</strong> 个字符。</p>\n<p>每组数据描述了一个游戏的初始状态。</p>\n<p>各组数据间用一个空行分隔。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>一共输出 <strong>n</strong> 行数据，每行有一个小于等于 <strong>6</strong> 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>\n<p>对于某一个游戏初始状态，若 <strong>6</strong> 步以内无法使所有灯变亮，则输出 <strong>−1</strong>。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>0</strong>&lt;<strong>n</strong>≤<strong>500</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>3\n00111\n01011\n10001\n11010\n11100\n\n11101\n11101\n11110\n11111\n11111\n\n01111\n11111\n11111\n11111\n11111\n</code></pre>\n<p>输出样例：</p>\n<pre><code>3\n2\n-1\n</code></pre>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint light[7][7], backup[7][7];\n\nvoid turn(int x, int y)&#123;\n    backup[x][y] = !backup[x][y];\n    backup[x - 1][y] = !backup[x - 1][y];\n    backup[x][y - 1] = !backup[x ][y - 1];\n    backup[x + 1][y] = !backup[x + 1][y];\n    backup[x][y + 1] = !backup[x][y + 1];\n&#125;\n\nint main()&#123;\n    int n;\n    string str;\n    str.resize(7);\n    scanf(&quot;%d&quot;, &amp;n);\n    for(int i = 0; i &lt; n; i++)&#123;\n        int res = 10;\n\n        for(int x = 1; x &lt;= 5; x++)&#123;\n            string str;\n            scanf(&quot;%s&quot;, &amp;str[0]);\n            for(int y = 1; y &lt;= 5; y++)\n                light[x][y] = str[y - 1] - &#39;0&#39;;\n        &#125;\n        // 枚举操作而非状态\n        // 01001 表示操作第2和第5盏灯\n        for(int k = 0; k &lt; 32; k++)&#123;\n            memcpy(backup, light, sizeof light);\n            int step = 0;\n            for(int j = 1; j &lt;= 5; j++)&#123;\n                if((k &gt;&gt; (j - 1)) &amp; 1)&#123;\n                    turn(1, j);\n                    step++;\n                &#125;\n            &#125;\n\n            for(int j = 2; j &lt;= 5; j++)&#123;\n                for(int l = 1; l &lt;= 5; l++)&#123;\n                    if(backup[j - 1][l] == 0)&#123;\n                        turn(j, l);\n                        step++;\n                    &#125;\n                &#125;\n            &#125;\n            bool dark = false;\n            for(int j = 1; j &lt;= 5; j++)&#123;\n                if(backup[5][j] != 1)&#123;\n                    dark = true;\n                    break;\n                &#125;\n            &#125;\n            if(!dark)&#123;\n                res = min(res, step);\n            &#125;\n\n        &#125;\n        if(res == 10 || res &gt; 6) res = -1;\n\n        cout &lt;&lt; res;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/19/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2_%EF%BC%88%E5%90%91%E5%B7%A6%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%90%91%E5%8F%B3%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9B%B8%E5%B7%AE%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87_1%EF%BC%89/",
            "url": "http://example.com/2022/12/19/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2_%EF%BC%88%E5%90%91%E5%B7%A6%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%90%91%E5%8F%B3%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9B%B8%E5%B7%AE%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87_1%EF%BC%89/",
            "title": "数字三角形 （向左下走的次数与向右下走的次数相差不能超过 1）",
            "date_published": "2022-12-19T12:01:00.000Z",
            "content_html": "<p><strong>二维数组初始化<code>fill(arr[0], arr[0] + n * n, 0)</code></strong></p>\n<h3 id=\"DFS-超时\"><a href=\"#DFS-超时\" class=\"headerlink\" title=\"DFS 超时\"></a>DFS 超时</h3><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint num[101][101] = &#123;0&#125;;\nint add[101][101] = &#123;0&#125;;\nint n;\nvector&lt;int&gt; ans;\n\nvoid dfs(int l, int r, int x, int y)&#123;\n  if(l &gt; n/2 || r &gt; n/2)&#123;\n    return;\n  &#125;\n    if(x == n - 1)&#123;\n        if(abs(l - r) &gt; 1)&#123;\n            return;\n        &#125;\n        ans.push_back(add[x][y]);\n        return;\n    &#125;\n  \n    l++;\n    add[x + 1][y] = num[x + 1][y] + add[x][y];\n    s(l, r, x + 1, y);\n    add[x + 1][y] = num[x + 1][y];\n    l--;\n\n    r++;\n    add[x + 1][y + 1] = num[x + 1][y + 1] + add[x][y];\n    s(l, r, x + 1, y + 1);\n    add[x + 1][y + 1] = num[x + 1][y + 1];\n    r--;\n&#125;\n\nint main()\n&#123;\n    cin &gt;&gt; n;\n  \n    for(int i = 0; i &lt; n; i++)&#123;\n        for(int j = 0; j &lt;= i; j++)&#123;\n            scanf(&quot;%d&quot;, &amp;num[i][j]);\n        &#125;\n    &#125;\n    add[0][0] = num[0][0];\n    dfs(0, 0, 0, 0);\n    auto max = max_element(ans.begin(), ans.end());\n    cout &lt;&lt; *max;\n  \n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int n;\n    cin &gt;&gt; n;\n    int num[n][n], dp[n][n];\n    fill(num[0], num[0] + n * n, 0);\n    fill(dp[0], dp[0] + n * n, 0);\n    for(int i = 0; i &lt; n; i++)&#123;\n        for(int j = 0; j &lt;= i; j++)&#123;\n            scanf(&quot;%d&quot;, &amp;num[i][j]);\n        &#125;\n    &#125;\n    dp[0][0] = num[0][0];\n    for(int i = 0; i &lt; n; i++)&#123;\n        for(int j = 0; j &lt;= i; j++)&#123;\n            if(i - 1 &gt;= 0 &amp;&amp; j - 1 &lt; 0)&#123;\n                dp[i][j] = dp[i - 1][j] + num[i][j];\n            &#125;else if(i - 1 &gt;= 0 &amp;&amp; j - 1 &gt;= 0)&#123;\n                dp[i][j] = max(dp[i - 1][j - 1] + num[i][j], dp[i - 1][j] + num[i][j]);\n            &#125;\n        &#125;\n    &#125;\n// 因为向左下走的次数与向右下走的次数相差不能超过 1\n// 所以答案一定在中间\n    if(n%2 == 0)&#123;\n        cout &lt;&lt; max(dp[n - 1][n / 2 - 1], dp[n - 1][n / 2]);\n    &#125;else&#123;\n        cout &lt;&lt; dp[n - 1][n / 2];\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/06/C++_%E6%8F%90%E5%8F%96%E5%B0%8F%E6%95%B0/",
            "url": "http://example.com/2022/12/06/C++_%E6%8F%90%E5%8F%96%E5%B0%8F%E6%95%B0/",
            "title": "C++ 提取小数",
            "date_published": "2022-12-06T09:45:00.000Z",
            "content_html": "<p>OpenAi写的一段代码，太值得学习了</p>\n<p><del>自己写for循环提取小数实在是太蠢了</del></p>\n<h2 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h2><pre><code class=\"c++\">std::copy(start, end, std::back_inserter(container));\n\nstd::copy(iterator source_first, iterator source_end, iterator target_start);\n</code></pre>\n<p>因为第三个参数要接受一个迭代器，所以需要使用<code>back_inserter(container)</code></p>\n<h2 id=\"regex\"><a href=\"#regex\" class=\"headerlink\" title=\"regex\"></a>regex</h2><p>pass</p>\n<pre><code class=\"c++\">string expression = &quot;4.12*3.14&quot;;\nregex pattern(&quot;([\\\\d.]+)|([+\\\\-*/()])&quot;);\nvector&lt;string&gt; words;\ncopy(\n    sregex_token_iterator(expression.begin(), expression.end(), pattern),\n    sregex_token_iterator(),\n    back_inserter(words));\n\nfor(int i = 0; i &lt; words.size(); i++)\n    cout &lt;&lt; words[i] &lt;&lt; endl;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "url": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "title": "位运算",
            "date_published": "2022-11-28T03:47:00.000Z",
            "content_html": "<h6 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136. Single Number\"></a>136. Single Number</h6><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/4226140631.png\" alt=\"136\"></p>\n<ul>\n<li>交换律：a ^ b ^ c &lt;&#x3D;&gt; a ^ c ^ b</li>\n<li>任何数于0异或为任何数 0 ^ n &#x3D;&gt; n</li>\n<li>相同的数异或为0: n ^ n &#x3D;&gt; 0</li>\n</ul>\n<p><code>var a = [2, 3, 2, 4, 4]</code></p>\n<p><code>2 ^ 3 ^ 2 ^ 4 ^ 4 等价于 2 ^ 2 ^ 4 ^ 4 ^ 3 =&gt; 0 ^ 0 ^3 =&gt; 3</code></p>\n<h6 id=\"1758-Minimum-Changes-To-Make-Alternating-Binary-String\"><a href=\"#1758-Minimum-Changes-To-Make-Alternating-Binary-String\" class=\"headerlink\" title=\"1758. Minimum Changes To Make Alternating Binary String\"></a>1758. Minimum Changes To Make Alternating Binary String</h6><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/2630183447.png\" alt=\"1758\"></p>\n<pre><code class=\"c++\">// 1 &amp; 1 = 1\n\n// 1 &amp; 0 = 0\n\n// 0 &amp; 0 = 0\n\nint minOperations(string s) &#123;\n        char a[2] = &#123;&#39;0&#39;, &#39;1&#39;&#125;;\n        int ans = 0, t = 0;\n        for(int i = 0; i &lt; s.size(); i++) &#123;\n            if(a[i &amp; 1] == s[i]) ans++;\n            else t++;\n        &#125;\n        return min(ans, t);\n    &#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/11/C++%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "url": "http://example.com/2022/11/11/C++%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "title": "C++大作业",
            "date_published": "2022-11-11T06:04:00.000Z",
            "content_html": "<h4 id=\"暂时bug-x2F-问题\"><a href=\"#暂时bug-x2F-问题\" class=\"headerlink\" title=\"暂时bug&#x2F;问题\"></a>暂时bug&#x2F;问题</h4><ul>\n<li>无法计算负数</li>\n<li>只能整数</li>\n<li>减法只能前者大于后者</li>\n<li>无法判断表达式的准确性</li>\n<li><del>复数实部不能小于0</del><br><em><strong>……</strong></em><br><del>头秃</del></li>\n</ul>\n<pre><code class=\"cpp\">// 标准:GNU C++ 14\n// 编译器:GNU GCC 8.1.0 64-bit Debug\n#include &lt;bits/stdc++.h&gt;\n#define MAX 10000\nusing namespace std;\nstack &lt;char&gt; opt;\t\t// 操作数\nstack &lt;string&gt; num;\t\t// 符号位\n\n// 长度判断\nint CompareLength(string a, string b) &#123;\n    return a.length() &gt;= b.length() ? 1 : 0;\n&#125;\n\n// 高精数大小判断\nint CompareSize(string a, string b)&#123;\n    if(a.length() &gt; b.length()) return 1;\n    if(a.length() &lt; b.length()) return -1;\n    for(int i = 0; i &lt; a.length(); i++)&#123;\n        if(a[i] &gt; b[i]) return 1;\n        if(a[i] &lt; b[i]) return -1;\n    &#125;\n    return 0;\n&#125;\n\n// 高精度加法\nstring BigAdd(string a, string b) &#123;\n    int la, lb, up = 0, temp;\t// up进位数\n    string n;\n    la = a.length();\n    lb = b.length();\n    if (CompareLength(a, b)) &#123;\t\t// 判断长度，短字符串前端补零\n        for (int i = 0; i &lt; la - lb; i++)\n            b = &quot;0&quot; + b;\n    &#125; else &#123;\n        for (int i = 0; i &lt; lb - la; i++)\n            a = &quot;0&quot; + a;\n    &#125;\n    for (int i = max(la, lb) - 1; i &gt;= 0; i--) &#123;\n        temp = a[i] - &#39;0&#39; + b[i] - &#39;0&#39; + up;\t// 目标 = 被加数 + 加数 + 进位数\n        up = temp / 10;\t\t\t// 进位数\n        temp %= 10;\n        n += char(temp) + &#39;0&#39;;\n    &#125;\n    if (up != 0) n += char(up) + &#39;0&#39;;\t\t// 99 + 1\n    reverse(n.begin(), n.end());\n\n    return n;\n&#125;\n\n// 高精度减法\n// 被减数需大于减除\nstring BigSub(string a, string b) &#123;\n    int na[MAX] = &#123;0&#125;, nb[MAX] = &#123;0&#125;, an[MAX] = &#123;0&#125;, la, lb;\t\t\t// 初始化\n    string n;\n    la = a.length();\n    lb = b.length();\n    for (int i = 0; i &lt; la; i++) na[la - i - 1] = a[i] - &#39;0&#39;;\t\t// 反转操作数，写入整形数组方便运算\n    for (int i = 0; i &lt; lb; i++) nb[lb - i - 1] = b[i] - &#39;0&#39;;\n    for (int i = 0; i &lt; la; i++) &#123;\n        if (na[i] &lt; nb[i]) &#123;\t\t\t// 借位操作\n            na[i] += 10;\n            na[i + 1]--;\n        &#125;\n        an[i] = na[i] - nb[i];\n    &#125;\n    for (int i = 0; i &lt; la; i++)\t\t\t// 写入输出\n        n += an[i] + &#39;0&#39;;\n    reverse(n.begin(), n.end());\t\t\t// 反转目标\n    n.erase(0, n.find_first_not_of(&#39;0&#39;));\t\t\t// 去除前导0\n    if (n == &quot;&quot;) n = &quot;0&quot;;\t\t\t// 100-100\n\n    return n;\n&#125;\n\n// 高精度乘法\nstring BigMul(string a, string b) &#123;\n    int la, lb, temp_int, up = 0;\n    string temp_str, n = &quot;0&quot;;\n    la = a.length();\n    lb = b.length();\n    reverse(a.begin(), a.end());\t\t\t// 反转方便操作\n    reverse(b.begin(), b.end());\n    for (int i = 0; i &lt; la; i++) &#123;\n        for (int j = 0; j &lt; lb; j++) &#123;\n            temp_int = (a[i] - &#39;0&#39;) * (b[j] - &#39;0&#39;) + up;\t\t\t// 加法同理，进位操作\n            up =  temp_int / 10;\n            temp_int %= 10;\n            temp_str += temp_int + &#39;0&#39;;\t\t\t\t// 按位写入临时字符串\n            if (up &amp;&amp; j == lb - 1) temp_str += (char)(up + &#39;0&#39;);\t\t\t// 防止2*5无法进位\n        &#125;\n        reverse(temp_str.begin(), temp_str.end());\n        up = 0;\t\t\t// \t置空进位符\n        for (int j = 0; j &lt; i; j++)\ttemp_str += &quot;0&quot;;\t\t\t// 移位处理，n+10*i同理\n        //\t\tcout &lt;&lt; temp_str &lt;&lt; endl;\n        n = BigAdd(temp_str, n);\n        temp_str = &quot;&quot;;\t\t\t// 置空按位乘\n    &#125;\n    n.erase(0, n.find_first_not_of(&#39;0&#39;));\t\t\t// 0*1\n    if (n == &quot;&quot;) n = &quot;0&quot;;\n\n    return n;\n&#125;\n\n// 高精度除法\nstring BigDiv(string a, string b, int flag = 1) &#123;\n    string temp = b, n;\n    int l = a.length() - b.length();\t\t\t// 商预操作\n    for(int i = 0; i &lt; a.length(); i++) n += &quot;0&quot;;\t\t\t// 商预操作\n    for(int i = l; i &gt;= 0; i--)&#123;\n        for(int j = 0; j &lt; i; j++)&#123;\t\t\t// 被除数添零\n            temp += &quot;0&quot;;\n        &#125;\n        while(CompareSize(a, temp) &gt;= 0)&#123;\n            n[i]++;\n            a = BigSub(a, temp);\t\t\t// 减法模拟\n        &#125;\n        temp = b;\n    &#125;\n    reverse(n.begin(), n.end());\n    n.erase(0, n.find_first_not_of(&quot;0&quot;));\n    if (n == &quot;&quot;) n = &quot;0&quot;;\n\n    if(flag) return n;\n    else return a;\t\t\t// a为余数\n&#125;\n\nstring BigMod(string a, string b) &#123;\treturn BigDiv(a, b, 0); &#125;\n\n// 中缀\nint Priority(char a) &#123;\t\t// 符号优先级\n    if (a == &#39;+&#39; || a == &#39;-&#39;) return 1;\n    else if (a == &#39;*&#39; || a == &#39;/&#39;) return 2;\n    else return -1;\n&#125;\n\nvoid Clc(char tag) &#123;\n    string a = num.top();\n    num.pop();\n    string b = num.top();\n    num.pop();\n    if (tag == &#39;+&#39;) num.push(BigAdd(a, b));\n    else if (tag == &#39;-&#39;) num.push(BigSub(b, a));\t\t\t// 注意出栈顺序\n    else if (tag == &#39;*&#39;) num.push(BigMul(a, b));\n    else if (tag == &#39;/&#39;) num.push(BigDiv(b, a));\n    else if (tag == &#39;%&#39;) num.push(BigMod(b, a));\n&#125;\n\n// 整数运算\nstring InitNum(string str)&#123;\n    string temp;\n    bool flag = false;\n    for (int i = 0; i &lt; str.length(); i++) &#123;\n        if (str[i] &gt;= &#39;0&#39; &amp;&amp; str[i] &lt;= &#39;9&#39;) &#123;\n            temp += str[i];\n            flag = true;\t\t\t// 为后续判断是否有剩余未入栈，如 1+1\n        &#125; else if (flag) &#123;\n            num.push(temp);\n            temp = &quot;&quot;;\n            flag = false;\n        &#125;\n        if (str[i] == &#39;(&#39;) opt.push(str[i]);\n        if (str[i] == &#39;+&#39; || str[i] == &#39;-&#39; || str[i] == &#39;*&#39; || str[i] == &#39;/&#39; || str[i] == &#39;%&#39;) &#123;\n            if (opt.empty())\topt.push(str[i]);\t\t\t// 栈空直接入栈\n            else &#123;\n                if (Priority(opt.top()) &gt;= Priority(str[i])) &#123;\t\t\t// 判断优先级，当栈顶大于等于当前操作符，当前操作符不入栈直接运算\n                    Clc(opt.top());\n                    opt.pop();\n                    opt.push(str[i]);\t\t\t// 运算结束，高优先级出栈，当前操作符入栈\n                &#125; else opt.push(str[i]);\t\t\t// 反之出栈\n            &#125;\n        &#125;\n        if (str[i] == &#39;)&#39;) &#123;\t\t\t// 右括号全出栈，直至栈顶为左括号相匹配结束出栈\n            while (opt.top() != &#39;(&#39;) &#123;\n                Clc(opt.top());\n                opt.pop();\n            &#125;\n            opt.pop();\t\t\t// 弹出左括号\n        &#125;\n    &#125;\n    if (flag) num.push(temp);\t\t\t// 标记判断是否有剩余为入栈\n    // 操作符平级\n    while (!opt.empty()) &#123;\t\t\t// 循环结束到操作栈为空\n        Clc(opt.top());\n        opt.pop();\n    &#125;\n    //\tcout &lt;&lt; num.top();\n\n    return num.top();\n&#125;\n\n// 复数运算\ncomplex&lt;long int&gt; Clc_complex(char tag, complex&lt;long int&gt; c1, complex&lt;long int&gt; c2) &#123;\n    if (tag == &#39;+&#39;)\treturn c1+c2;\n    else if (tag == &#39;-&#39;) return c1-c2;\n    else if (tag == &#39;*&#39;) return c1*c2;\n    else if (tag == &#39;/&#39;) return c1/c2;\n&#125;\n\nstring InitComplex(string str)&#123;\n    string com = &quot;&quot;, tempReal = &quot;&quot;, tempComplex = &quot;&quot;;\t\t// 临时复数、临时实部、临时虚部\n    char complexOpt;\t\t\t// 虚部符号位\n    int indexRight, indexLeft;\n    int complexCount;\t\t\t// 复数个数\n    for (int i = 0; i &lt; str.length(); i++)\t\t// 判断复数个数，一个i为一个复数\n        if(str[i] == &#39;i&#39;) complexCount++;\n    complex&lt;long int&gt; c[complexCount];\n    complexCount = 0;\n    while(str != &quot;&quot;)&#123;\n        // 提取复数\n        indexRight = str.find(&#39;(&#39;);\n        indexLeft = str.find(&#39;)&#39;);\n        com = str.substr(indexRight, indexLeft + 1);\n        complexOpt = com.find(&#39;+&#39;)!=string::npos?&#39;+&#39;:&#39;-&#39;;\n        tempReal = com.substr(1, com.find(complexOpt) - 1);\n        tempComplex = com.substr(com.find(complexOpt) + 1, com.length() - 4 - tempReal.length());\n//\t\tcout &lt;&lt; com.length() &lt;&lt; &quot; &quot; &lt;&lt;tempReal &lt;&lt; &quot; &quot; &lt;&lt; tempComplex &lt;&lt; endl;\n        c[complexCount] = &#123;stol(tempReal), stol(complexOpt+tempComplex)&#125;;\n        // 提取完成后擦除\n        str.erase(indexRight, indexLeft + 1);\n        // 四则运算判断优先级\n        if (str[0] == &#39;+&#39; || str[0] == &#39;-&#39; || str[0] == &#39;*&#39; || str[0] == &#39;/&#39;) &#123;\n            if (opt.empty())\topt.push(str[0]);\t\t\t// 栈空直接入栈\n            else &#123;\n                if (Priority(opt.top()) &gt;= Priority(str[0])) &#123;\t\t\t// 判断优先级，当栈顶大于等于当前操作符，当前操作符不入栈直接运算\n                    c[complexCount - 1] = Clc_complex(opt.top(), c[complexCount - 1], c[complexCount]);\n//\t\t\t\t\tcout &lt;&lt; c[complexCount - 1];\n                    complexCount -= 1;\n                    opt.pop();\n                    opt.push(str[0]);\t\t\t// 运算结束，高优先级出栈，当前操作符入栈\n                &#125; else opt.push(str[0]);\t\t\t// 反之入栈\n            &#125;\n            // 擦除操作符\n            str.erase(0, 1);\n        &#125;\n        complexCount++;\n    &#125;\n    // 操作符平级\n    while (!opt.empty()) &#123;\n        c[complexCount - 2] = Clc_complex(opt.top(), c[complexCount - 2], c[complexCount - 1]);\n        complexCount--;\n        opt.pop();\n    &#125;\n\n    com = to_string(c[0].real()) + complexOpt + to_string(c[0].imag()) + &#39;i&#39;;\n    complexOpt = (c[0].imag() &lt; 0)?&#39;-&#39;:&#39;+&#39;;\n\n    return com;\n&#125;\n\n// 判断复数、实数\nstring Complex_Or_Real(string str)&#123;\n    for(int i = 0; i &lt; str.length(); i++)&#123;\n        if(str[i] == &#39;i&#39;) return InitComplex(str);\n    &#125;\n    return InitNum(str);\n&#125;\n\nint main() &#123;\n    string str, a;\n    cin &gt;&gt; str;\n    a = Complex_Or_Real(str);\n    cout &lt;&lt; a;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/10/DFS%E5%88%A4%E6%96%AD%E8%BF%B7%E5%AE%AB%E6%97%A0%E8%A7%A3/",
            "url": "http://example.com/2022/11/10/DFS%E5%88%A4%E6%96%AD%E8%BF%B7%E5%AE%AB%E6%97%A0%E8%A7%A3/",
            "title": "DFS判断迷宫无解",
            "date_published": "2022-11-10T00:54:26.000Z",
            "content_html": "<p>回溯到原点既无解</p>\n<pre><code class=\"c++\">if(src_x == x &amp;&amp; src_y == y)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/10/31/WolfraAlpha_%E7%9F%A9%E9%98%B5%E7%9B%B8%E5%85%B3/",
            "url": "http://example.com/2022/10/31/WolfraAlpha_%E7%9F%A9%E9%98%B5%E7%9B%B8%E5%85%B3/",
            "title": "WolfraAlpha 矩阵相关",
            "date_published": "2022-10-31T08:28:00.000Z",
            "content_html": "<p>+,*, ^, <strong>…</strong> <strong>—</strong> 按元素自动作用</p>\n<p>Dot <strong>—</strong> 矩阵积，自动处理行向量和列向量</p>\n<hr>\n<p>Inverse <strong>—</strong> 矩阵逆 (线性系统用 LinearSolve)</p>\n<p>MatrixRank <strong>—</strong> 矩阵的秩</p>\n<p>NullSpace <strong>—</strong> 跨越矩阵零空间的向量</p>\n<p>RowReduce <strong>—</strong> 行简化阶梯形</p>\n<p>PseudoInverse <strong>—</strong> 方阵或矩形矩阵的伪逆</p>\n<hr>\n<p>Transpose <strong>—</strong> 转置($m^T$，用<code>esc</code> tr <code>esc</code>)</p>\n<p>ConjugateTranspose <strong>—</strong> 共轭转置($m^+$，用<code>esc</code> ct <code>esc</code>)</p>\n<p>LowerTriangularize, UpperTriangularize <strong>—</strong> 提取矩阵的下三角形或上三角形部分</p>\n<p>Symmetrize <strong>—</strong> 找出矩阵的对称、反对称等部分</p>\n<hr>\n<p>Diagonal <strong>—</strong> 获取对角线上的元素列表</p>\n<p>Tr <strong>—</strong> 矩阵的迹</p>\n<p>Det <strong>—</strong> 行列式</p>\n<p>Norm <strong>—</strong> 算子范数，p 范数和 Frobenius 范数</p>\n<p>Adjugate <strong>—</strong> 转置伴随</p>\n<p>Minors <strong>—</strong> 子式矩阵</p>\n<p>Permanent <strong>—</strong> 积和式</p>\n<hr>\n<p>KroneckerProduct <strong>—</strong> 矩阵的直积 (外积)</p>\n<hr>\n<p>MatrixPower <strong>—</strong> 数值矩阵或符号矩阵的幂</p>\n<p>MatrixExp <strong>—</strong> 矩阵指数</p>\n<p>MatrixLog <strong>—</strong> 矩阵对数</p>\n<p>MatrixFunction <strong>—</strong> 一般矩阵函数</p>\n<hr>\n<p>Eigenvalues, Eigenvectors <strong>—</strong> 具体或近似的特征值或特征向量</p>\n<p>Eigensystem <strong>—</strong> 特征值和特征向量</p>\n<p>CharacteristicPolynomial <strong>—</strong> 符号的特征多项式</p>\n<blockquote>\n<p>转自官方文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2Uud29sZnJhbS5jb20vbGFuZ3VhZ2UvZ3VpZGUvTWF0cml4T3BlcmF0aW9ucy5odG1sLnpo\">https://reference.wolfram.com/language/guide/MatrixOperations.html.zh</span></p>\n</blockquote>\n",
            "tags": [
                "WolfraAlpha"
            ]
        },
        {
            "id": "http://example.com/2022/10/27/Unity%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%BA%A2%E7%BB%BF%E7%81%AF%E8%87%AA%E5%8A%A8%E5%8F%98%E6%8D%A2/",
            "url": "http://example.com/2022/10/27/Unity%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%BA%A2%E7%BB%BF%E7%81%AF%E8%87%AA%E5%8A%A8%E5%8F%98%E6%8D%A2/",
            "title": "Unity回调函数实现简单红绿灯自动变换",
            "date_published": "2022-10-27T13:24:00.000Z",
            "content_html": "<pre><code class=\"c#\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class AutoChangeColor : MonoBehaviour\n&#123;\n    public Material[] color;\n    int i = 0;\n    MeshRenderer meshRenderer;\n    void Start()\n    &#123;\n        meshRenderer = GetComponent&lt;MeshRenderer&gt;();\n        ChangeColor();\n    &#125;\n\n    void Update()\n    &#123;\n\n    &#125;\n\n    private void ChangeColor()\n    &#123;\n        meshRenderer.material = color[i];\n        if (i == 0) Invoke(&quot;ChangeColor&quot;, 3);\n        else if(i == 1) Invoke(&quot;ChangeColor&quot;, 1);\n        else if(i == 2) Invoke(&quot;ChangeColor&quot;, 3);\n        i += 1;\n        if (i == 3) i = 0;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%86%E6%AE%B5%E7%BA%BF%E6%80%A7%E7%82%B9%E8%BF%90%E7%AE%97/",
            "url": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%86%E6%AE%B5%E7%BA%BF%E6%80%A7%E7%82%B9%E8%BF%90%E7%AE%97/",
            "title": "图像的分段线性点运算",
            "date_published": "2022-10-04T08:12:44.000Z",
            "content_html": "<p>$$<br>\\begin{align*}<br>\\begin{split}<br>g(i,j)&#x3D; \\left {<br>\\begin{array}{ll}<br>\\alpha f(i,j),&amp;0\\le f(i,j)&lt; a\\<br>\\beta (f(i,j)-a)+g_{a},&amp;a\\le f(i,j)&lt; b\\<br>\\gamma  (f(i,j)-b)+g_{b},&amp;b\\le f(i,j)&lt; 255<br>\\end{array}<br>\\right.<br>\\end{split}<br>\\end{align*}</p>\n<p>$$</p>\n<pre><code class=\"python\">from turtle import width\nfrom matplotlib import pyplot as plt\nimport cv2,matplotlib\n\nfa, fb = 80, 200\na, b, c = 1.1, 1.2, 1.3\ncat = cv2.imread(&quot;cat.jpg&quot;)\ncat = cv2.cvtColor(cat, cv2.COLOR_BGR2GRAY)\nchange_cat = cat.copy()\nwidth = cat.shape[0]\nheight = cat.shape[1]\n\nfor i in range(0, width):\n    for j in range(0, height):\n        if 0 &lt;= change_cat[i][j] &lt; fa:\n            change_cat[i][j] = 0\n        elif fa &lt;= change_cat[i][j] &lt; fb:\n            change_cat[i][j] = 255 * ((change_cat[i][j] - fa) / (fb - fa))\n        else:\n            change_cat[i][j] = 255\n\nplt.rcParams[&#39;font.family&#39;] = &#39;SimHei&#39; \nplt.figure(figsize=(10, 8), dpi = 100)\nplt.subplot(121),plt.imshow(cat, cmap=&#39;gray&#39;),plt.title(&#39;原图&#39;)\nplt.subplot(122),plt.imshow(change_cat, cmap=&#39;gray&#39;),plt.title(&#39;调整后&#39;)\nplt.show()\n</code></pre>\n<p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/10/2395936215.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97%EF%BC%88%E5%AF%B9%E6%95%B0%EF%BC%89/",
            "url": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97%EF%BC%88%E5%AF%B9%E6%95%B0%EF%BC%89/",
            "title": "图像的非线性运算（对数）",
            "date_published": "2022-10-04T07:58:00.000Z",
            "content_html": "<h2 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h2><p>$$<br>g[i][j] &#x3D; clog_{10}(f[i][j])</p>\n<p>$$</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre><code class=\"python\">import cv2,math,skimage\nfrom matplotlib import pyplot as plt\nfrom copy import copy\n\ndef change(img, w, l, channel):\n    if channel == 3:\n        img = skimage.img_as_float(img)\n        for i in range(w):\n            for j in range(l): \n                for k in range(channel):\n                    img[i][j][k] = 2 * math.log((1 + img[i][j][k]), 10)\n    elif channel == 2:\n        for i in range(w):\n            for j in range(l): \n                img[i][j] = 20 * math.log((1 + img[i][j]), 10)\n    return img\n\n\ncat = cv2.imread(&quot;D:\\\\work\\\\cv\\\\1002\\\\cat.jpg&quot;)\ncat = cv2.cvtColor(cat, cv2.COLOR_BGR2GRAY)\n\nchange_cat = cat.copy()\n# print(change_cat.ndim)\nchange_cat = change(change_cat, change_cat.shape[0], change_cat.shape[1], change_cat.ndim)\n\nif change_cat.ndim == 3:\n    plt.rcParams[&#39;font.family&#39;] = &#39;SimHei&#39; \n    plt.figure(figsize=(10, 8), dpi = 100)\n    plt.subplot(121),plt.imshow(cat[:,:,::-1]),plt.title(&#39;原图&#39;)\n    plt.subplot(122),plt.imshow(change_cat[:,:,::-1]),plt.title(&#39;调整后&#39;)\n    plt.show()\nelif change_cat.ndim == 2:\n    plt.rcParams[&#39;font.family&#39;] = &#39;SimHei&#39; \n    plt.figure(figsize=(10, 8), dpi = 100)\n    plt.subplot(121),plt.imshow(cat, cmap=&#39;gray&#39;),plt.title(&#39;原图&#39;)\n    plt.subplot(122),plt.imshow(change_cat, cmap=&#39;gray&#39;),plt.title(&#39;调整后&#39;)\n    plt.show()\n</code></pre>\n<h3 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h3><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/10/2526917559.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/27/%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3%E8%A1%A5%E5%81%BF/",
            "url": "http://example.com/2022/09/27/%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3%E8%A1%A5%E5%81%BF/",
            "title": "伽马校正补偿",
            "date_published": "2022-09-27T08:33:00.000Z",
            "content_html": "<h2 id=\"伽玛校正\"><a href=\"#伽玛校正\" class=\"headerlink\" title=\"伽玛校正\"></a>伽玛校正</h2><pre><code>所谓伽玛校正就是对图像的伽玛曲线进行编辑，以对图像进行非线性色调编辑的方法，检出图像信号中的深色部分和浅色部分，并使两者比例增大，从而提高图像对比度效果。计算机绘图领域惯以此屏幕输出电压与对应亮度的转换关系曲线，称为伽玛曲线（Gamma Curve）。\n</code></pre>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200626102704679.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"gamma-补偿的作用\"><a href=\"#gamma-补偿的作用\" class=\"headerlink\" title=\"gamma 补偿的作用\"></a>gamma 补偿的作用</h2><p>gamma 补偿可以增加图片像素低的部分的对比度，减小图片像素高的部分的对比度。</p>\n<p>也就是图片黑的地方可以看得更清晰，图片亮的地方会变得更模糊。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre><code class=\"python\">import cv2,skimage\nimport matplotlib.pyplot as plt\n\ndef Gamma(img, gamma):\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\t\t# 转灰度图\n    img = skimage.img_as_float(img)\t\t\t# 转浮点\n    return pow(img, gamma)\n\ncat = cv2.imread(&quot;cat.jpg&quot;)\n\nplt.rcParams[&#39;font.family&#39;] = &#39;SimHei&#39;\t\t\t# 设置字体微软雅黑\nplt.figure(figsize = (10, 8),dpi = 100)\nfor i in range(0, 8):\n    plt.subplot(int(241 + i))\n    plt.imshow(Gamma(cat, i / 4), cmap=&#39;gray&#39;)\n    plt.title(&#39;gamma:&#39;+str(i / 4))\nplt.show()\n\ncv2.waitKey()\n</code></pre>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/10/956158489.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/25/%E9%9A%8F%E6%9C%BA%E5%A4%B4%E5%9B%BE/",
            "url": "http://example.com/2022/09/25/%E9%9A%8F%E6%9C%BA%E5%A4%B4%E5%9B%BE/",
            "title": "随机头图",
            "date_published": "2022-09-25T11:05:00.000Z",
            "content_html": "<blockquote>\n<p>转载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnJ1aXhpYW9sdS5jb20vYXJjaGl2ZXMvMjkv\">https://blog.ruixiaolu.com/archives/29/</span></p>\n</blockquote>\n<h2 id=\"配置handsome\"><a href=\"#配置handsome\" class=\"headerlink\" title=\"配置handsome\"></a>配置<code>handsome</code></h2><p>将<code>Handsome</code>主题的随机头图来源设置为我们的随机图片<code>API</code>，修改<code>typecho</code>目录下的<code>/usr/themes/handsome/libs/Content.php</code>文件</p>\n<pre><code class=\"php\">//原本为\nelseif ($howToThumb == &#39;3&#39;)&#123;\n            if (!empty($thumbField))&#123;\n                return $thumbField;\n            &#125;else&#123;\n                return $random;\n            &#125;\n        &#125;\n//修改为\nelseif ($howToThumb == &#39;3&#39;)&#123;\n            if (!empty($thumbField))&#123;\n                return $thumbField;\n            &#125;else&#123;\n                return &quot;https://你的图床域名/random.php?&quot;.rand();\n            &#125;\n        &#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/25/%E5%9B%BE%E7%89%87%E8%AE%A1%E7%AE%97/",
            "url": "http://example.com/2022/09/25/%E5%9B%BE%E7%89%87%E8%AE%A1%E7%AE%97/",
            "title": "图片计算",
            "date_published": "2022-09-25T09:34:00.000Z",
            "content_html": "<h3 id=\"直接加运算\"><a href=\"#直接加运算\" class=\"headerlink\" title=\"直接加运算\"></a>直接加运算</h3><p><code>img += 10</code> 每项rgb数值都加10，溢出部分会自动<code>% 255</code>处理</p>\n<h3 id=\"cv2-add\"><a href=\"#cv2-add\" class=\"headerlink\" title=\"cv2.add\"></a><code>cv2.add</code></h3><p><code>cv2.add(img, img1)</code>溢出部分将自动处理为255</p>\n<h3 id=\"cv2-addaddWeighted\"><a href=\"#cv2-addaddWeighted\" class=\"headerlink\" title=\"cv2.addaddWeighted\"></a><code>cv2.addaddWeighted</code></h3><p><code>cv2.addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]]) → dst</code></p>\n<ul>\n<li><p>scr1, scr2：ndarray 多维数组，表示一个灰度或彩色图像</p>\n</li>\n<li><p>alpha：第一张图像 scr1 的权重，通常取为 0～1 之间的浮点数</p>\n</li>\n<li><p>beta：第二张图像 scr2 的权重，通常取为 0～1 之间的浮点数</p>\n</li>\n<li><p>gamma： 灰度系数，图像校正的偏移量，用于调节亮度</p>\n</li>\n<li><p>dtype 输出图像的深度，即每个像素值的位数，可选项，默认等于 src1.depth()</p>\n</li>\n<li><p>retrun：dst，加权加法运算结果的图像数组</p>\n<p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/09/3016520072.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n",
            "tags": [
                "Open-cv"
            ]
        },
        {
            "id": "http://example.com/2022/09/24/%E5%9B%BE%E5%83%8F%E5%A1%AB%E5%85%85/",
            "url": "http://example.com/2022/09/24/%E5%9B%BE%E5%83%8F%E5%A1%AB%E5%85%85/",
            "title": "图像填充",
            "date_published": "2022-09-24T05:15:00.000Z",
            "content_html": "<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p><code>cv2.copyMakeBorder(src, top, bottom, left, right, borderType, value)</code></p>\n<ul>\n<li>borderType：填充类型</li>\n<li>value：可选参数</li>\n</ul>\n<h2 id=\"borderType\"><a href=\"#borderType\" class=\"headerlink\" title=\"borderType\"></a>borderType</h2><ul>\n<li><code>cv2.BORDER_REPLICATE</code></li>\n<li><code>cv2.BORDER_REFLECT</code></li>\n<li><code>cv2.BORDER_REFLECT101</code></li>\n<li><code>cv2.BORDER_CONSTANT</code></li>\n<li><code>cv2.BORDER_WRAP</code></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/24/IMG%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3/",
            "url": "http://example.com/2022/09/24/IMG%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3/",
            "title": "IMG数组相关",
            "date_published": "2022-09-24T03:43:00.000Z",
            "content_html": "<p>图片ROI区域选取：<code>img[0:100,0:100]</code></p>\n<pre><code class=\"py\">img[垂直区域, 水平区域, 颜色通道]\n</code></pre>\n<p>注：<code>cv2.imread()</code>读取顺序是BGR</p>\n<hr>\n<p>取单通道值：</p>\n<pre><code class=\"python\"># 将G,B通道写入0\nimg[:,:,0] = 0\nimg[:,:,1] = 0\n</code></pre>\n<p>垂直翻转：<code>img[::-1,:]</code></p>\n<p>水平翻转：<code>img[:,::-1]</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/20/cv%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3%E4%B8%8Efloat_uint8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/",
            "url": "http://example.com/2022/09/20/cv%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3%E4%B8%8Efloat_uint8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/",
            "title": "cv基础相关与float/uint8类型转换",
            "date_published": "2022-09-20T15:37:00.000Z",
            "content_html": "<h3 id=\"cv基本\"><a href=\"#cv基本\" class=\"headerlink\" title=\"cv基本\"></a>cv基本</h3><pre><code class=\"python\">img = cv2.imread(&quot;Path&quot;)    #打开图片\ncv2 = imshow(&quot;窗口标题&quot;, img)\t#显示\n</code></pre>\n<h3 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize()\"></a>resize()</h3><pre><code class=\"python\">dst = cv2.resize(src,dsize,dst=None,fx=None,fy=None,interpolation=None)\n</code></pre>\n<ul>\n<li><strong>src</strong>：输入图像</li>\n<li><strong>dsize</strong>：输出图像的大小。如果该参数为 0，表示缩放之后的大小需要通过公式计算，<code>dsize = Size(round(fx*src.cols),round(fy*src.rows))</code>。其中 <code>fx</code> 与 <code>fy</code> 是图像 Width 方向和 Height 方向的缩放比例。</li>\n<li><strong>fx</strong>：Width 方向的缩放比例，如果是 0，按照 <code>dsize * width/src.cols</code> 计算</li>\n<li><strong>fy</strong>：Height 方向的缩放比例，如果是 0，按照 <code>dsize * height/src.rows</code> 计算</li>\n<li><strong>interpolation</strong>：插值算法类型，或者叫做插值方式，默认为双线性插值</li>\n<li>方法返回结果 dst 表示输出图像。</li>\n</ul>\n<h3 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h3><pre><code class=\"python\">a=cv2.imread(&quot;1.jpg&quot;)\nprint(a.shape[0], a.shape[1], a.shape[2])\n</code></pre>\n<p>shape0 : 垂直尺寸</p>\n<p>shape1 : 水平尺寸</p>\n<p>shape2 : 颜色通道</p>\n<h3 id=\"数据类型查看与转换\"><a href=\"#数据类型查看与转换\" class=\"headerlink\" title=\"数据类型查看与转换\"></a>数据类型查看与转换</h3><h5 id=\"type-dtype-astype-区别\"><a href=\"#type-dtype-astype-区别\" class=\"headerlink\" title=\"type() ,dtype() ,astype()区别\"></a>type() ,dtype() ,astype()区别</h5><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type()</td>\n<td>返回数据结构类型（list、dict、numpy、ndarray 等）</td>\n</tr>\n<tr>\n<td>dtype()</td>\n<td>返回数据元素的数据类型（int、float等）<br />备注：<br />1）由于 list、dict 等可以包含不同的数据类型，因此不可调用dtype()函数<br />2）np.array 中要求所有元素属于同一数据类型，因此可调用dtype()函数</td>\n</tr>\n<tr>\n<td>astype()</td>\n<td>改变np.array中所有数据元素的数据类型。<br />备注：能用dtype() 才能用 astype()</td>\n</tr>\n</tbody></table>\n<h5 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h5><p>方法1：</p>\n<pre><code class=\"python\"># 通过np转换类型后除以255得到float类型\na = a.astype(np.float32)\na/=255.0\nprint(a)\n</code></pre>\n<p>方法2：</p>\n<pre><code class=\"python\"># 直接使用skimage转换\na = skimage.img_as_float(a)  #默认为float64，可选img_as_float32\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/02/bot%E7%9B%B8%E5%85%B3%E4%B8%80/",
            "url": "http://example.com/2022/09/02/bot%E7%9B%B8%E5%85%B3%E4%B8%80/",
            "title": "bot相关一",
            "date_published": "2022-09-02T04:03:00.000Z",
            "content_html": "<pre><code>kill $(pgrep -f nb2)\nsource activate nb2\nnohup nb run &amp;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/06/23/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/",
            "url": "http://example.com/2022/06/23/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/",
            "title": "表情包插件相关说明",
            "date_published": "2022-06-23T01:41:00.000Z",
            "content_html": "<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><div align=\"left\">\n  <img data-src=\"https://s2.loli.net/2022/06/09/lCOujwopgJPxD97.jpg\" width=\"400\" />\n</div>\n\n<h4 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式\"></a>触发方式</h4><ul>\n<li>指令 + @user，如： &#x2F;爬 @小Q</li>\n<li>指令 + qq号，如：&#x2F;爬 123456</li>\n<li>指令 + 自己，如：&#x2F;爬 自己</li>\n<li>指令 + 图片，如：&#x2F;爬 [图片]</li>\n</ul>\n<p>前三种触发方式会使用目标qq的头像作为图片</p>\n<h4 id=\"支持的指令\"><a href=\"#支持的指令\" class=\"headerlink\" title=\"支持的指令\"></a>支持的指令</h4><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>万能表情<br>空白表情</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/29/C2VRA6iw4hzWZXO.jpg\" width=\"200\" /></td>\n<td>简单的图片加文字</td>\n</tr>\n<tr>\n<td>摸<br>摸摸<br>摸头<br>摸摸头<br>rua</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/oNGVO4iuCk73g8S.gif\" width=\"200\" /></td>\n<td>可使用参数“圆”让头像为圆形<br>如：摸头圆 自己</td>\n</tr>\n<tr>\n<td>亲<br>亲亲</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/RuoiqP8plJBgw9K.gif\" width=\"200\" /></td>\n<td>可指定一个或两个目标<br>若为一个则为 发送人 亲 目标<br>若为两个则为 目标1 亲 目标2<br>如：亲 114514 自己</td>\n</tr>\n<tr>\n<td>贴<br>贴贴<br>蹭<br>蹭蹭</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/QDCE5YZIfroavub.gif\" width=\"200\" /></td>\n<td>可指定一个或两个目标<br>类似 亲</td>\n</tr>\n<tr>\n<td>顶<br>玩</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/YwxA7fFgWyshuZX.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>拍</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/5mv6pFJMNtzHhcl.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>撕</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/29/FDcam9ROPkqvwxH.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>丢<br>扔</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/LlDrSGYdpcqEINu.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>抛<br>掷</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/W8X6cGZS5VMDOmh.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>爬</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/hfmAToDuF2actC1.jpg\" width=\"200\" /></td>\n<td>默认为随机选取一张爬表情<br>可使用数字指定特定表情<br>如：爬 13 自己</td>\n</tr>\n<tr>\n<td>精神支柱</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/WwjNmiz4JXbuE1B.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>一直</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/dAf9Z3kMDwYcRWv.gif\" width=\"200\" /></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>加载中</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/751Oudrah6gBsWe.gif\" width=\"200\" /></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>转</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/HoZaCcDIRgs784Y.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>小天使</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/ZgD1WSMRxLIymCq.jpg\" width=\"200\" /></td>\n<td>图中名字为目标qq昵称<br>可指定名字，如：小天使 meetwq 自己</td>\n</tr>\n<tr>\n<td>不要靠近</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/BTdkAzvhRDLOa3U.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>一样</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/SwAXoOgfdjP4ecE.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>滚</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/atzZsSE53UDIlOe.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>玩游戏<br>来玩游戏</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/j9ZKB7cFOSklzMe.jpg\" width=\"200\" /></td>\n<td>图中描述默认为：来玩休闲游戏啊<br>可指定描述<br>支持gif</td>\n</tr>\n<tr>\n<td>膜<br>膜拜</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/nPgBJwV5qDb1s9l.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>吃</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/ba8cCtIWEvX9sS1.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>啃</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/k82n76U4KoNwsr3.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>出警</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/Q7WL1q2TlHgnERr.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>警察</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/xYLgKVJcd3HvqfM.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>问问<br>去问问</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/GUyax1BF6q5Hvin.jpg\" width=\"200\" /></td>\n<td>名字为qq昵称，可指定名字</td>\n</tr>\n<tr>\n<td>舔<br>舔屏<br>prpr</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/05/WMHpwygtmN5bdEV.jpg\" width=\"200\" /></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>搓</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/09/slRF4ue56xSQzra.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>墙纸</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/tQRXzLamGyWi24s.jpg\" width=\"200\" /></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>国旗</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/p7nwCvgsU3LxBDI.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>交个朋友</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/SnmkNrjKuFeZvbA.jpg\" width=\"200\" /></td>\n<td>名字为qq昵称，可指定名字</td>\n</tr>\n<tr>\n<td>继续干活<br>打工人</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/LIak2BsJ9Dd5O7l.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>完美<br>完美的</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/lUS1nmPAKIYtwih.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>关注</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/FlpjRWCte72ozqs.jpg\" width=\"200\" ></td>\n<td>名字为qq昵称，可指定名字</td>\n</tr>\n<tr>\n<td>我朋友说<br>我有个朋友说</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/cBk4aG3RwIoYbMF.jpg\" width=\"200\" ></td>\n<td>默认使用发送者的头像<br>如：我朋友说 来份涩图</td>\n</tr>\n<tr>\n<td>这像画吗</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/PiSAM1T6EvxXWgD.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>震惊</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/4krO6y53bKzYpUg.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>兑换券</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/6tS7dDaprb1sUxj.jpg\" width=\"200\" ></td>\n<td>默认文字为：qq昵称 + 陪睡券<br>可指定文字</td>\n</tr>\n<tr>\n<td>听音乐</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/rjgvbXeOJtIW8fF.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>典中典</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/ikQ1IB6hS4x3EjD.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>哈哈镜</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/DwRPaErSNZWXGgp.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>永远爱你</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/o6mhWk7crwdepU5.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>对称</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/HXntCy8kc7IRZxp.jpg\" width=\"200\" ></td>\n<td>可使用参数“上”、“下”、“左”、“右”指定对称方向</td>\n</tr>\n<tr>\n<td>安全感</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/58pPzrgxJNkUYRT.jpg\" width=\"200\" ></td>\n<td>可指定描述</td>\n</tr>\n<tr>\n<td>永远喜欢<br>我永远喜欢</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/EpTiUbcoVGCXLkJ.jpg\" width=\"200\" ></td>\n<td>图中名字为目标qq昵称<br>可指定名字<br>可指定多个目标叠buff</td>\n</tr>\n<tr>\n<td>采访</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/AYpkWEc2BrXhKeU.jpg\" width=\"200\" ></td>\n<td>可指定描述</td>\n</tr>\n<tr>\n<td>打拳</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/heA9fCPMQWXBxTn.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>群青</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/drwXx3yK14IMVCf.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捣</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/M9xUehlV64OpGoY.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捶</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/ElnARr7ohVXjtJx.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>需要<br>你可能需要</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/VBDG74QeZUYcunh.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捂脸</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/NLy4Eb6CHKP3Svo.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>敲</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/uHP8z3bDMtGdOCk.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>垃圾<br>垃圾桶</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/i1ok2NUYaMfKezT.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>为什么@我<br>为什么at我</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/qQYydurABV7TMbN.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>像样的亲亲</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/1KvLjb2uRYQ9mCI.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>啾啾</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/v3YrbLMnND8BoPK.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>吸<br>嗦</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/LlFNscXC1IQrkgE.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>锤</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/ajXFm95tHRM6CzZ.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>紧贴<br>紧紧贴着</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/FiBwc3ZxvVLObGP.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>注意力涣散</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/11/mEtyxoZ3DfwBCn5.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>阿尼亚喜欢</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/11/U3ZMXHB1PduKckQ.jpg\" width=\"200\" ></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>想什么</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/18/ck1jNO2K8Qd6Lo3.jpg\" width=\"200\" ></td>\n<td>支持gif</td>\n</tr>\n<tr>\n<td>远离</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/lqyOu25WPTsGBcb.jpg\" width=\"200\" ></td>\n<td>可指定多个目标</td>\n</tr>\n<tr>\n<td>结婚申请<br>结婚登记</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/tZR3ls7cBrdGHTL.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>小画家</td>\n<td><img data-src=\"https://s2.loli.net/2022/06/09/bDA6mlUuo3k52nI.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>复读</td>\n<td><img data-src=\"https://s2.loli.net/2022/06/08/nU2dAe3GiVR7Y8I.gif\" width=\"200\" ></td>\n<td>复读内容默认为“救命啊”<br>可指定多个目标</td>\n</tr>\n</tbody></table>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/06/06/Wolfram_Alpha%E5%BD%92%E6%A1%A3/",
            "url": "http://example.com/2022/06/06/Wolfram_Alpha%E5%BD%92%E6%A1%A3/",
            "title": "Wolfram Alpha归档",
            "date_published": "2022-06-06T03:46:00.000Z",
            "content_html": "<h5 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h5><p>$\\infty$ : <code>inf</code></p>\n<p>$\\int$ ：<code>int</code></p>\n<h5 id=\"极限\"><a href=\"#极限\" class=\"headerlink\" title=\"极限\"></a>极限</h5><p>$\\lim _{x\\to 0}\\left(sinx\\right)$ :<code>lim sinx as x-&gt;0</code></p>\n<p>$\\lim _{x\\to 0+}\\left(sinx\\right)$ :<code>lim sinx as x-&gt;0+</code></p>\n<h5 id=\"定积分\"><a href=\"#定积分\" class=\"headerlink\" title=\"定积分\"></a>定积分</h5><p>$\\int _1^2:xdx$ :<code>int x 1 to 2</code></p>\n<p>$\\int _1^2:\\int _1^2:xydxdy$ : <code>int (int xy dx 1 to 2) dy 1 to 2</code></p>\n<h5 id=\"方程\"><a href=\"#方程\" class=\"headerlink\" title=\"方程\"></a>方程</h5><p>$y’’+y’-2y&#x3D;0$ : <code>y&#39;&#39;+y&#39;-2y=0</code></p>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>拐点 : <code>inflection point x^2</code></p>\n<p>驻点 : <code>stationary point x^2</code></p>\n<p>极值点 : <code>local extrema x^2</code></p>\n<p>单调性 : <code>where is x^3-x^2 increasing/decreasing</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/25/linux%E6%8C%89%E5%90%8D%E6%9F%A5PID%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/",
            "url": "http://example.com/2022/05/25/linux%E6%8C%89%E5%90%8D%E6%9F%A5PID%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/",
            "title": "linux按名查PID和后台运行",
            "date_published": "2022-05-25T03:27:00.000Z",
            "content_html": "<pre><code>pgrep -f name\n// ps -ax | grep [aaa]\n\nnohup [python] [aaa] &amp;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/22/git_push%E5%87%BA%E7%8E%B0Everything_up-to-date/",
            "url": "http://example.com/2022/05/22/git_push%E5%87%BA%E7%8E%B0Everything_up-to-date/",
            "title": "git push出现Everything up-to-date",
            "date_published": "2022-05-22T10:45:19.000Z",
            "content_html": "<h2 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><p>没有添加文件</p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><pre><code>git add .\ngit commit -m &quot;commit&quot;\ngit push origin master\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/21/git_pull%E6%8B%89%E5%8F%96%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%EF%BC%8C%E9%81%BF%E5%85%8D%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/",
            "url": "http://example.com/2022/05/21/git_pull%E6%8B%89%E5%8F%96%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%EF%BC%8C%E9%81%BF%E5%85%8D%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/",
            "title": "git pull拉取仓库代码，避免覆盖本地修改的代码",
            "date_published": "2022-05-21T02:46:00.000Z",
            "content_html": "<ol>\n<li><p>先将本地代码放到暂存区</p>\n<p>git stash​​</p>\n</li>\n<li><p>将远程github（码云等）上面的代码拉取下来</p>\n<p>git pull​​</p>\n</li>\n<li><p>将第一步暂存区的代码放回本地</p>\n<p>git stash pop​​</p>\n</li>\n</ol>\n",
            "tags": [
                "github"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/%E5%8D%B8%E8%BD%BDLinux%E5%9B%BE%E5%BD%A2%E6%A1%8C%E9%9D%A2/",
            "url": "http://example.com/2022/04/13/%E5%8D%B8%E8%BD%BDLinux%E5%9B%BE%E5%BD%A2%E6%A1%8C%E9%9D%A2/",
            "title": "卸载Linux图形桌面",
            "date_published": "2022-04-13T04:55:00.000Z",
            "content_html": "<pre><code>yum groupremove &quot;GNOME Desktop Environment&quot; -y\n\nyum groupremove &quot;X window System&quot; -y\n</code></pre>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/%E5%9F%BA%E4%BA%8ELinux-Anaconda%E9%83%A8%E7%BD%B2AzurLaneAutoScript/",
            "url": "http://example.com/2022/04/13/%E5%9F%BA%E4%BA%8ELinux-Anaconda%E9%83%A8%E7%BD%B2AzurLaneAutoScript/",
            "title": "基于Linux-Anaconda部署AzurLaneAutoScript",
            "date_published": "2022-04-13T01:59:00.000Z",
            "content_html": "<h1 id=\"在-Linux-上部署-AzurLaneAutoScript\"><a href=\"#在-Linux-上部署-AzurLaneAutoScript\" class=\"headerlink\" title=\"在 Linux 上部署 AzurLaneAutoScript\"></a>在 Linux 上部署 AzurLaneAutoScript</h1><h2 id=\"Anaconda相关\"><a href=\"#Anaconda相关\" class=\"headerlink\" title=\"Anaconda相关\"></a>Anaconda相关</h2><h3 id=\"下载anaconda3\"><a href=\"#下载anaconda3\" class=\"headerlink\" title=\"下载anaconda3\"></a>下载anaconda3</h3><pre><code>wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.shanaconda\n</code></pre>\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h3><pre><code>chmod +x Anaconda3-5.2.0-Linux-x86_64.sh\n</code></pre>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>./Anaconda3-5.2.0-Linux-x86_64.sh\n# 一路yes&amp;enter\n</code></pre>\n<h2 id=\"拉取Alas\"><a href=\"#拉取Alas\" class=\"headerlink\" title=\"拉取Alas\"></a>拉取Alas</h2><p>移动到欲安装alas目录下，git整个仓库</p>\n<pre><code>cd /home\ngit clone https://github.com/LmeSzinc/AzurLaneAutoScript.git\n# 如果下载速度缓慢，可换用gitee\n</code></pre>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><h3 id=\"python环境\"><a href=\"#python环境\" class=\"headerlink\" title=\"python环境\"></a>python环境</h3><pre><code>conda create -n alas python=3.7.6\nconda activate alas\ncd AzurLaneAutoScript\npip install -r requirements-in.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n# 可换用其他源\n</code></pre>\n<blockquote>\n<p>由于某些 python 库在不同 os 下的依赖不同，直接从 requirements-in.txt 安装即可，pip会自动处理依赖。当然也可以从 requirements.txt 安装，但是需注释掉 pywin32</p>\n</blockquote>\n<h3 id=\"adb\"><a href=\"#adb\" class=\"headerlink\" title=\"adb\"></a>adb</h3><p>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3JlbGVhc2VzL3BsYXRmb3JtLXRvb2xz\">SDK Platform Tools for Linux</span> 并解压，将adb放在<code>/usr/bin</code>目录下</p>\n<h3 id=\"uiautomator2\"><a href=\"#uiautomator2\" class=\"headerlink\" title=\"uiautomator2\"></a>uiautomator2</h3><p>若运行 alas 后无法正常初始化 uiautomator2，可按此方法手动安装，安装过程参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5hdHgvdWlhdXRvbWF0b3Iy\">uiautomator2</span></p>\n<p>运行 <code>adb connect &lt;address&gt;</code> 连接你的云手机，确保运行 <code>adb device</code> 后可以看到设备</p>\n<p>在 alas python 环境下运行 <code>python</code> 打开 python 命令行窗口，输入以下命令</p>\n<pre><code>import uiautomator2 as u2\n\nd = u2.connect() # connect to device\nprint(d.info)\n</code></pre>\n<p>等待一段时间，输出类似如下内容，说明安装成功</p>\n<pre><code>&#123;&#39;currentPackageName&#39;: &#39;net.oneplus.launcher&#39;, &#39;displayHeight&#39;: 1920, &#39;displayRotation&#39;: 0, &#39;displaySizeDpX&#39;: 411, &#39;displaySizeDpY&#39;: 731, &#39;displayWidth&#39;: 1080, &#39;productName&#39;: &#39;OnePlus5&#39;, &#39;\nscreenOn&#39;: True, &#39;sdkInt&#39;: 27, &#39;naturalOrientation&#39;: True&#125;\n</code></pre>\n<h3 id=\"修改deploy-yaml\"><a href=\"#修改deploy-yaml\" class=\"headerlink\" title=\"修改deploy.yaml\"></a>修改deploy.yaml</h3><p>因为Alas默认使用了Windows下的配置文件，所以我们要手动修改</p>\n<pre><code># 修改gitee仓库\nDeploy.Git.Repository : https://gitee.com/LmeSzinc/AzurLaneAutoScript\n\n# git位置\nDeploy.Git.GitExecutable : /usr/bin/git\n\n# python位置\nDeploy.Python.PythonExecutable : [Anaconda安装路径]/envs/alas/bin/python\n\n# adb位置\nDeploy.Adb.AdbExecutable : /usr/bin/adb\n</code></pre>\n<h2 id=\"使用-shell-脚本启动停止-alas\"><a href=\"#使用-shell-脚本启动停止-alas\" class=\"headerlink\" title=\"使用 shell 脚本启动停止 alas\"></a>使用 shell 脚本启动停止 alas</h2><p>编写脚本</p>\n<pre><code>#!/bin/bash\n\nstart()&#123;\n    source &lt;conda_path&gt;/bin/activate alas # &lt;miniconda_path&gt; 替换为实际 conda 安装路径\n    cd &lt;AzurLaneAutoScript_path&gt; # &lt;AzurLaneAutoScript_path&gt; 替换为 alas 路径\n    git pull origin master\n    nohup python gui.py &gt;/dev/nul 2&gt;&amp;1 &amp;\n    echo &quot;start alas&quot;\n&#125;\n\nstop()&#123;\n    kill -9 $(pgrep -f alas) \n    echo &quot;kill alas&quot;\n&#125;\n\ncase $1 in\n    &quot;start&quot; ) start;;\n    &quot;stop&quot; ) stop;;\n    * ) stop;start;;\nesac\n</code></pre>\n<p>将文件保存为 alas，放在<code>/usr/bin</code>，修改权限</p>\n<pre><code>chmod 755 alas\n</code></pre>\n<p>可用以下命令控制 alas</p>\n<pre><code>alas start # 启动\nalas stop # 停止\nalas # 重启\n</code></pre>\n<h2 id=\"遇到一些问题\"><a href=\"#遇到一些问题\" class=\"headerlink\" title=\"遇到一些问题\"></a>遇到一些问题</h2><h3 id=\"ERROR-Permission-denied\"><a href=\"#ERROR-Permission-denied\" class=\"headerlink\" title=\"ERROR:Permission denied\"></a>ERROR:Permission denied</h3><pre><code># 权限相关问题，激活环境时用以下代码\nsource activate alas\n</code></pre>\n<h3 id=\"ERROR-Conda-command-not-found\"><a href=\"#ERROR-Conda-command-not-found\" class=\"headerlink\" title=\"ERROR:Conda command not found\"></a>ERROR:Conda command not found</h3><pre><code># 打开系统变量\nvim ~/.bashrc\n\n# 添加系统变量\nexport PATH=/[path]/anaconda3/bin:$PATH # [path]为anaconda3的安装路径\n\n#重新加载配置\nsource ~/.bashrc\n</code></pre>\n<h3 id=\"ERROR-XXX-is-not-a-trusted-or-secure-host\"><a href=\"#ERROR-XXX-is-not-a-trusted-or-secure-host\" class=\"headerlink\" title=\"ERROR:XXX is not a trusted or secure host\"></a>ERROR:XXX is not a trusted or secure host</h3><pre><code>pip install 库包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n# 这里将pip源换成清华源、阿里源等都适用。\n</code></pre>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感谢Lme大佬的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xtZVN6aW5jL0F6dXJMYW5lQXV0b1NjcmlwdA==\">AzurLaneAutoScript</span> <del>MAGA 让碧蓝航线再次伟大！</del></p>\n<p>教程参考了群内大佬 <strong>Alas部署.md - freesrz</strong></p>\n<p>再一次感谢各位群大佬</p>\n",
            "tags": [
                "linux",
                "碧蓝航线",
                "Python"
            ]
        },
        {
            "id": "http://example.com/2022/03/27/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94/",
            "url": "http://example.com/2022/03/27/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94/",
            "title": "晕轮效应",
            "date_published": "2022-03-27T01:53:00.000Z",
            "content_html": "<p>晕轮效应（英语：The Halo Effect），又称“光环效应”、“光晕效应”、“月晕效应”。</p>\n<p>晕轮效应是指人们对他人的认知首先根据初步印象，然后再从这个印象推论出认知对象的其他特质。</p>\n<p>也就是，人们对人的认知和判断往往只从局部出发，扩散而得出整体印象，即是常常以既定印象概全。</p>\n<p>如果一个人被标明是好的，他就会被一种积极肯定的光环笼罩，并被赋予一切都好的品质；</p>\n<p>如果一个人被标明是坏的，他就被一种消极否定的光环所笼罩，并被认为具有各种坏品质。</p>\n<p>简单来说，晕轮效应即为“爱屋及乌”，“一好百好，一差百差”</p>\n",
            "tags": [
                "阅读"
            ]
        },
        {
            "id": "http://example.com/2021/12/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/",
            "url": "http://example.com/2021/12/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/",
            "title": "局域网搭建服务器无法访问",
            "date_published": "2021-12-31T04:15:00.000Z",
            "content_html": "<ul>\n<li>不在同一网段 &#x2F; 网关不一致 （无法ping通）</li>\n<li>防火墙拦截 （<del>不一定能ping通</del>）</li>\n</ul>\n",
            "tags": [
                "局域网"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "title": "Map 单词分析",
            "date_published": "2021-11-08T07:30:00.000Z",
            "content_html": "<p><strong>蓝桥杯无法使用<code>for(x : y)&#123;&#125;</code> 、 <code>auto</code>等的C11语法和关键字</strong></p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nmap&lt;char, int&gt; m;\n\nint main(void)&#123;\n    string str;\n    char mc;\n    int s = 0;\n    for(int i = 97; i &lt;= 122; i++)&#123;\n        m.insert(make_pair((char)i, 0));\n    &#125;\n    cin &gt;&gt; str;\n    for(int i = 0; i &lt; str.size(); i++)&#123;\n        m[str[i]]++;\n    &#125;\n    for(map&lt;char, int&gt;::iterator i = m.begin(); i != m.end(); i++)&#123;\n        if(s &lt; i-&gt;second) mc = i-&gt;first, s = i-&gt;second;\t\t// 记录次数\n    &#125;\n    cout &lt;&lt; mc &lt;&lt; endl &lt;&lt; m[mc];\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "DFS迷宫问题",
            "date_published": "2021-11-08T06:36:00.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\n#pragma GCC optimize(2)\nusing namespace std;\n\nint m[101][101];\nint xS, yS, xE, yE;\nint s;\n\nvoid dfs(int x, int y)&#123;\n    if(x == xE &amp;&amp; y == yE)&#123;\n        s++;\n        return;\n    &#125;else&#123;\t\t// 遍历四个方向 \n        m[x][y] = 0;\n        if(m[x + 1][y])&#123;\n            m[x + 1][y] = 0;\t\t// 占位，防止死循环 \n            dfs(x + 1, y);\n            m[x + 1][y] = 1;\n        &#125;\n        if(m[x - 1][y])&#123;\n            m[x - 1][y] = 0;\n            dfs(x - 1, y);\n            m[x - 1][y] = 1;\n        &#125;\n        if(m[x][y + 1])&#123;\n            m[x][y + 1] = 0;\n            dfs(x, y + 1);\n            m[x][y + 1] = 1;\n        &#125;\n        if(m[x][y - 1])&#123;\n            m[x][y - 1] = 0;\n            dfs(x, y - 1);\n            m[x][y - 1] = 1;\n        &#125;\n    &#125;\n&#125;\n\nint main(void)&#123;\n    ios::sync_with_stdio(false);\n    int x, y, k, Ox, Oy;\n    cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n    for(int i = 1; i &lt;= x; i++)\t// 棋盘预定义\n        for(int j = 1; j &lt;= y; j++)\n            m[i][j] = 1;\n    cin &gt;&gt; xS &gt;&gt; yS &gt;&gt; xE &gt;&gt; yE;\n    for(int i = 0; i &lt; k; i++)&#123;\t// 预先写入障碍\n        cin &gt;&gt; Ox &gt;&gt; Oy;\n        m[Ox][Oy] = 0;\n    &#125;\n    dfs(xS, yS);\n    cout &lt;&lt; s;\n\n    return 0;\n&#125; \n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/05/C++_STL%E4%B8%AD%E7%9A%84next_permutation/",
            "url": "http://example.com/2021/11/05/C++_STL%E4%B8%AD%E7%9A%84next_permutation/",
            "title": "C++ STL中的next_permutation",
            "date_published": "2021-11-05T06:45:00.000Z",
            "content_html": "<blockquote>\n<p>Rearranges the elements in the range <code>[first,last)</code> into the next <em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL2xleGljb2dyYXBoaWNhbF9jb21wYXJl\">lexicographically</span> greater</em> permutation.</p>\n<p><em>将范围内的元素重新排列<code>[first,last)</code>为下一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL2xleGljb2dyYXBoaWNhbF9jb21wYXJl\">字典序</span>更大的排列。</em></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tLw==\">–cplusplus.com</span></p>\n</blockquote>\n<p>对于next_permutation函数，其函数原型为：</p>\n<pre><code> #include &lt;algorithm&gt;\n bool next_permutation(iterator start,iterator end)\n</code></pre>\n<p>如下例子：</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()&#123;\n    int num[3]=&#123;1, 2, 3&#125;;\n    do&#123;\n        cout &lt;&lt; num[0] &lt;&lt; &quot; &quot; &lt;&lt; num[1] &lt;&lt; &quot; &quot; &lt;&lt; num[2] &lt;&lt; endl;\n    &#125;while(next_permutation(num, num + 3));\n    return 0;\n&#125;\n\n输出结果：\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n</code></pre>\n<p>当我们把<code>while(next_permutation(num, num + 3))</code>中的<code>3</code>改为<code>2</code>时，输出就变为了：</p>\n<pre><code>1 2 3\n2 1 3\n</code></pre>\n<p>由此可见，next_permutation是对数组前n项进行全排列</p>\n<p>同理，既然有下一个全排列函数，那肯定是有上一个全排列函数：<code>prev_permutation</code>使用方法与<code>next_permutation</code>一致。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/scanf%E3%80%81cin%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E8%BF%9E%E7%BB%AD%E8%BE%93%E5%85%A5/",
            "url": "http://example.com/2021/11/04/scanf%E3%80%81cin%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E8%BF%9E%E7%BB%AD%E8%BE%93%E5%85%A5/",
            "title": "scanf、cin返回值与连续输入",
            "date_published": "2021-11-04T11:43:00.000Z",
            "content_html": "<p><code>scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</code></p>\n<ul>\n<li><strong>a</strong> , <strong>b</strong> 都成功读入，返回值为 <strong>2</strong></li>\n<li>只有 <strong>a</strong> 成功读入，返回值为 <strong>1</strong></li>\n<li><strong>a</strong> 和 <strong>b</strong> 都未成功读入，返回值为 <strong>0</strong></li>\n<li>遇到 <strong>错误</strong> 或遇到 <strong>end of file</strong>，返回值为 <strong>EOF</strong></li>\n</ul>\n<p><code>std::cin &gt;&gt; a &gt;&gt; b; \t// cin 无返回值</code></p>\n<p><strong>连续输入参考模板：</strong></p>\n<pre><code>while(scanf(&quot;%d&quot;, &amp;i) != EOF)&#123;...&#125;\n\nwhile(cin &gt;&gt; i)&#123;...&#125;\n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/%E5%85%B3%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E8%A1%A8%E8%BE%BE/",
            "url": "http://example.com/2021/11/04/%E5%85%B3%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E8%A1%A8%E8%BE%BE/",
            "title": "关于矩阵对角线的相关表达",
            "date_published": "2021-11-04T08:02:00.000Z",
            "content_html": "<p>主对角线元素下标满足：<code>i = j</code></p>\n<p>副对角线元素下标满足：<code>i + j = n</code></p>\n<p>假设一个<code>n×n</code>的矩阵：</p>\n<pre><code>1 2 3 ...\n4 5 6\n7 8 9\n...\n</code></pre>\n<p>主对角线一定满足 <code>a[1][1], a[2][2], a[3][3]..., a[n][n]</code> 其中主对角线的每项都有 <code>i == j</code></p>\n<p>副对角线一定满足 <code>a[1][n], a[2][n - 1], a[3][n - 3] ... a[n][1]</code> 其中次对角线的每项都有 <code>i + j == n</code></p>\n<hr>\n<p>相关：求秩、八皇后问题…</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "Vector 二分查找",
            "date_published": "2021-11-04T07:39:00.000Z",
            "content_html": "<p>二分查找：</p>\n<ul>\n<li>lower_bound：查找第一个大于或等于某个元素的位置。</li>\n<li>upper_bound：查找第一个大于某个元素的位置。</li>\n</ul>\n<p>Vector 插入元素</p>\n<ul>\n<li>iterator insert(iterator it, const T&amp; x)：iterator向量中迭代器指向元素前增加一个元素x</li>\n<li>iterator insert(iterator it, int n,const T&amp; x)：向量中迭代器指向元素前增加n个相同的元素x</li>\n<li>iterator insert(iterator it, const_iterator first, const_iterator last)：向量中迭代器指向元素前插入另一个相同类型向量的[first, last)间的数据</li>\n</ul>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(void)&#123;\n    vector&lt;int&gt; arr;\n    int t, k, a;\n    for(int i = 0; i &lt; 9; i++)&#123;\n        cin &gt;&gt; t;\n        arr.push_back(t);\n    &#125;\n    cin &gt;&gt; k;\n    auto pos = upper_bound(arr.begin(), arr.end(), k); \t// vector&lt;int&gt;::iterator\n    arr.insert(pos, k);\n    for(int i = 0; i &lt; 10; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n\n    return 0;\n&#125; \n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/01/img%E6%A0%87%E7%AD%BE%E5%9C%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/",
            "url": "http://example.com/2021/11/01/img%E6%A0%87%E7%AD%BE%E5%9C%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/",
            "title": "img标签在谷歌浏览器下不显示错误信息",
            "date_published": "2021-11-01T01:00:46.000Z",
            "content_html": "<p>添加全局js</p>\n<pre><code>&lt;style&gt;\nimg[src=&quot;&quot;],img:not([src])&#123;opacity:0;&#125;\n&lt;/style&gt;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/29/DFS%E4%B8%8EBFS%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "url": "http://example.com/2021/10/29/DFS%E4%B8%8EBFS%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "title": "DFS与BFS使用场景",
            "date_published": "2021-10-29T07:45:26.000Z",
            "content_html": "<p>(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaml1emhhbmcuY29tL3FhLzYyMy8=\">九章-马克助教</span>)</p>\n<blockquote>\n<ol>\n<li>BFS是用来搜索最短径路的解是比较合适的，比如求最少步数的解，最少交换次数的解，因为BFS搜索过程中遇到的解一定是离根最近的，所以遇到一个解，一定就是最优解，此时搜索算法可以终止。这个时候不适宜使用DFS，因为DFS搜索到的解不一定是离根最近的，只有全局搜索完毕，才能从所有解中找出离根的最近的解。（当然这个DFS的不足，可以使用迭代加深搜索ID-DFS去弥补）</li>\n<li>空间优劣上，DFS是有优势的，DFS不需要保存搜索过程中的状态，而BFS在搜索过程中需要保存搜索过的状态，而且一般情况需要一个队列来记录。</li>\n<li>DFS适合搜索全部的解，因为要搜索全部的解，那么BFS搜索过程中，遇到离根最近的解，并没有什么用，也必须遍历完整棵搜索树，DFS搜索也会搜索全部，但是相比DFS不用记录过多信息，所以搜素全部解的问题，DFS显然更加合适。</li>\n</ol>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "title": "二叉树模板",
            "date_published": "2021-10-28T09:03:28.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\n#pragma GCC optimize(2)\nusing namespace std;\n\nstruct tree&#123;\n    int left;\n    int right;\n&#125;;\n\ntree t[1000];\n\nint dfs(int n)&#123;\t\t// 深度 \n    if(!n) return 0;\n    return max(dfs(t[n].left), dfs(t[n].right)) + 1;\n&#125;\n\nvoid f(int n)&#123;\t\t// 先序 \n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n    if(t[n].left) f(t[n].left);\n    if(t[n].right) f(t[n].right);\n&#125;\n\nvoid s(int n)&#123;\t\t// 中序 \n    if(t[n].left) s(t[n].left);\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n    if(t[n].right) s(t[n].right);\n&#125;\n\nvoid e(int n)&#123;\t\t// 后序 \n    if(t[n].left) e(t[n].left);\n    if(t[n].right) e(t[n].right);\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n&#125;\n\nint main(void)&#123;\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; t[i].left &gt;&gt; t[i].right;\n    \n    return 0;\n&#125; \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "url": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "title": "卡常小技巧，肆无忌惮STL",
            "date_published": "2021-10-28T08:25:00.000Z",
            "content_html": "<pre><code>#pragma GCC optimize(2)\nios::sync_with_stdio(false);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "url": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "title": "数组粘贴，初始化C++",
            "date_published": "2021-10-28T03:51:00.000Z",
            "content_html": "<p>粘贴：memcpy()</p>\n<p>初始化（可初始化结构体内的数组元素）：memset()</p>\n<pre><code>int a[5];\nint b[5] = &#123;1, 2, 3, 4, 5&#125;\nmemset(a, 0, sizeof(int));\t// 把a中所有数组元素初始化为1\nmemcpy(a, b, 5 * sizeof(int));\t// 把b数组覆盖到a数组\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/27/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%98%B6%E4%B9%98%E6%A8%A1%E6%9D%BF(C++)/",
            "url": "http://example.com/2021/10/27/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%98%B6%E4%B9%98%E6%A8%A1%E6%9D%BF(C++)/",
            "title": "高精度阶乘模板(C++)",
            "date_published": "2021-10-27T04:13:00.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAX = 10000;\nstruct N&#123;\n    int len;\n    int a[MAX];\n    N(int x = 0)&#123;\t\t// 初始化\n        memset(a, 0, sizeof(a));\n        for(len = 1; x; len++)&#123;\n            a[len] = x % 10;\n            x /= 10;\n        &#125;\n    &#125;\n    void f(int _l)&#123;\t\t// 进位\n        len = _l;\n        for(int i = 1; i &lt;= len; i++)&#123;\n            a[i + 1] += a[i] / 10;\n            a[i] %= 10;\n        &#125;\n        for(;!a[len];) len--;\t\t// 去除无效前置0\n    &#125;\n    void print()&#123;\n        for(int i = max(len, 1); i &gt;= 1; i--)\n            printf(&quot;%d&quot;, a[i]);\n    &#125;\n    int &amp;operator[](int i)&#123;\t\t// 重载[]，方便直接使用Node[num]访问Node数组\n        return a[i];\n    &#125;\n    N operator*(int t)&#123;\t\t// 重载*\n        N c;\n        for(int i = 1; i &lt;= len; i++)\n            c[i] = a[i] * t;\n        c.f(len + 11);\n        return c;\n    &#125;\n&#125;;\n\nint main(void)&#123;\n    N fac(1);\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        fac = fac * i; \n    fac.print();\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "c_str()使用方法",
            "date_published": "2021-10-26T13:52:15.000Z",
            "content_html": "<pre><code>//标准库的string类提供了三个成员函数来从一个string得到c类型的字符数组\n//c_str()：生成一个const char*指针，指向以空字符终止的数组。\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n \nint main()\n&#123;\n    //string--&gt;char*\n    //c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同\n    //这个数组的数据是临时的，当有一个改变这些数据的成员函数被调用后，其中的数据就会失效。\n    //因此要么现用先转换，要么把它的数据复制到用户自己可以管理的内存中\n    const char *c;\n    string s = &quot;1234&quot;;\n    c = s.c_str();\n    cout&lt;&lt;c&lt;&lt;endl;\n    s = &quot;abcde&quot;;\n    cout&lt;&lt;c&lt;&lt;endl;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>1234\nabcde\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "url": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "title": "C++ STL容器（11个）",
            "date_published": "2021-10-23T08:33:00.000Z",
            "content_html": "<h1 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque :\"></a><code>deque</code> :</h1><h1 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list :\"></a><code>list</code> :</h1><h1 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue :\"></a><code>queue</code> :</h1><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/3285107056.jpg\"></p>\n<h1 id=\"priority-queue\"><a href=\"#priority-queue\" class=\"headerlink\" title=\"priority_queue :\"></a><code>priority_queue</code> :</h1><h4 id=\"默认大顶堆（后两参数可缺省）\"><a href=\"#默认大顶堆（后两参数可缺省）\" class=\"headerlink\" title=\"#### 默认大顶堆（后两参数可缺省）\"></a>#### 默认大顶堆（后两参数可缺省）</h4><pre><code>priority_queue&lt;int&gt; big_heap;\n</code></pre>\n<h4 id=\"大顶堆\"><a href=\"#大顶堆\" class=\"headerlink\" title=\"大顶堆\"></a>大顶堆</h4><pre><code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; big_heap2;\n</code></pre>\n<h4 id=\"小顶堆\"><a href=\"#小顶堆\" class=\"headerlink\" title=\"小顶堆\"></a>小顶堆</h4><pre><code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; small_heap;\n</code></pre>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p><code>bool empty() const</code>：返回值为true，说明队列为空</p>\n<p><code>int size() const</code>：返回优先队列中元素的数量</p>\n<p><code>void pop()</code>：删除队列顶部的元素，也即根节点</p>\n<p><code>int top()</code>：返回队列中的顶部元素，但不删除该元素</p>\n<p><code>void push(int arg)</code>：将元素arg插入到队列之中；</p>\n<h1 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack :\"></a><code>stack</code> :</h1><h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector :\"></a><code>vector</code> :</h1><h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map :\"></a><code>map</code> :</h1><h1 id=\"multimap\"><a href=\"#multimap\" class=\"headerlink\" title=\"multimap :\"></a><code>multimap</code> :</h1><h1 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set :\"></a><code>set</code> :</h1><h1 id=\"multiset\"><a href=\"#multiset\" class=\"headerlink\" title=\"multiset :\"></a><code>multiset</code> :</h1><h1 id=\"bitset\"><a href=\"#bitset\" class=\"headerlink\" title=\"bitset :\"></a><code>bitset</code> :</h1>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/19/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84sort%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2021/10/19/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84sort%E6%8E%92%E5%BA%8F/",
            "title": "二维数组sort排序",
            "date_published": "2021-10-19T07:25:51.000Z",
            "content_html": "<pre><code>for(int i = 0; i &lt; n; i++)\n    sort(s[i], s[i] + len);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "url": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "title": "历届真题 分糖果【第五届】【省赛】【C组】",
            "date_published": "2021-10-16T08:35:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/10/3684429808.png\" alt=\"image.png\"></p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint eq(int *t, int l)&#123;\n    for(int i = 1; i &lt; l; i++)\n        if(t[0] != t[i]) return 0;\n    return 1;\n&#125;\n\nint main(void)&#123;\n    int n, m;\n    cin &gt;&gt; n;\n    int c[n], i, s = 0, bf[n];\t\t// bf[n] 缓存区 \n    for(i = 0; i &lt; n; i++)\n        cin &gt;&gt; c[i];\n    while(1)&#123;\t\t\t\t\t\t// 思路：每次分糖果，把第i个 分出 的糖果记录到 对应的 缓存区， \n        for(i = 0; i &lt; n; i++)&#123;\t\t// \t\t 第i个小朋友的苹果等于 自身糖果的一半 加  i - 1 缓冲区的糖果 \n            c[i] /= 2;\t\t\t\t//\t例如： 有三个小朋友\n            bf[i] = c[i];\t\t\t//         2 2 4 \n        &#125;\t\t\t\t\t\t\t// 对半分：1 1 2(1)\n        c[0] += bf[n - 1];\t\t\t//          / / / \n        for(i = 1; i &lt; n; i++)\t \t// 缓冲区：1 1 2 \n            c[i] += bf[i - 1];\t\t//         | | | \n        for(i = 0; i &lt; n; i++)\t\t// 完成：3 2 3(3) \n            if(c[i] % 2 != 0)&#123;\n                c[i]++;\n                s++;\n            &#125;\n        if(eq(c, n) == 1) break;\n    &#125;\n\n    cout &lt;&lt; s;\n    return 0;\n&#125; \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/15/%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "url": "http://example.com/2021/10/15/%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "title": "类型字符串提取数字",
            "date_published": "2021-10-15T09:26:16.000Z",
            "content_html": "<p>洛谷P1615</p>\n<pre><code>cin &gt;&gt; time1\nsscanf(time1.c_str(), &quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1); // c_str()获取字符串地址\n// 或者直接这样写 scanf(&quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "url": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "title": "P2911 [USACO08OCT]Bovine Bones G (C)",
            "date_published": "2021-10-01T12:40:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/10/01/dcA2xWtmfYQRaqD.png\" alt=\"image.png\"></p>\n<pre><code>/*\n    根据题意，总共3个骰子，每个骰子有 S个面，因为数据范围较小，可以直接选择暴力\n    每次总和记录到相应的结构体(Sum = 10 -&gt; struct[10])，结构体中保存两个数据：总和(num)、次数(times) \n    最后使用快排(qsort)筛出次数(times)最小的目标 \n*/ \n\n#include&lt;stdio.h&gt;\n\nstruct A&#123;\t\t// 声明结构体，存放点数总和与次数 \n    int num;\n    int times;\n&#125;;\n\nint compare(const void *a, const void *b)&#123;\n    struct A *p1 = (struct A *)a;\n    struct A *p2 = (struct A *)b;\n    if(p1-&gt;times == p2-&gt;times) return p1-&gt;num - p2-&gt;num;\t\t// 题意：如果出现概率一样时输出最小总和 \n    return p2-&gt;times - p1-&gt;times;\n&#125;\n\nint main(void)&#123;\n    int s1, s2, s3, s, i, j, k;\n    struct A a[80];\n    scanf(&quot;%d %d %d&quot;, &amp;s1, &amp;s2, &amp;s3);\n    for(i = 0; i &lt; 81; i++)&#123;\n         a[i].times = 0;\n         a[i].num = 0;\n    &#125;\n    for(i = 1; i &lt;= s1; i++)\n        for(j = 1; j &lt;= s2; j++)\n            for(k = 1; k &lt;= s3; k++)&#123;\n                a[i + j + k].num = i + j + k;\n                a[i + j + k].times++;\n            &#125;\n\n    qsort(a, 80, sizeof(struct A), compare);\n    printf(&quot;%d&quot;, a[0].num);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "url": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "title": "冒泡排序 C语言",
            "date_published": "2021-09-11T09:10:00.000Z",
            "content_html": "<pre><code>#include&lt;stdio.h&gt;\n\n/* 交换函数\nvoid swap(int *pa, int *pb)&#123;\n    int temp;\n    if(*pa &gt; *pb)&#123;\n        temp = *pb;\n        *pb = *pa;\n        *pa = temp; \n    &#125;\n&#125;\n*/\n\nint main(void)&#123;\n    int a[] = &#123;1, 3, 5, 2, 14, 8, 4 ,9&#125;;\n    int i, j;\n    int temp;\n    int num = (sizeof(a) / sizeof(a[0]));\n    printf(&quot;排序前：&quot;);\n    for(i = 0; i &lt; num; i++)&#123;\n        printf(&quot;%d &quot;, a[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    // 冒泡 \n    for(i = 0; i &lt; num; i++)&#123;\t\t// 游标 \n        for(j = i; j &lt; num - 1; j++)&#123;\t\t// 两两比较 \n            if(a[j] &gt; a[j + 1])&#123;\n                temp = a[j + 1];\n                a[j + 1] = a[j];\n                a[j] = temp;\n            &#125;\n            // swap((a + j), (a + j + 1));\n        &#125;\n    &#125;\n\n    printf(&quot;排序后：&quot;);\n    for(i = 0; i &lt; num; i++)&#123;\n        printf(&quot;%d &quot;, a[i]);\n    &#125;\n    return 1;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "title": "洛谷题库爬虫",
            "date_published": "2021-09-10T12:39:00.000Z",
            "content_html": "<pre><code>import re\nimport urllib.request, urllib.error\nimport bs4\nimport time\n\n\nbaseUrl = &quot;https://www.luogu.com.cn/problem/P&quot;\nsavePath = &quot;C:\\\\Users\\\\666\\\\Desktop\\\\p\\\\&quot;\t# 存放位置\nmaxn = 7000\t# 最大爬取数\n\n\ndef main():\n    print(&quot;计划爬取到P&#123;&#125;&quot;.format(maxn))\n    for i in range(1000, maxn + 1):\n        time.sleep(0.2)\n        try:\n            print(&quot;正在爬取P&#123;&#125;&quot;.format(i))\n            html = getHTML(baseUrl + str(i))\n            problemMD = getMD(html)\n            name = getName(html)\n            saveData(problemMD, &quot;P&quot; + str(i) + &quot; &quot; + name + &quot;.md&quot;)\n        except Exception:\n            pass\n        continue\n    print(&quot;爬取完毕&quot;)\n\n\ndef getHTML(url):\n    headers = &#123;\n        &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5&quot;\n                      &quot;37.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&quot;\n    &#125;\n    request = urllib.request.Request(url=url, headers=headers)\n    response = urllib.request.urlopen(request)\n    html = response.read().decode(&#39;utf-8&#39;)\n    return html\n\n\ndef getName(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    name = str(bs.select(&quot;h1&quot;)[0])\n    name = re.sub(&quot;&lt;h1&gt;&quot;, &quot;&quot;, name)\n    name = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, name)\n    return name\n\n\ndef getMD(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    core = bs.select(&quot;article&quot;)[0]\n    md = str(core)\n    md = re.sub(&quot;&lt;h1&gt;&quot;, &quot;# &quot;, md)\n    md = re.sub(&quot;&lt;h2&gt;&quot;, &quot;## &quot;, md)\n    md = re.sub(&quot;&lt;h3&gt;&quot;, &quot;#### &quot;, md)\n    md = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, md)\n    md = func(md)\n    return md\n\n\ndef func(s: str) -&gt; str:\n    res = &quot;&quot;\n    left = True\n    for i in s:\n        if i != &quot;$&quot;:\n            res = res + i\n        elif left == True:\n            res = res + &quot;`&quot; + i\n            left = not (left)\n        else:\n            res = res + i + &quot;`&quot;\n            left = not (left)\n    return res\n\n\ndef saveData(data, filename):\n    cfilename = savePath + filename\n    file = open(cfilename, &quot;w&quot;, encoding=&quot;utf-8&quot;)\n    for d in data:\n        file.writelines(d)\n    file.close()\n\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "url": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "title": "P1223 排队接水问题续（C）",
            "date_published": "2021-09-04T10:32:00.000Z",
            "content_html": "<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nconst MAX = 1500;\n\n//创建结构体 \nstruct P&#123;\n    int id;\n    int time;\n&#125;;\n\n//排序函数 \nint comp(const void *p1, const void *p2)\n&#123;\n    const struct P *ps1 = (struct P *)p1;\n    const struct P *ps2 = (struct P *)p2;\t\n    if(ps1-&gt;time != ps2-&gt;time)\n        return ps1-&gt;time - ps2-&gt;time;\n    else\n        return ps1-&gt;id - ps2-&gt;id;\n&#125;\n\nint main()\n&#123;\n    struct P p[MAX];\n    int count = 0;\t\t//声明总人数 \n    int i, j;\n    double sum = 0.0; \n    scanf(&quot;%d&quot;, &amp;count);\n    for(i = 0; i &lt; count; i++)\t\t//创建(id , time)散列表 \n    &#123;\n        p[i].id = (i + 1);\n        scanf(&quot;%d&quot;, &amp;p[i].time);\n    &#125;\n    qsort(p, count, sizeof(p[1]), comp);\t\t//快排 \n    for(j = 0; j &lt; count; j++)\t\t//贪心算法求和计算总等待时间 \n        sum += p[j].time * (count - j - 1); \n    for(j = 0; j &lt; count; j++)\t\t//输出最优顺序 \n    &#123;\n        printf(&quot;%d &quot;,p[j].id);\n    &#125;\n    printf(&quot;\\n&quot;);\n    printf(&quot;%.2lf\\n&quot;, sum / count);\t\t//输出平均等待时间 \n    return 0;\n&#125;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21pb2UueHl6L2luZGV4LnBocC9hcmNoaXZlcy80Mi8=\">Python解法</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "url": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "title": "P1223 排队接水 python",
            "date_published": "2021-06-02T13:10:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/06/02/kzh7MsgTyiPWaUK.png\" alt=\"P1223 排队接水\"></p>\n<pre><code>n = int(input())\nlist1 = list(map(int, input().split()))\nc = 1\nsum1 = 0\nlist2 = []\nfor i in range(n):\n    list2.append(&#123;&quot;id&quot;: i + 1, &quot;time&quot;: list1[i]&#125;)\nlist2.sort(key=lambda rank: rank[&quot;time&quot;])\nfor i in list2:\n    sum1 += i[&quot;time&quot;] * (n - c)\n    c += 1\nfor i in range(n):\n    if i == n - 1:\n        print(list2[i][&quot;id&quot;], end=&quot;&quot;)\n    else:\n        print(list2[i][&quot;id&quot;], end=&quot; &quot;)\nprint()\nprint(&quot;%.2f&quot; % (sum1/n))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "url": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "title": "回文质数 python",
            "date_published": "2021-06-01T12:02:49.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/1304133883.png\" alt=\"6-01-2.png\"></p>\n<p>洛谷卡了很长时间，最终还是没有AC，最后两个超时，可能是我回文判断选择用字符串的方式导致的,最后没办法了，选择下策直接打表AC。</p>\n<p>注：</p>\n<ol>\n<li>除 11 外没有偶数位的回文质数，那么[10000000,100000000] 这个区间根本不用枚举。</li>\n<li>只需要[2, sqrt(i) + 1]</li>\n</ol>\n<p>代码如下：</p>\n<pre><code>import math\na, b = map(int, input().split())\nlist1 = []\nif b &gt; 10000000:\n    b = 10000000\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            print(i)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "url": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "title": "洛谷 P1106 删数问题 python解法",
            "date_published": "2021-06-01T11:48:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/3479330492.png\" alt=\"6-01-1.png\"></p>\n<p>第一次提交时，因为读题不清，3个WA。一开始理解为依次删除最大数，例50074897 2得500747，结果一直WA，然后被迫下载测试数据，发现正确答案为 4897。</p>\n<p>思索了一番，发现是个贪心问题,还是用 50074897 2 举例:<br>        (1) 5 &gt; 0 , 删除5, 0074897<br>        (2) 0 &#x3D; 0 , 不动 0074897<br>        (3) 0 &#x3D; 0 , 同理 0074897<br>        (5) 7 &gt; 4 , 删除7，004897<br>        (6) 去零整理，答案为 4897<br>Python天下第一，代码如下：</p>\n<pre><code>m = input()\nn = int(input())\ni = 0   # 用于下标索引\nwhile quit:\n    # 边界默认和0比\n    if i + 1 == len(m):\n        m = m[:len(m) - 1]\n        n -= 1\n        i -= 1\n    # 判断是否单调递增\n    elif m[i] &lt;= m[i + 1]:\n        i += 1\n        continue\n    # 删除非递增项\n    else:\n        m = m.replace(m[i], &quot;&quot;, 1)\n        n -= 1\n        i -= 1\n    # 循环结束\n    if n == 0:\n        break\nprint(int(m))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "title": "贪婪算法之背包问题",
            "date_published": "2021-05-31T13:54:41.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/05/33685418.png\" alt=\"5-31.png\"></p>\n<pre><code>coins, capacity = map(int, input().split())\nemt = []\nsum_coin = 0.0\nfor i in range(coins):\n    temp_weight, temp_coin = map(int, input().split())\n    emt.append(&#123;&#39;coin&#39;: temp_coin, &#39;weight&#39;: temp_weight, &#39;avg&#39;: temp_coin/temp_weight&#125;)\nemt.sort(key=lambda emt_d: emt_d[&#39;avg&#39;], reverse=True)\nfor i in range(len(emt)):\n    if capacity &gt;= emt[i][&#39;weight&#39;]:\n        sum_coin += emt[i][&#39;coin&#39;]\n        capacity -= emt[i][&#39;weight&#39;]\n    elif capacity &lt; emt[i][&#39;weight&#39;] and capacity != 0:\n        sum_coin += emt[i][&#39;avg&#39;] * capacity\n        break\nprint(&#39;%.2f&#39; % sum_coin)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/04/06/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC_%E8%A3%85%E9%A5%B0%E5%99%A8/",
            "url": "http://example.com/2021/04/06/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC_%E8%A3%85%E9%A5%B0%E5%99%A8/",
            "title": "python基础之函数进阶之函数作为返回值/装饰器",
            "date_published": "2021-04-06T10:44:00.000Z",
            "content_html": "<p><strong>因为装饰器需要用到返回函数的知识，所以在这里将返回函数和装饰器合并讲解。</strong><br><strong>什么是返回函数？</strong></p>\n<p>我们知道，一个函数中return可以返回一个或者多个值，但其实，return不仅可以返回值，还可以返回函数。</p>\n<p> 实例：</p>\n<pre><code>def col(*arg):\n    def sum():\n        res_sum=0\n        for i in arg:\n            res_sum=res_sum+i\n        return res_sum\n    return sum()\na=col(1,2,3,4,5)\nprint(a)#结果：15\n#a=col(1,2,3,4,5)  ==〉\n#即a=sum,并且arg=(1,2,3,4,5)也被传入sum中了\n#a()==sum()\n</code></pre>\n<p style=\"color:red\">并且因为sum()定义在col()函数中，所以sum()继承了col()函数的局部变量和参数，这就是闭包。</p>（比如，col()的arg参数就被sum()所继承）\n\n<p>下面来看一个我在检验上面加红的句话时所碰到的一个问题：</p>\n<pre><code>#还是用上面这段代码。稍稍修改一下\ndef col(*arg):\n    res_sum=0         #注意：将这句话移动到这里了\n    def sum():\n        for i in arg:\n            res_sum=res_sum+i\n        return res_sum\n    return sum()\na=col(1,2,3,4,5)\nprint(a())       \n\n结果报错：local variable &#39;res_sum&#39; referenced before assignment\n#既然内部函数可以引用外部函数的变量，为什么res_sum没有被内#部函数所引用？\n</code></pre>\n<p>为啥会报错？我当时很是疑惑，后来终于弄明白，错在这句：res_sum&#x3D;res_sum+i     </p>\n<p style=\"color:blue\">这句导致内部函数修改了外部函数的局部变量res_sum，这时，Python认为res_sum是内部函数的局部变量，而res_sum=res_sum+i之前并没有事先定义res_sum，所以当然会发生这种错误。</p>\n\n<p>所以，需要这样进行修改：</p>\n<pre><code>def col(*arg):\n    res_sum=0         \n    def sum():\n        for i in arg:\n            a=res_sum+i     #在内部函数中定义一个新的变量a\n        return a\n    return sum\na=col(1,2,3,4,5)\nprint(a())\n</code></pre>\n<hr>\n<p><strong>什么是装饰器？</strong></p>\n<pre><code>def login():\n    pass\n@login       #关键字@\ndef open():\n    pass\n</code></pre>\n<p>上例就是一个装饰器的例子。</p>\n<p><strong>装饰器的作用：</strong><br>当我们定义了open函数后（可以帮助我们打开某个文件），过了一段时间，发现我们需要在进行open之前进行验证用户，如何在<p style=\"color:red\">不修改open函数的条件下将login函数和open函数进行结合</p>，即：运行open之前先运行login？ 这里就要用到装饰器。</p>\n<p>下面我们来看一个真正的装饰器的实例：</p>\n<pre><code>def login(fun):\n    def real_login():\n        print(&#39;please input your password&#39;)\n        return fun()\n    return real_login\n@login\ndef open():\n    print(&#39;hello world&#39;)\nopen()\n</code></pre>\n<p>@login相当于open&#x3D;login(open)   也就是将open函数偷梁换柱了一番。</p>\n<p>当我们运行open()时：</p>\n<pre><code>open=login(open)　　#login(open)中的参数及局部变量：fun=open(原)　　#open=login(open)的返回值！\n　　#即：open=real_login　　\nopen()=real_login()\n　　#因为real_login定义在login之中，所以继承其参数和局部变量\n　　#所以整体来看open()==login(open)+real_login()+open()\n</code></pre>\n<p>实现一个可以接受任意参数的装饰器：</p>\n<pre><code>def outer(func):\n    def inner(*args,**kwargs):\n        print(&#39;start&#39;)\n        r=func(*args,**kwargs)    # 这里func(*args,**kwargs)相当于f(a,b)\n        print(&#39;end&#39;)\n        return r\n    return inner\n\n@outer\ndef f(a,b):\n    print(a+b)\n@outer\ndef f2(a,b,c):\n    print(a+b+c)\n\nf(1,2)\nf2(1,2,3)\n#结果：\nstart\n3\nend\nstart\n6\nend\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/31/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B(D&amp;C%EF%BC%89/",
            "url": "http://example.com/2021/03/31/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B(D&amp;C%EF%BC%89/",
            "title": "分而治之(D&amp;C）",
            "date_published": "2021-03-31T10:15:00.000Z",
            "content_html": "<p><strong>分而治之（Ｄ＆Ｃ）</strong>能将问题逐步分解，但并非可用于解决问题的算法，而是一种解决问题的思路。</p>\n<p><strong>分而治之算法</strong>是递归的，使用分而治之(D&amp;C)解决问题的过程包括两个步骤：</p>\n<ol>\n<li>找出递归边界条件，这种条件必须尽可能简单</li>\n<li>不断地将问题分解（或者说缩小规模），直到符合递归边界条件。</li>\n</ol>\n<blockquote>\n<p><strong>注意</strong>：假设要将一块地均匀地分成方块，确保分出的方块最大的条件，应采取Ｄ＆Ｃ策略：适用于这小块地的最大方块，也是适用于整块地的最大方案。原因可参考欧几里得算法。</p>\n</blockquote>\n<hr>\n<p>给定一个数字数组　arr &#x3D; [2, 4, 6]，如何将这些数字相加</p>\n<ol>\n<li>找出递归边界条件：数组不包含任何元素或只包含一个元素</li>\n<li>每次递归调用都必须离空数组更近一步。</li>\n</ol>\n<p><strong>例如：</strong><br>    arr &#x3D; [2, 4, 6]<br>    sum(arr) &#x3D; 12</p>\n<pre><code>#等效于下面的语句\narr = [4, 6]\n2 + sum(arr) = 12\n\n#再等效下面的语句\narr = [6]\n2 + 6 + sum(arr) = 12\n\n#依次类推，逐渐缩小了问题的规模\n</code></pre>\n<blockquote>\n<p>注意：编写涉及数组的递归函数时，递归边界条件通常是数组为空或只包含一个元素。陷入困境时，请检查递归边界条件是不是这样的。</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "url": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "title": "递归 - 数组累加",
            "date_published": "2021-03-31T10:01:00.000Z",
            "content_html": "<pre><code>def sum(a):\n    if a == []:\n        return 0    #基线条件\n    return a[0] + sum(a[1:])    #递归条件\n\nprint(sum(a))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "url": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "title": "迭代 - 水仙花数",
            "date_published": "2021-03-28T07:13:27.000Z",
            "content_html": "<p>偶然发现了一种用迭代算水仙花，太顶了：</p>\n<pre><code>for i in range(100, 1000):\n    sum = 0\n    temp = i\n    while temp:   #开始迭代\n        sum = sum + (temp%10) ** 3\n        temp //= 10\n    if sum == i:\n        print(i)\n</code></pre>\n<p>例如 153 这个数</p>\n<ol>\n<li>先取出个位数 152 % 10 &#x3D;&#x3D; 2 ，再对 temp 去除个位 (temp &#x2F;&#x2F;&#x3D; 10) ,这时 temp 等于 15</li>\n<li>while 为真，循环上一次操作，对 15 取各位 ，同理 temp 此时为 1</li>\n<li>对 1 求模 ，1 &#x2F;&#x2F; 10 为 0，跳出循环，至此 1,5,3 全部取出</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "title": "爱因斯坦的阶梯问题",
            "date_published": "2021-03-28T06:10:00.000Z",
            "content_html": "<h2 id=\"爱因斯坦的阶梯难题\"><a href=\"#爱因斯坦的阶梯难题\" class=\"headerlink\" title=\"爱因斯坦的阶梯难题\"></a>爱因斯坦的阶梯难题</h2><p>爱因斯坦曾出过这样一道有趣的数学题：有一个长阶梯，若每步上2阶，最后剩1阶；若每步上3阶，最后剩2阶；若每步上5阶，最后剩4阶；若每步上6阶，最后剩5阶；只有每步上7阶，最后刚好一阶也不剩。</p>\n<pre><code>i = 0\nwhile True:\n    if i % 2 == 1 and i % 3 == 2 and i % 5 == 4 and i % 6 == 5 and i % 7 == 0:\n        print(i)\n        break\n    else:\n        i += 1\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "二分查找",
            "date_published": "2021-03-21T07:53:00.000Z",
            "content_html": "<pre><code>def binary(list, item):         #二分查找\n    low = 0\n    high = len(list)\n    while low &lt;= high:\n        mid = int((low + high) / 2)\n        if list[mid] == item:\n            return mid\n        if list[mid] &lt;= item:\n            low = mid + 1         #中值已经比较过，直接从下一值开始，提高效率\n        if list[mid] &gt;= item:\n            high = mid - 1         #同理\n \n \nlist1 = [1, 3, 5, 7, 9, 11, 15, 16]         #二分查找测试\nprint(binary(list1, 9))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/17/Python%E5%A3%B0%E6%98%8E%E7%A9%BA%E6%95%B0%E7%BB%84/",
            "url": "http://example.com/2021/03/17/Python%E5%A3%B0%E6%98%8E%E7%A9%BA%E6%95%B0%E7%BB%84/",
            "title": "Python声明空数组",
            "date_published": "2021-03-17T10:36:00.000Z",
            "content_html": "<pre><code>w, h = 8, 5;\nArray = [ [0 for x in range( w )] for y in range( h ) ]  \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/17/Resilio_Sync%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95_+_pro%E8%A7%A3%E9%94%81%E8%A1%A5%E4%B8%81/",
            "url": "http://example.com/2021/01/17/Resilio_Sync%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95_+_pro%E8%A7%A3%E9%94%81%E8%A1%A5%E4%B8%81/",
            "title": "Resilio Sync添加右键菜单 + pro解锁补丁",
            "date_published": "2021-01-17T14:48:00.000Z",
            "content_html": "<p>最近一直在使用Resilio Sync来下载资源 ::aru:thumb:: ，但发现安装有右键没有同步选项，查阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLnJlc2lsaW8uY29tL2hjL2VuLXVzL2FydGljbGVzLzIwNjIxNDYyNS1Oby1TeW5jLWljb25zLWluLXRoZS1maWxlLWJyb3dzZXItbm8tU3luYy1yZWxhdGVkLWl0ZW1zLWluLXRoZS1jb250ZXh0LW1lbnUtb24tTWFjLVdpbmRvd3M=\">官方文档</span>，找到了两种解决方法：</p>\n<ul>\n<li>CMD添加(ShellExtensionPath.dll)</li>\n</ul>\n<p>根据官方文档显示，其根目录下ShellExtensionPath.dll为关键拓展，所以我们只需在CMD命令下使用regsvr32为其重新注册dll，命令如下：<br>    regsvr32 &#x2F;i “<em>\\ShellExtensionPath86_</em>.dll”<br>[scode type&#x3D;”share”]需注意的是，”” 里是Resilio Sync根目录地址，如果是64位的，将有两个Sync shell扩展：x64和x86，且下画线后每个用户的编码都不一样。[&#x2F;scode]<br><img data-src=\"https://i.loli.net/2021/01/17/VQcMI9EhS28RBK4.png\" alt=\"官网文档截图\"></p>\n<ul>\n<li>手动添加注册表</li>\n</ul>\n<p>将键值改为1，路径如下：</p>\n<pre><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA\n</code></pre>\n<hr>\n<p>[collapse status&#x3D;”false” title&#x3D;”补丁”]补丁链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d2EubGFuem91cy5jb20vaVBIa0hraW1wdGU=\">蓝奏云</span><br>使用方法：设置-许可证-应用许可证[&#x2F;collapse]</p>\n",
            "tags": [
                "Resilio Sync"
            ]
        },
        {
            "id": "http://example.com/2020/12/24/ArrayList%E5%88%97%E8%A1%A8%E9%9B%86%E5%90%88/",
            "url": "http://example.com/2020/12/24/ArrayList%E5%88%97%E8%A1%A8%E9%9B%86%E5%90%88/",
            "title": "ArrayList列表集合",
            "date_published": "2020-12-24T12:57:00.000Z",
            "content_html": "<pre><code>List&lt;Type&gt; variable = new ArrayList&lt;&gt;([size]);\n</code></pre>\n<p>Type：int String method …<br>size：可写可不写 </p>\n<pre><code>class user&#123;\n    private String name;\n    private int age;\n    public user(String string, int i) &#123;\n        this.name = string;\n        this.age = i;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public int getAge() &#123;\n        return age;\n    &#125;\n&#125;\n\n    List&lt;user&gt; list = new ArrayList&lt;&gt;();\n    list.add(new user(&quot;张三&quot;,15));\n</code></pre>\n<hr>\n<p>集合的遍历：</p>\n<p>方法一</p>\n<pre><code>for (int i = 0; i &lt; list.size(); i++) &#123;\n    System.out.print(list.get(i).getName());\n    System.out.println(list.get(i).getAge());\n&#125;\n</code></pre>\n<p>方法二</p>\n<pre><code>for (user user : list) &#123;\n    System.out.println(user.getAge() + user.getName());\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/06/Java%E5%8A%A0%E5%BC%BA%E5%9E%8B%E5%BE%AA%E7%8E%AFfor_each/",
            "url": "http://example.com/2020/12/06/Java%E5%8A%A0%E5%BC%BA%E5%9E%8B%E5%BE%AA%E7%8E%AFfor_each/",
            "title": "Java加强型循环for each",
            "date_published": "2020-12-06T09:59:00.000Z",
            "content_html": "<pre><code>for(type element: array)  \n&#123;  \n  System.out.println(element);  \n&#125;  \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/06/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%81%8D%E5%8E%86%E5%92%8C%E9%80%92%E5%BD%92%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "http://example.com/2020/12/06/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%81%8D%E5%8E%86%E5%92%8C%E9%80%92%E5%BD%92%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "循环、迭代、遍历和递归的区别",
            "date_published": "2020-12-06T06:47:33.000Z",
            "content_html": "<ul>\n<li>**循环（loop）**，指的是在满足条件的情况下，重复执行同一段代码。比如，while语句。</li><br>\n<li>**迭代（iterate）**，指的是按照某种顺序逐个访问列表中的每一项。比如，for语句。</li><br>\n<li>**遍历（traversal）**，指的是按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次。</li><br>\n<li>**递归（recursion）**，指的是一个函数不断调用自身的行为。比如，以编程方式输出著名的斐波纳契数列。</li><br>\n</ul>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/03/18/%E6%99%BA%E6%85%A7%E6%A0%91%E5%8A%A9%E6%89%8B/",
            "url": "http://example.com/2020/03/18/%E6%99%BA%E6%85%A7%E6%A0%91%E5%8A%A9%E6%89%8B/",
            "title": "智慧树助手",
            "date_published": "2020-03-18T04:00:00.000Z",
            "content_html": "<ol>\n<li>先安装猴油插件</li>\n<li>安装刷课插件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy96aC1DTi9zY3JpcHRzLzM4MDUwNg==\">智慧树网课助手</span></li>\n</ol>\n<ol start=\"3\">\n<li>之后打开智慧树网页版，即可自动激活脚本，开启刷课之旅</li>\n</ol>\n<hr>\n<blockquote>\n<p>转载CSDN：22 26 25</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2019/10/20/%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2019/10/20/%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "简单通俗的说一下什么是面向过程和面向对象",
            "date_published": "2019-10-20T07:47:36.000Z",
            "content_html": "<p>网上关于这两个的回答真的很多，但是都有一个共同特点：————不容易懂。</p>\n<p>我今天就简单通俗的说一下（当然，如果你要非常深入的了解，这篇不适合你。如果你只是为了了解什么是面向过程和面向对象，怎么面对考试，面对面试，怎么和别人说两者区别，看我下面几段话够了。）</p>\n<p>———————————————先来两小段通俗解释</p>\n<p>面向过程（Procedure Oriented 简称PO ：像C语言）：</p>\n<p>    看名字它是注重过程的。当解决一个问题的时候，面向过程会把事情拆分成： 一个个函数和数据（用于方法的参数） 。然后按照一定的顺序，执行完这些方法（每个方法看作一个个过程），等方法执行完了，事情就搞定了。</p>\n<p>面向对象（Object Oriented简称OO ：像C++，JAVA等语言）：</p>\n<p>    看名字它是注重对象的。当解决一个问题的时候，面向对象会把事物抽象成对象的概念，就是说这个问题里面有哪些对象，然后给对象赋一些属性和方法，然后让每个对象去执行自己的方法，问题得到解决。</p>\n<p>——————————————最后来个例子</p>\n<p>  问题：  冰箱里面放有脏衣服，怎么洗干净？</p>\n<p>   面向过程：<br>                    1 执行加洗衣粉方法；<br>                    2 执行加水方法；<br>                    3 执行洗衣服方法；<br>                    4 执行清洗方法；<br>                    5 执行烘干方法；<br>———-解决问题       拆成一个个方法，是没有对象去调用的。 通过一个个方法的执行解决问题。<br>   面向对象： 我先搞个洗衣机对象和人对象 </p>\n<p>   洗衣机： 加入一些属性和方法  洗衣服方法  清洗方法  烘干方法       人：加洗衣粉方法  加水方法</p>\n<p>   然后 人.加洗衣粉 人.加水   洗衣机.洗衣服 洗衣机.清洗  洗衣机.烘干</p>\n<p>———-同样解决问题    先抽象出对象，然后用对象执行方法的方式解决问题。</p>\n<p>然后在来一个我以前知乎看到的例子  ：  男女亲密例子      man   gril   </p>\n<p> 面向过程：        make_love(man，gril)  ———解决问题      拆成一个动作，把数据丢进去</p>\n<p> 面向对象：        man.make_love(gril)  或者 gril.make_love（man） —–解决问题    抽象出对象，对象执行动作 。 </p>\n<p>当然，你面试的时候，你不要做make_love   ….你可以说是打牌 。   </p>\n<p>面向过程就是    打牌 （你，我，他）</p>\n<p>面向对象就是  我.打牌（你，他） or 你.打牌（我，他）  or 他.打牌(我，你)<br>————————————————</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2019/05/20/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82%E7%BB%88%E4%BC%9A%E7%9B%B8%E9%81%87/",
            "url": "http://example.com/2019/05/20/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82%E7%BB%88%E4%BC%9A%E7%9B%B8%E9%81%87/",
            "title": "有趣的灵魂终会相遇",
            "date_published": "2019-05-20T12:16:00.000Z",
            "content_html": "<p><img data-src=\"https://ooo.0o0.ooo/2019/05/20/5ce29856d2a6d33297.jpg\" alt=\"做你想做的人\"></p>\n<p><img data-src=\"https://ooo.0o0.ooo/2019/05/20/5ce299702329914836.jpg\" alt=\"欣赏认可别人，厌烦憎恶别人\"></p>\n<p><img data-src=\"https://ooo.0o0.ooo/2019/05/20/5ce29a1b97fe156011.jpg\" alt=\"是世界选择了你\"></p>\n",
            "tags": [
                "相册"
            ]
        }
    ]
}