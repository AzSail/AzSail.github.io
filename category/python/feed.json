{
    "version": "https://jsonfeed.org/version/1",
    "title": "書架 • All posts by \"python\" category",
    "description": "花店不开了，花继续开",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "title": "洛谷题库爬虫",
            "date_published": "2021-09-10T12:39:00.000Z",
            "content_html": "<pre><code>import re\nimport urllib.request, urllib.error\nimport bs4\nimport time\n\n\nbaseUrl = &quot;https://www.luogu.com.cn/problem/P&quot;\nsavePath = &quot;C:\\\\Users\\\\666\\\\Desktop\\\\p\\\\&quot;\t# 存放位置\nmaxn = 7000\t# 最大爬取数\n\n\ndef main():\n    print(&quot;计划爬取到P&#123;&#125;&quot;.format(maxn))\n    for i in range(1000, maxn + 1):\n        time.sleep(0.2)\n        try:\n            print(&quot;正在爬取P&#123;&#125;&quot;.format(i))\n            html = getHTML(baseUrl + str(i))\n            problemMD = getMD(html)\n            name = getName(html)\n            saveData(problemMD, &quot;P&quot; + str(i) + &quot; &quot; + name + &quot;.md&quot;)\n        except Exception:\n            pass\n        continue\n    print(&quot;爬取完毕&quot;)\n\n\ndef getHTML(url):\n    headers = &#123;\n        &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5&quot;\n                      &quot;37.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&quot;\n    &#125;\n    request = urllib.request.Request(url=url, headers=headers)\n    response = urllib.request.urlopen(request)\n    html = response.read().decode('utf-8')\n    return html\n\n\ndef getName(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    name = str(bs.select(&quot;h1&quot;)[0])\n    name = re.sub(&quot;&lt;h1&gt;&quot;, &quot;&quot;, name)\n    name = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, name)\n    return name\n\n\ndef getMD(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    core = bs.select(&quot;article&quot;)[0]\n    md = str(core)\n    md = re.sub(&quot;&lt;h1&gt;&quot;, &quot;# &quot;, md)\n    md = re.sub(&quot;&lt;h2&gt;&quot;, &quot;## &quot;, md)\n    md = re.sub(&quot;&lt;h3&gt;&quot;, &quot;#### &quot;, md)\n    md = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, md)\n    md = func(md)\n    return md\n\n\ndef func(s: str) -&gt; str:\n    res = &quot;&quot;\n    left = True\n    for i in s:\n        if i != &quot;$&quot;:\n            res = res + i\n        elif left == True:\n            res = res + &quot;`&quot; + i\n            left = not (left)\n        else:\n            res = res + i + &quot;`&quot;\n            left = not (left)\n    return res\n\n\ndef saveData(data, filename):\n    cfilename = savePath + filename\n    file = open(cfilename, &quot;w&quot;, encoding=&quot;utf-8&quot;)\n    for d in data:\n        file.writelines(d)\n    file.close()\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "url": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "title": "P1223 排队接水 python",
            "date_published": "2021-06-02T13:10:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/06/02/kzh7MsgTyiPWaUK.png\" alt=\"P1223 排队接水\"></p>\n<pre><code>n = int(input())\nlist1 = list(map(int, input().split()))\nc = 1\nsum1 = 0\nlist2 = []\nfor i in range(n):\n    list2.append(&#123;&quot;id&quot;: i + 1, &quot;time&quot;: list1[i]&#125;)\nlist2.sort(key=lambda rank: rank[&quot;time&quot;])\nfor i in list2:\n    sum1 += i[&quot;time&quot;] * (n - c)\n    c += 1\nfor i in range(n):\n    if i == n - 1:\n        print(list2[i][&quot;id&quot;], end=&quot;&quot;)\n    else:\n        print(list2[i][&quot;id&quot;], end=&quot; &quot;)\nprint()\nprint(&quot;%.2f&quot; % (sum1/n))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "url": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "title": "回文质数 python",
            "date_published": "2021-06-01T12:02:49.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/1304133883.png\" alt=\"6-01-2.png\"></p>\n<p>洛谷卡了很长时间，最终还是没有 AC，最后两个超时，可能是我回文判断选择用字符串的方式导致的，最后没办法了，选择下策直接打表 AC。</p>\n<p>注：</p>\n<ol>\n<li>除 11 外没有偶数位的回文质数，那么 [10000000,100000000] 这个区间根本不用枚举。</li>\n<li>只需要 [2, sqrt (i) + 1]</li>\n</ol>\n<p>代码如下：</p>\n<pre><code>import math\na, b = map(int, input().split())\nlist1 = []\nif b &gt; 10000000:\n    b = 10000000\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            print(i)</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "url": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "title": "洛谷 P1106 删数问题 python解法",
            "date_published": "2021-06-01T11:48:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/3479330492.png\" alt=\"6-01-1.png\"></p>\n<p>第一次提交时，因为读题不清，3 个 WA。一开始理解为依次删除最大数，例 50074897 2 得 500747，结果一直 WA，然后被迫下载测试数据，发现正确答案为 4897。</p>\n<p>思索了一番，发现是个贪心问题，还是用 50074897 2 举例:<br>\n(1) 5 &gt; 0 , 删除 5, 0074897<br>\n (2) 0 = 0 , 不动 0074897<br>\n (3) 0 = 0 , 同理 0074897<br>\n (5) 7 &gt; 4 , 删除 7，004897<br>\n (6) 去零整理，答案为 4897<br>\nPython 天下第一，代码如下：</p>\n<pre><code>m = input()\nn = int(input())\ni = 0   # 用于下标索引\nwhile quit:\n    # 边界默认和0比\n    if i + 1 == len(m):\n        m = m[:len(m) - 1]\n        n -= 1\n        i -= 1\n    # 判断是否单调递增\n    elif m[i] &lt;= m[i + 1]:\n        i += 1\n        continue\n    # 删除非递增项\n    else:\n        m = m.replace(m[i], &quot;&quot;, 1)\n        n -= 1\n        i -= 1\n    # 循环结束\n    if n == 0:\n        break\nprint(int(m))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "title": "贪婪算法之背包问题",
            "date_published": "2021-05-31T13:54:41.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/05/33685418.png\" alt=\"5-31.png\"></p>\n<pre><code>coins, capacity = map(int, input().split())\nemt = []\nsum_coin = 0.0\nfor i in range(coins):\n    temp_weight, temp_coin = map(int, input().split())\n    emt.append(&#123;'coin': temp_coin, 'weight': temp_weight, 'avg': temp_coin/temp_weight&#125;)\nemt.sort(key=lambda emt_d: emt_d['avg'], reverse=True)\nfor i in range(len(emt)):\n    if capacity &gt;= emt[i]['weight']:\n        sum_coin += emt[i]['coin']\n        capacity -= emt[i]['weight']\n    elif capacity &lt; emt[i]['weight'] and capacity != 0:\n        sum_coin += emt[i]['avg'] * capacity\n        break\nprint('%.2f' % sum_coin)</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/04/06/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC_%E8%A3%85%E9%A5%B0%E5%99%A8/",
            "url": "http://example.com/2021/04/06/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC_%E8%A3%85%E9%A5%B0%E5%99%A8/",
            "title": "python基础之函数进阶之函数作为返回值/装饰器",
            "date_published": "2021-04-06T10:44:00.000Z",
            "content_html": "<p><strong>因为装饰器需要用到返回函数的知识，所以在这里将返回函数和装饰器合并讲解。</strong><br>\n<strong>什么是返回函数？</strong></p>\n<p>我们知道，一个函数中 return 可以返回一个或者多个值，但其实，return 不仅可以返回值，还可以返回函数。</p>\n<p>实例：</p>\n<pre><code>def col(*arg):\n    def sum():\n        res_sum=0\n        for i in arg:\n            res_sum=res_sum+i\n        return res_sum\n    return sum()\na=col(1,2,3,4,5)\nprint(a)#结果：15\n#a=col(1,2,3,4,5)  ==〉\n#即a=sum,并且arg=(1,2,3,4,5)也被传入sum中了\n#a()==sum()\n</code></pre>\n<p style=\"color:red\">并且因为sum()定义在col()函数中，所以sum()继承了col()函数的局部变量和参数，这就是闭包。</p>（比如，col()的arg参数就被sum()所继承）\n<p>下面来看一个我在检验上面加红的句话时所碰到的一个问题：</p>\n<pre><code>#还是用上面这段代码。稍稍修改一下\ndef col(*arg):\n    res_sum=0         #注意：将这句话移动到这里了\n    def sum():\n        for i in arg:\n            res_sum=res_sum+i\n        return res_sum\n    return sum()\na=col(1,2,3,4,5)\nprint(a())       \n\n结果报错：local variable 'res_sum' referenced before assignment\n#既然内部函数可以引用外部函数的变量，为什么res_sum没有被内#部函数所引用？\n</code></pre>\n<p>为啥会报错？我当时很是疑惑，后来终于弄明白，错在这句：res_sum=res_sum+i</p>\n<p style=\"color:blue\">这句导致内部函数修改了外部函数的局部变量res_sum，这时，Python认为res_sum是内部函数的局部变量，而res_sum=res_sum+i之前并没有事先定义res_sum，所以当然会发生这种错误。</p>\n<p>所以，需要这样进行修改：</p>\n<pre><code>def col(*arg):\n    res_sum=0         \n    def sum():\n        for i in arg:\n            a=res_sum+i     #在内部函数中定义一个新的变量a\n        return a\n    return sum\na=col(1,2,3,4,5)\nprint(a())\n</code></pre>\n<hr>\n<p><strong>什么是装饰器？</strong></p>\n<pre><code>def login():\n    pass\n@login       #关键字@\ndef open():\n    pass\n</code></pre>\n<p>上例就是一个装饰器的例子。</p>\n<p><strong>装饰器的作用：</strong><br>\n当我们定义了 open 函数后（可以帮助我们打开某个文件），过了一段时间，发现我们需要在进行 open 之前进行验证用户，如何在<p style=\"color:red\">不修改 open 函数的条件下将 login 函数和 open 函数进行结合</p>，即：运行 open 之前先运行 login？ 这里就要用到装饰器。</p>\n<p>下面我们来看一个真正的装饰器的实例：</p>\n<pre><code>def login(fun):\n    def real_login():\n        print('please input your password')\n        return fun()\n    return real_login\n@login\ndef open():\n    print('hello world')\nopen()\n</code></pre>\n<p>@login 相当于 open=login (open)   也就是将 open 函数偷梁换柱了一番。</p>\n<p>当我们运行 open () 时：</p>\n<pre><code>open=login(open)　　#login(open)中的参数及局部变量：fun=open(原)　　#open=login(open)的返回值！\n　　#即：open=real_login　　\nopen()=real_login()\n　　#因为real_login定义在login之中，所以继承其参数和局部变量\n　　#所以整体来看open()==login(open)+real_login()+open()\n</code></pre>\n<p>实现一个可以接受任意参数的装饰器：</p>\n<pre><code>def outer(func):\n    def inner(*args,**kwargs):\n        print('start')\n        r=func(*args,**kwargs)    # 这里func(*args,**kwargs)相当于f(a,b)\n        print('end')\n        return r\n    return inner\n\n@outer\ndef f(a,b):\n    print(a+b)\n@outer\ndef f2(a,b,c):\n    print(a+b+c)\n\nf(1,2)\nf2(1,2,3)\n#结果：\nstart\n3\nend\nstart\n6\nend</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "url": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "title": "递归 - 数组累加",
            "date_published": "2021-03-31T10:01:00.000Z",
            "content_html": "<pre><code>def sum(a):\n    if a == []:\n        return 0    #基线条件\n    return a[0] + sum(a[1:])    #递归条件\n\nprint(sum(a))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "url": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "title": "迭代 - 水仙花数",
            "date_published": "2021-03-28T07:13:27.000Z",
            "content_html": "<p>偶然发现了一种用迭代算水仙花，太顶了：</p>\n<pre><code>for i in range(100, 1000):\n    sum = 0\n    temp = i\n    while temp:   #开始迭代\n        sum = sum + (temp%10) ** 3\n        temp //= 10\n    if sum == i:\n        print(i)\n</code></pre>\n<p>例如 153 这个数</p>\n<ol>\n<li>先取出个位数 152 % 10 == 2 ，再对 temp 去除个位 (temp //= 10) , 这时 temp 等于 15</li>\n<li>while 为真，循环上一次操作，对 15 取各位 ，同理 temp 此时为 1</li>\n<li>对 1 求模 ，1 // 10 为 0，跳出循环，至此 1,5,3 全部取出</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "title": "爱因斯坦的阶梯问题",
            "date_published": "2021-03-28T06:10:00.000Z",
            "content_html": "<h2 id=\"爱因斯坦的阶梯难题\"><a class=\"markdownIt-Anchor\" href=\"#爱因斯坦的阶梯难题\">#</a> 爱因斯坦的阶梯难题</h2>\n<p>爱因斯坦曾出过这样一道有趣的数学题：有一个长阶梯，若每步上 2 阶，最后剩 1 阶；若每步上 3 阶，最后剩 2 阶；若每步上 5 阶，最后剩 4 阶；若每步上 6 阶，最后剩 5 阶；只有每步上 7 阶，最后刚好一阶也不剩。</p>\n<pre><code>i = 0\nwhile True:\n    if i % 2 == 1 and i % 3 == 2 and i % 5 == 4 and i % 6 == 5 and i % 7 == 0:\n        print(i)\n        break\n    else:\n        i += 1</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "二分查找",
            "date_published": "2021-03-21T07:53:00.000Z",
            "content_html": "<pre><code>def binary(list, item):         #二分查找\n    low = 0\n    high = len(list)\n    while low &lt;= high:\n        mid = int((low + high) / 2)\n        if list[mid] == item:\n            return mid\n        if list[mid] &lt;= item:\n            low = mid + 1         #中值已经比较过，直接从下一值开始，提高效率\n        if list[mid] &gt;= item:\n            high = mid - 1         #同理\n \n \nlist1 = [1, 3, 5, 7, 9, 11, 15, 16]         #二分查找测试\nprint(binary(list1, 9))</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/17/Python%E5%A3%B0%E6%98%8E%E7%A9%BA%E6%95%B0%E7%BB%84/",
            "url": "http://example.com/2021/03/17/Python%E5%A3%B0%E6%98%8E%E7%A9%BA%E6%95%B0%E7%BB%84/",
            "title": "Python声明空数组",
            "date_published": "2021-03-17T10:36:00.000Z",
            "content_html": "<pre><code>w, h = 8, 5;\nArray = [ [0 for x in range( w )] for y in range( h ) ]  </code></pre>\n",
            "tags": []
        }
    ]
}