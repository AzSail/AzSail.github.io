{
    "version": "https://jsonfeed.org/version/1",
    "title": "mioe • All posts by \"编程\" category",
    "description": "花店不开了，花继续开",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/12/21/AcWing_116._%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/",
            "url": "http://example.com/2022/12/21/AcWing_116._%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/",
            "title": "AcWing 116. 飞行员兄弟",
            "date_published": "2022-12-21T12:19:43.000Z",
            "content_html": "<p>“飞行员兄弟” 这个游戏，需要玩家顺利的打开一个拥有 <strong>16</strong> 个把手的冰箱。</p>\n<p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p>\n<p>只有当所有把手都打开时，冰箱才会打开。</p>\n<p>把手可以表示为一个 <strong>4</strong>×<strong>4</strong> 的矩阵，您可以改变任何一个位置 **[<strong>i</strong>,<strong>j</strong>]** 上把手的状态。</p>\n<p>但是，这也会使得第 <strong>i</strong> 行和第 <strong>j</strong> 列上的所有把手的状态也随着改变。</p>\n<p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p>\n<h4 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\">#</a> 输入格式</h4>\n<p>输入一共包含四行，每行包含四个把手的初始状态。</p>\n<p>符号  <code>+</code>  表示把手处于闭合状态，而符号  <code>-</code>  表示把手处于打开状态。</p>\n<p>至少一个手柄的初始状态是关闭的。</p>\n<h4 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\">#</a> 输出格式</h4>\n<p>第一行输出一个整数 <strong>N</strong>，表示所需的最小切换把手次数。</p>\n<p>接下来 <strong>N</strong> 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p>\n<p><strong>注意</strong> ：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p>\n<h4 id=\"数据范围\"><a class=\"markdownIt-Anchor\" href=\"#数据范围\">#</a> 数据范围</h4>\n<p><strong>1</strong>≤<strong>i</strong>,<strong>j</strong>≤<strong>4</strong></p>\n<h4 id=\"输入样例\"><a class=\"markdownIt-Anchor\" href=\"#输入样例\">#</a> 输入样例：</h4>\n<pre><code>-+--\n----\n----\n-+--\n</code></pre>\n<h4 id=\"输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输出样例\">#</a> 输出样例：</h4>\n<pre><code>6\n1 1\n1 3\n1 4\n4 1\n4 3\n4 4\n</code></pre>\n<h3 id=\"思路深搜\"><a class=\"markdownIt-Anchor\" href=\"#思路深搜\">#</a> 思路，深搜</h3>\n<pre><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint N = 999, kk;\nchar m[4][4], backup[4][4]; \nvector&lt;int&gt; ans, ways;\n\nvoid dfs(int x, int y, int step)&#123;\n\tif(x == 4)&#123;\n\t\tfor(int i = 0; i &lt; 4; i++)&#123;\n\t\t\tfor(int j = 0; j &lt; 4; j++)&#123;\n\t\t\t\tif(m[i][j] == '+') return;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif(ans.empty())&#123;\n\t\t\tans = ways;\n\t\t&#125;\n\t\tif(step &lt; N)&#123;\n\t\t\tN = step;\n\t\t\tans = ways;\n\t\t&#125;\n\t\treturn;\n\t&#125;\n\tif(y == 4)&#123;\n\t\tdfs(x + 1, 0, step);\n\t\treturn;\n\t&#125;\n\tfor(int i = 0; i &lt; 4; i++)&#123;\n\t\tm[x][i] == '-' ? m[x][i] = '+' : m[x][i] = '-';\n\t\tm[i][y] == '-' ? m[i][y] = '+' : m[i][y] = '-';\n\t&#125;\n\tm[x][y] == '-' ? m[x][y] = '+' : m[x][y] = '-';\n\tways.push_back(x + 1);\n\tways.push_back(y + 1);\n\tdfs(x, y + 1, step + 1);\n\n\tfor(int i = 0; i &lt; 4; i++)&#123;\n\t\tm[x][i] == '-' ? m[x][i] = '+' : m[x][i] = '-';\n\t\tm[i][y] == '-' ? m[i][y] = '+' : m[i][y] = '-';\n\t&#125;\n\tm[x][y] == '-' ? m[x][y] = '+' : m[x][y] = '-';\n\tways.pop_back();\n\tways.pop_back();\n\tdfs(x, y + 1, step);\n&#125;\n\nint main()&#123;\n\tfor(int i = 0; i &lt; 4; i++)&#123;\n\t\tscanf(&quot;%s&quot;, &amp;m[i]);\n\t&#125;\n\n\tdfs(0, 0, 0);\n\n\tcout &lt;&lt; N &lt;&lt; endl;\n\tfor(int i = 0; i &lt; ans.size(); i++)&#123;\n\t\tcout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;\n\t\tif(i &amp; 1) cout &lt;&lt; endl;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "url": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "title": "位运算",
            "date_published": "2022-11-28T03:47:00.000Z",
            "content_html": "<h6 id=\"136-single-number\"><a class=\"markdownIt-Anchor\" href=\"#136-single-number\">#</a> 136. Single Number</h6>\n<p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/4226140631.png\" alt=\"136\"></p>\n<ul>\n<li>交换律：a ^ b ^ c &lt;=&gt; a ^ c ^ b</li>\n<li>任何数于 0 异或为任何数 0 ^ n =&gt; n</li>\n<li>相同的数异或为 0: n ^ n =&gt; 0</li>\n</ul>\n<p><code>var a = [2, 3, 2, 4, 4]</code></p>\n<p><code>2 ^ 3 ^ 2 ^ 4 ^ 4 等价于 2 ^ 2 ^ 4 ^ 4 ^ 3 =&gt; 0 ^ 0 ^3 =&gt; 3</code></p>\n<h6 id=\"1758-minimum-changes-to-make-alternating-binary-string\"><a class=\"markdownIt-Anchor\" href=\"#1758-minimum-changes-to-make-alternating-binary-string\">#</a> 1758. Minimum Changes To Make Alternating Binary String</h6>\n<p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/2630183447.png\" alt=\"1758\"></p>\n<pre><code class=\"language-c++\">// 1 &amp; 1 = 1\n\n// 1 &amp; 0 = 0\n\n// 0 &amp; 0 = 0\n\nint minOperations(string s) &#123;\n        char a[2] = &#123;'0', '1'&#125;;\n        int ans = 0, t = 0;\n        for(int i = 0; i &lt; s.size(); i++) &#123;\n            if(a[i &amp; 1] == s[i]) ans++;\n            else t++;\n        &#125;\n        return min(ans, t);\n    &#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%86%E6%AE%B5%E7%BA%BF%E6%80%A7%E7%82%B9%E8%BF%90%E7%AE%97/",
            "url": "http://example.com/2022/10/04/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%86%E6%AE%B5%E7%BA%BF%E6%80%A7%E7%82%B9%E8%BF%90%E7%AE%97/",
            "title": "图像的分段线性点运算",
            "date_published": "2022-10-04T08:12:44.000Z",
            "content_html": "\\begin{align*}\n\\begin{split}\ng(i,j)= \\left \\{\n\\begin{array}{ll}\n\\alpha f(i,j),&0\\le f(i,j)< a\\\\\n\\beta (f(i,j)-a)+g_{a},&a\\le f(i,j)< b\\\\\n\\gamma  (f(i,j)-b)+g_{b},&b\\le f(i,j)< 255\n\\end{array}\n\\right.\n\\end{split}\n\\end{align*}\n\n\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> width</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> cv2<span class=\"token punctuation\">,</span>matplotlib</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fa<span class=\"token punctuation\">,</span> fb <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cat <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat.jpg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cat <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>change_cat <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>width <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>height <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> fa<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">elif</span> fa <span class=\"token operator\">&lt;=</span> change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> fb<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> fa<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>fb <span class=\"token operator\">-</span> fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            change_cat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'font.family'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SimHei'</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dpi <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'原图'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>change_cat<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'调整后'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/10/2395936215.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/02/bot%E7%9B%B8%E5%85%B3%E4%B8%80/",
            "url": "http://example.com/2022/09/02/bot%E7%9B%B8%E5%85%B3%E4%B8%80/",
            "title": "bot相关一",
            "date_published": "2022-09-02T04:03:00.000Z",
            "content_html": "<pre><code>kill $(pgrep -f nb2)\nsource activate nb2\nnohup nb run &amp;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/06/23/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/",
            "url": "http://example.com/2022/06/23/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/",
            "title": "表情包插件相关说明",
            "date_published": "2022-06-23T01:41:00.000Z",
            "content_html": "<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h3>\n<div align=\"left\">\n  <img data-src=\"https://s2.loli.net/2022/06/09/lCOujwopgJPxD97.jpg\" width=\"400\" />\n</div>\n<h4 id=\"触发方式\"><a class=\"markdownIt-Anchor\" href=\"#触发方式\">#</a> 触发方式</h4>\n<ul>\n<li>指令 + @user，如： / 爬 @小 Q</li>\n<li>指令 + qq 号，如：/ 爬 123456</li>\n<li>指令 + 自己，如：/ 爬 自己</li>\n<li>指令 + 图片，如：/ 爬 [图片]</li>\n</ul>\n<p>前三种触发方式会使用目标 qq 的头像作为图片</p>\n<h4 id=\"支持的指令\"><a class=\"markdownIt-Anchor\" href=\"#支持的指令\">#</a> 支持的指令</h4>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>万能表情<br>空白表情</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/29/C2VRA6iw4hzWZXO.jpg\" width=\"200\" /></td>\n<td>简单的图片加文字</td>\n</tr>\n<tr>\n<td>摸<br>摸摸<br>摸头<br>摸摸头<br>rua</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/oNGVO4iuCk73g8S.gif\" width=\"200\" /></td>\n<td>可使用参数 “圆” 让头像为圆形<br>如：摸头圆 自己</td>\n</tr>\n<tr>\n<td>亲<br>亲亲</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/RuoiqP8plJBgw9K.gif\" width=\"200\" /></td>\n<td>可指定一个或两个目标<br>若为一个则为 发送人 亲 目标<br>若为两个则为 目标 1 亲 目标 2<br>如：亲 114514 自己</td>\n</tr>\n<tr>\n<td>贴<br>贴贴<br>蹭<br>蹭蹭</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/QDCE5YZIfroavub.gif\" width=\"200\" /></td>\n<td>可指定一个或两个目标<br>类似 亲</td>\n</tr>\n<tr>\n<td>顶<br>玩</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/YwxA7fFgWyshuZX.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>拍</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/5mv6pFJMNtzHhcl.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>撕</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/29/FDcam9ROPkqvwxH.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>丢<br>扔</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/LlDrSGYdpcqEINu.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>抛<br>掷</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/W8X6cGZS5VMDOmh.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>爬</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/hfmAToDuF2actC1.jpg\" width=\"200\" /></td>\n<td>默认为随机选取一张爬表情<br>可使用数字指定特定表情<br>如：爬 13 自己</td>\n</tr>\n<tr>\n<td>精神支柱</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/WwjNmiz4JXbuE1B.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>一直</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/dAf9Z3kMDwYcRWv.gif\" width=\"200\" /></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>加载中</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/751Oudrah6gBsWe.gif\" width=\"200\" /></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>转</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/HoZaCcDIRgs784Y.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>小天使</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/ZgD1WSMRxLIymCq.jpg\" width=\"200\" /></td>\n<td>图中名字为目标 qq 昵称<br>可指定名字，如：小天使 meetwq 自己</td>\n</tr>\n<tr>\n<td>不要靠近</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/BTdkAzvhRDLOa3U.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>一样</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/SwAXoOgfdjP4ecE.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>滚</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/atzZsSE53UDIlOe.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>玩游戏<br>来玩游戏</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/j9ZKB7cFOSklzMe.jpg\" width=\"200\" /></td>\n<td>图中描述默认为：来玩休闲游戏啊<br>可指定描述<br>支持 gif</td>\n</tr>\n<tr>\n<td>膜<br>膜拜</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/nPgBJwV5qDb1s9l.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>吃</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/ba8cCtIWEvX9sS1.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>啃</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/k82n76U4KoNwsr3.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>出警</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/Q7WL1q2TlHgnERr.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>警察</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/xYLgKVJcd3HvqfM.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>问问<br>去问问</td>\n<td><img data-src=\"https://s2.loli.net/2022/02/23/GUyax1BF6q5Hvin.jpg\" width=\"200\" /></td>\n<td>名字为 qq 昵称，可指定名字</td>\n</tr>\n<tr>\n<td>舔<br>舔屏<br>prpr</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/05/WMHpwygtmN5bdEV.jpg\" width=\"200\" /></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>搓</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/09/slRF4ue56xSQzra.gif\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>墙纸</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/tQRXzLamGyWi24s.jpg\" width=\"200\" /></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>国旗</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/p7nwCvgsU3LxBDI.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>交个朋友</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/SnmkNrjKuFeZvbA.jpg\" width=\"200\" /></td>\n<td>名字为 qq 昵称，可指定名字</td>\n</tr>\n<tr>\n<td>继续干活<br>打工人</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/LIak2BsJ9Dd5O7l.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>完美<br>完美的</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/10/lUS1nmPAKIYtwih.jpg\" width=\"200\" /></td>\n<td></td>\n</tr>\n<tr>\n<td>关注</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/FlpjRWCte72ozqs.jpg\" width=\"200\" ></td>\n<td>名字为 qq 昵称，可指定名字</td>\n</tr>\n<tr>\n<td>我朋友说<br>我有个朋友说</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/cBk4aG3RwIoYbMF.jpg\" width=\"200\" ></td>\n<td>默认使用发送者的头像<br>如：我朋友说 来份涩图</td>\n</tr>\n<tr>\n<td>这像画吗</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/PiSAM1T6EvxXWgD.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>震惊</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/4krO6y53bKzYpUg.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>兑换券</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/12/6tS7dDaprb1sUxj.jpg\" width=\"200\" ></td>\n<td>默认文字为：qq 昵称 + 陪睡券<br>可指定文字</td>\n</tr>\n<tr>\n<td>听音乐</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/rjgvbXeOJtIW8fF.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>典中典</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/ikQ1IB6hS4x3EjD.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>哈哈镜</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/DwRPaErSNZWXGgp.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>永远爱你</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/o6mhWk7crwdepU5.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>对称</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/HXntCy8kc7IRZxp.jpg\" width=\"200\" ></td>\n<td>可使用参数 “上”、“下”、“左”、“右” 指定对称方向</td>\n</tr>\n<tr>\n<td>安全感</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/58pPzrgxJNkUYRT.jpg\" width=\"200\" ></td>\n<td>可指定描述</td>\n</tr>\n<tr>\n<td>永远喜欢<br>我永远喜欢</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/EpTiUbcoVGCXLkJ.jpg\" width=\"200\" ></td>\n<td>图中名字为目标 qq 昵称<br>可指定名字<br>可指定多个目标叠 buff</td>\n</tr>\n<tr>\n<td>采访</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/15/AYpkWEc2BrXhKeU.jpg\" width=\"200\" ></td>\n<td>可指定描述</td>\n</tr>\n<tr>\n<td>打拳</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/heA9fCPMQWXBxTn.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>群青</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/18/drwXx3yK14IMVCf.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捣</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/M9xUehlV64OpGoY.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捶</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/ElnARr7ohVXjtJx.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>需要<br>你可能需要</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/VBDG74QeZUYcunh.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>捂脸</td>\n<td><img data-src=\"https://s2.loli.net/2022/03/30/NLy4Eb6CHKP3Svo.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>敲</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/uHP8z3bDMtGdOCk.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>垃圾<br>垃圾桶</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/i1ok2NUYaMfKezT.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>为什么 @我<br>为什么 at 我</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/qQYydurABV7TMbN.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>像样的亲亲</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/14/1KvLjb2uRYQ9mCI.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>啾啾</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/v3YrbLMnND8BoPK.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>吸<br>嗦</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/LlFNscXC1IQrkgE.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>锤</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/ajXFm95tHRM6CzZ.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>紧贴<br>紧紧贴着</td>\n<td><img data-src=\"https://s2.loli.net/2022/04/20/FiBwc3ZxvVLObGP.gif\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>注意力涣散</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/11/mEtyxoZ3DfwBCn5.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>阿尼亚喜欢</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/11/U3ZMXHB1PduKckQ.jpg\" width=\"200\" ></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>想什么</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/18/ck1jNO2K8Qd6Lo3.jpg\" width=\"200\" ></td>\n<td>支持 gif</td>\n</tr>\n<tr>\n<td>远离</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/lqyOu25WPTsGBcb.jpg\" width=\"200\" ></td>\n<td>可指定多个目标</td>\n</tr>\n<tr>\n<td>结婚申请<br>结婚登记</td>\n<td><img data-src=\"https://s2.loli.net/2022/05/31/tZR3ls7cBrdGHTL.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>小画家</td>\n<td><img data-src=\"https://s2.loli.net/2022/06/09/bDA6mlUuo3k52nI.jpg\" width=\"200\" ></td>\n<td></td>\n</tr>\n<tr>\n<td>复读</td>\n<td><img data-src=\"https://s2.loli.net/2022/06/08/nU2dAe3GiVR7Y8I.gif\" width=\"200\" ></td>\n<td>复读内容默认为 “救命啊”<br>可指定多个目标</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/25/linux%E6%8C%89%E5%90%8D%E6%9F%A5PID%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/",
            "url": "http://example.com/2022/05/25/linux%E6%8C%89%E5%90%8D%E6%9F%A5PID%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/",
            "title": "linux按名查PID和后台运行",
            "date_published": "2022-05-25T03:27:00.000Z",
            "content_html": "<pre><code>pgrep -f name\n// ps -ax | grep [aaa]\n\nnohup [python] [aaa] &amp;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/22/git_push%E5%87%BA%E7%8E%B0Everything_up-to-date/",
            "url": "http://example.com/2022/05/22/git_push%E5%87%BA%E7%8E%B0Everything_up-to-date/",
            "title": "git push出现Everything up-to-date",
            "date_published": "2022-05-22T10:45:19.000Z",
            "content_html": "<h2 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因：</h2>\n<p>没有添加文件</p>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法：</h2>\n<pre><code>git add .\ngit commit -m &quot;commit&quot;\ngit push origin master\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "title": "Map 单词分析",
            "date_published": "2021-11-08T07:30:00.000Z",
            "content_html": "<p><strong>蓝桥杯无法使用 <code>for(x : y)&#123;&#125;</code>  、  <code>auto</code>  等的 C11 语法和关键字</strong></p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nmap&lt;char, int&gt; m;\n\nint main(void)&#123;\n\tstring str;\n\tchar mc;\n\tint s = 0;\n\tfor(int i = 97; i &lt;= 122; i++)&#123;\n\t\tm.insert(make_pair((char)i, 0));\n\t&#125;\n\tcin &gt;&gt; str;\n\tfor(int i = 0; i &lt; str.size(); i++)&#123;\n\t\tm[str[i]]++;\n\t&#125;\n\tfor(map&lt;char, int&gt;::iterator i = m.begin(); i != m.end(); i++)&#123;\n\t\tif(s &lt; i-&gt;second) mc = i-&gt;first, s = i-&gt;second;\t\t// 记录次数\n\t&#125;\n\tcout &lt;&lt; mc &lt;&lt; endl &lt;&lt; m[mc];\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/scanf%E3%80%81cin%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E8%BF%9E%E7%BB%AD%E8%BE%93%E5%85%A5/",
            "url": "http://example.com/2021/11/04/scanf%E3%80%81cin%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E8%BF%9E%E7%BB%AD%E8%BE%93%E5%85%A5/",
            "title": "scanf、cin返回值与连续输入",
            "date_published": "2021-11-04T11:43:00.000Z",
            "content_html": "<p><code>scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</code></p>\n<ul>\n<li><strong>a</strong> , <strong>b</strong> 都成功读入，返回值为 <strong>2</strong></li>\n<li>只有 <strong>a</strong> 成功读入，返回值为 <strong>1</strong></li>\n<li><strong>a</strong> 和 <strong>b</strong> 都未成功读入，返回值为 <strong>0</strong></li>\n<li>遇到 <strong>错误</strong> 或遇到 <strong>end of file</strong>，返回值为 <strong>EOF</strong></li>\n</ul>\n<p><code>std::cin &gt;&gt; a &gt;&gt; b; \t// cin 无返回值</code></p>\n<p><strong>连续输入参考模板：</strong></p>\n<pre><code>while(scanf(&quot;%d&quot;, &amp;i) != EOF)&#123;...&#125;\n\nwhile(cin &gt;&gt; i)&#123;...&#125;\n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/%E5%85%B3%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E8%A1%A8%E8%BE%BE/",
            "url": "http://example.com/2021/11/04/%E5%85%B3%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E8%A1%A8%E8%BE%BE/",
            "title": "关于矩阵对角线的相关表达",
            "date_published": "2021-11-04T08:02:00.000Z",
            "content_html": "<p>主对角线元素下标满足： <code>i = j</code></p>\n<p>副对角线元素下标满足： <code>i + j = n</code></p>\n<p>假设一个 <code>n×n</code>  的矩阵：</p>\n<pre><code>1 2 3 ...\n4 5 6\n7 8 9\n...\n</code></pre>\n<p>主对角线一定满足  <code>a[1][1], a[2][2], a[3][3]..., a[n][n]</code>  其中主对角线的每项都有  <code>i == j</code></p>\n<p>副对角线一定满足  <code>a[1][n], a[2][n - 1], a[3][n - 3] ... a[n][1]</code>  其中次对角线的每项都有  <code>i + j == n</code></p>\n<hr>\n<p>相关：求秩、八皇后问题…</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "Vector 二分查找",
            "date_published": "2021-11-04T07:39:00.000Z",
            "content_html": "<p>二分查找：</p>\n<ul>\n<li>lower_bound：查找第一个大于或等于某个元素的位置。</li>\n<li>upper_bound：查找第一个大于某个元素的位置。</li>\n</ul>\n<p>Vector 插入元素</p>\n<ul>\n<li>iterator insert (iterator it, const T&amp; x)：iterator 向量中迭代器指向元素前增加一个元素 x</li>\n<li>iterator insert (iterator it, int n,const T&amp; x)：向量中迭代器指向元素前增加 n 个相同的元素 x</li>\n<li>iterator insert (iterator it, const_iterator first, const_iterator last)：向量中迭代器指向元素前插入另一个相同类型向量的 [first, last) 间的数据</li>\n</ul>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(void)&#123;\n\tvector&lt;int&gt; arr;\n\tint t, k, a;\n\tfor(int i = 0; i &lt; 9; i++)&#123;\n\t\tcin &gt;&gt; t;\n\t\tarr.push_back(t);\n\t&#125;\n\tcin &gt;&gt; k;\n\tauto pos = upper_bound(arr.begin(), arr.end(), k); \t// vector&lt;int&gt;::iterator\n\tarr.insert(pos, k);\n\tfor(int i = 0; i &lt; 10; i++)\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\n\treturn 0;\n&#125; \n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/10/29/DFS%E4%B8%8EBFS%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "url": "http://example.com/2021/10/29/DFS%E4%B8%8EBFS%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "title": "DFS与BFS使用场景",
            "date_published": "2021-10-29T07:45:26.000Z",
            "content_html": "<p>(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaml1emhhbmcuY29tL3FhLzYyMy8=\">九章 - 马克助教</span>)</p>\n<blockquote>\n<ol>\n<li>BFS 是用来搜索最短径路的解是比较合适的，比如求最少步数的解，最少交换次数的解，因为 BFS 搜索过程中遇到的解一定是离根最近的，所以遇到一个解，一定就是最优解，此时搜索算法可以终止。这个时候不适宜使用 DFS，因为 DFS 搜索到的解不一定是离根最近的，只有全局搜索完毕，才能从所有解中找出离根的最近的解。（当然这个 DFS 的不足，可以使用迭代加深搜索 ID-DFS 去弥补）</li>\n<li>空间优劣上，DFS 是有优势的，DFS 不需要保存搜索过程中的状态，而 BFS 在搜索过程中需要保存搜索过的状态，而且一般情况需要一个队列来记录。</li>\n<li>DFS 适合搜索全部的解，因为要搜索全部的解，那么 BFS 搜索过程中，遇到离根最近的解，并没有什么用，也必须遍历完整棵搜索树，DFS 搜索也会搜索全部，但是相比 DFS 不用记录过多信息，所以搜素全部解的问题，DFS 显然更加合适。</li>\n</ol>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "title": "二叉树模板",
            "date_published": "2021-10-28T09:03:28.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\n#pragma GCC optimize(2)\nusing namespace std;\n\nstruct tree&#123;\n\tint left;\n\tint right;\n&#125;;\n\ntree t[1000];\n\nint dfs(int n)&#123;\t\t// 深度 \n\tif(!n) return 0;\n\treturn max(dfs(t[n].left), dfs(t[n].right)) + 1;\n&#125;\n\nvoid f(int n)&#123;\t\t// 先序 \n\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;\n\tif(t[n].left) f(t[n].left);\n\tif(t[n].right) f(t[n].right);\n&#125;\n\nvoid s(int n)&#123;\t\t// 中序 \n\tif(t[n].left) s(t[n].left);\n\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;\n\tif(t[n].right) s(t[n].right);\n&#125;\n\nvoid e(int n)&#123;\t\t// 后序 \n\tif(t[n].left) e(t[n].left);\n\tif(t[n].right) e(t[n].right);\n\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;\n&#125;\n\nint main(void)&#123;\n\tint n;\n\tcin &gt;&gt; n;\n\tfor(int i = 1; i &lt;= n; i++)\n\t\tcin &gt;&gt; t[i].left &gt;&gt; t[i].right;\n\t\n\treturn 0;\n&#125; \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "url": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "title": "卡常小技巧，肆无忌惮STL",
            "date_published": "2021-10-28T08:25:00.000Z",
            "content_html": "<pre><code>#pragma GCC optimize(2)\nios::sync_with_stdio(false);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "url": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "title": "数组粘贴，初始化C++",
            "date_published": "2021-10-28T03:51:00.000Z",
            "content_html": "<p>粘贴：memcpy ()</p>\n<p>初始化（可初始化结构体内的数组元素）：memset ()</p>\n<pre><code>int a[5];\nint b[5] = &#123;1, 2, 3, 4, 5&#125;\nmemset(a, 0, sizeof(int));\t// 把a中所有数组元素初始化为1\nmemcpy(a, b, 5 * sizeof(int));\t// 把b数组覆盖到a数组\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "c_str()使用方法",
            "date_published": "2021-10-26T13:52:15.000Z",
            "content_html": "<pre><code>//标准库的string类提供了三个成员函数来从一个string得到c类型的字符数组\n//c_str()：生成一个const char*指针，指向以空字符终止的数组。\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n \nint main()\n&#123;\n    //string--&gt;char*\n    //c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同\n    //这个数组的数据是临时的，当有一个改变这些数据的成员函数被调用后，其中的数据就会失效。\n    //因此要么现用先转换，要么把它的数据复制到用户自己可以管理的内存中\n    const char *c;\n    string s = &quot;1234&quot;;\n    c = s.c_str();\n    cout&lt;&lt;c&lt;&lt;endl;\n    s = &quot;abcde&quot;;\n    cout&lt;&lt;c&lt;&lt;endl;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>1234\nabcde\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "url": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "title": "C++ STL容器（11个）",
            "date_published": "2021-10-23T08:33:00.000Z",
            "content_html": "<h1 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"#deque\">#</a>  <code>deque</code>  :</h1>\n<h1 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a>  <code>list</code>  :</h1>\n<h1 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\">#</a>  <code>queue</code>  :</h1>\n<p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/3285107056.jpg\" alt=\"\"></p>\n<h1 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\">#</a>  <code>priority_queue</code>  :</h1>\n<h4 id=\"默认大顶堆后两参数可缺省\"><a class=\"markdownIt-Anchor\" href=\"#默认大顶堆后两参数可缺省\">#</a> #### 默认大顶堆（后两参数可缺省）</h4>\n<pre><code>priority_queue&lt;int&gt; big_heap;\n</code></pre>\n<h4 id=\"大顶堆\"><a class=\"markdownIt-Anchor\" href=\"#大顶堆\">#</a> 大顶堆</h4>\n<pre><code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; big_heap2;\n</code></pre>\n<h4 id=\"小顶堆\"><a class=\"markdownIt-Anchor\" href=\"#小顶堆\">#</a> 小顶堆</h4>\n<pre><code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; small_heap;\n</code></pre>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<p><code>bool empty() const</code> ：返回值为 true，说明队列为空</p>\n<p><code>int size() const</code> ：返回优先队列中元素的数量</p>\n<p><code>void pop()</code> ：删除队列顶部的元素，也即根节点</p>\n<p><code>int top()</code> ：返回队列中的顶部元素，但不删除该元素</p>\n<p><code>void push(int arg)</code> ：将元素 arg 插入到队列之中；</p>\n<h1 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\">#</a>  <code>stack</code>  :</h1>\n<h1 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\">#</a>  <code>vector</code>  :</h1>\n<h1 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a>  <code>map</code>  :</h1>\n<h1 id=\"multimap\"><a class=\"markdownIt-Anchor\" href=\"#multimap\">#</a>  <code>multimap</code>  :</h1>\n<h1 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a>  <code>set</code>  :</h1>\n<h1 id=\"multiset\"><a class=\"markdownIt-Anchor\" href=\"#multiset\">#</a>  <code>multiset</code>  :</h1>\n<h1 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a>  <code>bitset</code>  :</h1>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "url": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "title": "历届真题 分糖果【第五届】【省赛】【C组】",
            "date_published": "2021-10-16T08:35:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/10/3684429808.png\" alt=\"image.png\"></p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint eq(int *t, int l)&#123;\n\tfor(int i = 1; i &lt; l; i++)\n\t\tif(t[0] != t[i]) return 0;\n\treturn 1;\n&#125;\n\nint main(void)&#123;\n\tint n, m;\n\tcin &gt;&gt; n;\n\tint c[n], i, s = 0, bf[n];\t\t// bf[n] 缓存区 \n\tfor(i = 0; i &lt; n; i++)\n\t\tcin &gt;&gt; c[i];\n\twhile(1)&#123;\t\t\t\t\t\t// 思路：每次分糖果，把第i个 分出 的糖果记录到 对应的 缓存区， \n\t\tfor(i = 0; i &lt; n; i++)&#123;\t\t// \t\t 第i个小朋友的苹果等于 自身糖果的一半 加  i - 1 缓冲区的糖果 \n\t\t\tc[i] /= 2;\t\t\t\t//\t例如： 有三个小朋友\n\t\t\tbf[i] = c[i];\t\t\t//         2 2 4 \n\t\t&#125;\t\t\t\t\t\t\t// 对半分：1 1 2(1)\n\t\tc[0] += bf[n - 1];\t\t\t//          / / / \n\t\tfor(i = 1; i &lt; n; i++)\t \t// 缓冲区：1 1 2 \n\t\t\tc[i] += bf[i - 1];\t\t//         | | | \n\t\tfor(i = 0; i &lt; n; i++)\t\t// 完成：3 2 3(3) \n\t\t\tif(c[i] % 2 != 0)&#123;\n\t\t\t\tc[i]++;\n\t\t\t\ts++;\n\t\t\t&#125;\n\t\tif(eq(c, n) == 1) break;\n\t&#125;\n\n\tcout &lt;&lt; s;\n\treturn 0;\n&#125; \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/15/XX_XX_XX%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "url": "http://example.com/2021/10/15/XX_XX_XX%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "title": "XX:XX:XX类型字符串提取数字",
            "date_published": "2021-10-15T09:26:16.000Z",
            "content_html": "<p>洛谷 P1615</p>\n<pre><code>cin &gt;&gt; time1\nsscanf(time1.c_str(), &quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1); // c_str()获取字符串地址\n// 或者直接这样写 scanf(&quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "url": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "title": "P2911 [USACO08OCT]Bovine Bones G (C)",
            "date_published": "2021-10-01T12:40:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/10/01/dcA2xWtmfYQRaqD.png\" alt=\"image.png\"></p>\n<pre><code>/*\n\t根据题意，总共3个骰子，每个骰子有 S个面，因为数据范围较小，可以直接选择暴力\n\t每次总和记录到相应的结构体(Sum = 10 -&gt; struct[10])，结构体中保存两个数据：总和(num)、次数(times) \n\t最后使用快排(qsort)筛出次数(times)最小的目标 \n*/ \n\n#include&lt;stdio.h&gt;\n\nstruct A&#123;\t\t// 声明结构体，存放点数总和与次数 \n\tint num;\n\tint times;\n&#125;;\n\nint compare(const void *a, const void *b)&#123;\n\tstruct A *p1 = (struct A *)a;\n\tstruct A *p2 = (struct A *)b;\n\tif(p1-&gt;times == p2-&gt;times) return p1-&gt;num - p2-&gt;num;\t\t// 题意：如果出现概率一样时输出最小总和 \n\treturn p2-&gt;times - p1-&gt;times;\n&#125;\n\nint main(void)&#123;\n\tint s1, s2, s3, s, i, j, k;\n\tstruct A a[80];\n\tscanf(&quot;%d %d %d&quot;, &amp;s1, &amp;s2, &amp;s3);\n\tfor(i = 0; i &lt; 81; i++)&#123;\n\t\t a[i].times = 0;\n\t\t a[i].num = 0;\n\t&#125;\n\tfor(i = 1; i &lt;= s1; i++)\n\t\tfor(j = 1; j &lt;= s2; j++)\n\t\t\tfor(k = 1; k &lt;= s3; k++)&#123;\n\t\t\t\ta[i + j + k].num = i + j + k;\n\t\t\t\ta[i + j + k].times++;\n\t\t\t&#125;\n\n\tqsort(a, 80, sizeof(struct A), compare);\n\tprintf(&quot;%d&quot;, a[0].num);\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/2021/09/10/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%BA%93%E7%88%AC%E8%99%AB/",
            "title": "洛谷题库爬虫",
            "date_published": "2021-09-10T12:39:00.000Z",
            "content_html": "<pre><code>import re\nimport urllib.request, urllib.error\nimport bs4\nimport time\n\n\nbaseUrl = &quot;https://www.luogu.com.cn/problem/P&quot;\nsavePath = &quot;C:\\\\Users\\\\666\\\\Desktop\\\\p\\\\&quot;\t# 存放位置\nmaxn = 7000\t# 最大爬取数\n\n\ndef main():\n    print(&quot;计划爬取到P&#123;&#125;&quot;.format(maxn))\n    for i in range(1000, maxn + 1):\n        time.sleep(0.2)\n        try:\n            print(&quot;正在爬取P&#123;&#125;&quot;.format(i))\n            html = getHTML(baseUrl + str(i))\n            problemMD = getMD(html)\n            name = getName(html)\n            saveData(problemMD, &quot;P&quot; + str(i) + &quot; &quot; + name + &quot;.md&quot;)\n        except Exception:\n            pass\n        continue\n    print(&quot;爬取完毕&quot;)\n\n\ndef getHTML(url):\n    headers = &#123;\n        &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5&quot;\n                      &quot;37.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&quot;\n    &#125;\n    request = urllib.request.Request(url=url, headers=headers)\n    response = urllib.request.urlopen(request)\n    html = response.read().decode('utf-8')\n    return html\n\n\ndef getName(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    name = str(bs.select(&quot;h1&quot;)[0])\n    name = re.sub(&quot;&lt;h1&gt;&quot;, &quot;&quot;, name)\n    name = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, name)\n    return name\n\n\ndef getMD(html):\n    bs = bs4.BeautifulSoup(html, &quot;html.parser&quot;)\n    core = bs.select(&quot;article&quot;)[0]\n    md = str(core)\n    md = re.sub(&quot;&lt;h1&gt;&quot;, &quot;# &quot;, md)\n    md = re.sub(&quot;&lt;h2&gt;&quot;, &quot;## &quot;, md)\n    md = re.sub(&quot;&lt;h3&gt;&quot;, &quot;#### &quot;, md)\n    md = re.sub(&quot;&lt;/?[a-zA-Z]+[^&lt;&gt;]*&gt;&quot;, &quot;&quot;, md)\n    md = func(md)\n    return md\n\n\ndef func(s: str) -&gt; str:\n    res = &quot;&quot;\n    left = True\n    for i in s:\n        if i != &quot;$&quot;:\n            res = res + i\n        elif left == True:\n            res = res + &quot;`&quot; + i\n            left = not (left)\n        else:\n            res = res + i + &quot;`&quot;\n            left = not (left)\n    return res\n\n\ndef saveData(data, filename):\n    cfilename = savePath + filename\n    file = open(cfilename, &quot;w&quot;, encoding=&quot;utf-8&quot;)\n    for d in data:\n        file.writelines(d)\n    file.close()\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "url": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "title": "P1223 排队接水问题续（C）",
            "date_published": "2021-09-04T10:32:00.000Z",
            "content_html": "<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nconst MAX = 1500;\n\n//创建结构体 \nstruct P&#123;\n\tint id;\n\tint time;\n&#125;;\n\n//排序函数 \nint comp(const void *p1, const void *p2)\n&#123;\n\tconst struct P *ps1 = (struct P *)p1;\n\tconst struct P *ps2 = (struct P *)p2;\t\n\tif(ps1-&gt;time != ps2-&gt;time)\n\t\treturn ps1-&gt;time - ps2-&gt;time;\n\telse\n\t\treturn ps1-&gt;id - ps2-&gt;id;\n&#125;\n\nint main()\n&#123;\n\tstruct P p[MAX];\n\tint count = 0;\t\t//声明总人数 \n\tint i, j;\n\tdouble sum = 0.0; \n\tscanf(&quot;%d&quot;, &amp;count);\n\tfor(i = 0; i &lt; count; i++)\t\t//创建(id , time)散列表 \n\t&#123;\n\t\tp[i].id = (i + 1);\n\t\tscanf(&quot;%d&quot;, &amp;p[i].time);\n\t&#125;\n\tqsort(p, count, sizeof(p[1]), comp);\t\t//快排 \n\tfor(j = 0; j &lt; count; j++)\t\t//贪心算法求和计算总等待时间 \n\t\tsum += p[j].time * (count - j - 1); \n\tfor(j = 0; j &lt; count; j++)\t\t//输出最优顺序 \n\t&#123;\n\t\tprintf(&quot;%d &quot;,p[j].id);\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\tprintf(&quot;%.2lf\\n&quot;, sum / count);\t\t//输出平均等待时间 \n\treturn 0;\n&#125;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21pb2UueHl6L2luZGV4LnBocC9hcmNoaXZlcy80Mi8=\">Python 解法</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "url": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "title": "P1223 排队接水 python",
            "date_published": "2021-06-02T13:10:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/06/02/kzh7MsgTyiPWaUK.png\" alt=\"P1223 排队接水\"></p>\n<pre><code>n = int(input())\nlist1 = list(map(int, input().split()))\nc = 1\nsum1 = 0\nlist2 = []\nfor i in range(n):\n    list2.append(&#123;&quot;id&quot;: i + 1, &quot;time&quot;: list1[i]&#125;)\nlist2.sort(key=lambda rank: rank[&quot;time&quot;])\nfor i in list2:\n    sum1 += i[&quot;time&quot;] * (n - c)\n    c += 1\nfor i in range(n):\n    if i == n - 1:\n        print(list2[i][&quot;id&quot;], end=&quot;&quot;)\n    else:\n        print(list2[i][&quot;id&quot;], end=&quot; &quot;)\nprint()\nprint(&quot;%.2f&quot; % (sum1/n))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "url": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "title": "回文质数 python",
            "date_published": "2021-06-01T12:02:49.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/1304133883.png\" alt=\"6-01-2.png\"></p>\n<p>洛谷卡了很长时间，最终还是没有 AC，最后两个超时，可能是我回文判断选择用字符串的方式导致的，最后没办法了，选择下策直接打表 AC。</p>\n<p>注：</p>\n<ol>\n<li>除 11 外没有偶数位的回文质数，那么 [10000000,100000000] 这个区间根本不用枚举。</li>\n<li>只需要 [2, sqrt (i) + 1]</li>\n</ol>\n<p>代码如下：</p>\n<pre><code>import math\na, b = map(int, input().split())\nlist1 = []\nif b &gt; 10000000:\n    b = 10000000\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            print(i)</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "url": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "title": "洛谷 P1106 删数问题 python解法",
            "date_published": "2021-06-01T11:48:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/3479330492.png\" alt=\"6-01-1.png\"></p>\n<p>第一次提交时，因为读题不清，3 个 WA。一开始理解为依次删除最大数，例 50074897 2 得 500747，结果一直 WA，然后被迫下载测试数据，发现正确答案为 4897。</p>\n<p>思索了一番，发现是个贪心问题，还是用 50074897 2 举例:<br>\n(1) 5 &gt; 0 , 删除 5, 0074897<br>\n (2) 0 = 0 , 不动 0074897<br>\n (3) 0 = 0 , 同理 0074897<br>\n (5) 7 &gt; 4 , 删除 7，004897<br>\n (6) 去零整理，答案为 4897<br>\nPython 天下第一，代码如下：</p>\n<pre><code>m = input()\nn = int(input())\ni = 0   # 用于下标索引\nwhile quit:\n    # 边界默认和0比\n    if i + 1 == len(m):\n        m = m[:len(m) - 1]\n        n -= 1\n        i -= 1\n    # 判断是否单调递增\n    elif m[i] &lt;= m[i + 1]:\n        i += 1\n        continue\n    # 删除非递增项\n    else:\n        m = m.replace(m[i], &quot;&quot;, 1)\n        n -= 1\n        i -= 1\n    # 循环结束\n    if n == 0:\n        break\nprint(int(m))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "title": "贪婪算法之背包问题",
            "date_published": "2021-05-31T13:54:41.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/05/33685418.png\" alt=\"5-31.png\"></p>\n<pre><code>coins, capacity = map(int, input().split())\nemt = []\nsum_coin = 0.0\nfor i in range(coins):\n    temp_weight, temp_coin = map(int, input().split())\n    emt.append(&#123;'coin': temp_coin, 'weight': temp_weight, 'avg': temp_coin/temp_weight&#125;)\nemt.sort(key=lambda emt_d: emt_d['avg'], reverse=True)\nfor i in range(len(emt)):\n    if capacity &gt;= emt[i]['weight']:\n        sum_coin += emt[i]['coin']\n        capacity -= emt[i]['weight']\n    elif capacity &lt; emt[i]['weight'] and capacity != 0:\n        sum_coin += emt[i]['avg'] * capacity\n        break\nprint('%.2f' % sum_coin)</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/24/ArrayList%E5%88%97%E8%A1%A8%E9%9B%86%E5%90%88/",
            "url": "http://example.com/2020/12/24/ArrayList%E5%88%97%E8%A1%A8%E9%9B%86%E5%90%88/",
            "title": "ArrayList列表集合",
            "date_published": "2020-12-24T12:57:00.000Z",
            "content_html": "<pre><code>List&lt;Type&gt; variable = new ArrayList&lt;&gt;([size]);\n</code></pre>\n<p>Type：int String method …<br>\nsize：可写可不写</p>\n<pre><code>class user&#123;\n\tprivate String name;\n\tprivate int age;\n\tpublic user(String string, int i) &#123;\n\t\tthis.name = string;\n\t\tthis.age = i;\n\t&#125;\n\tpublic String getName() &#123;\n\t\treturn name;\n\t&#125;\n\tpublic int getAge() &#123;\n\t\treturn age;\n\t&#125;\n&#125;\n\n\tList&lt;user&gt; list = new ArrayList&lt;&gt;();\n\tlist.add(new user(&quot;张三&quot;,15));\n</code></pre>\n<hr>\n<p>集合的遍历：</p>\n<p>方法一</p>\n<pre><code>for (int i = 0; i &lt; list.size(); i++) &#123;\n\tSystem.out.print(list.get(i).getName());\n\tSystem.out.println(list.get(i).getAge());\n&#125;\n</code></pre>\n<p>方法二</p>\n<pre><code>for (user user : list) &#123;\n    System.out.println(user.getAge() + user.getName());\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/06/Java%E5%8A%A0%E5%BC%BA%E5%9E%8B%E5%BE%AA%E7%8E%AFfor_each/",
            "url": "http://example.com/2020/12/06/Java%E5%8A%A0%E5%BC%BA%E5%9E%8B%E5%BE%AA%E7%8E%AFfor_each/",
            "title": "Java加强型循环for each",
            "date_published": "2020-12-06T09:59:00.000Z",
            "content_html": "<pre><code>for(type element: array)  \n&#123;  \n  System.out.println(element);  \n&#125;  </code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/06/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%81%8D%E5%8E%86%E5%92%8C%E9%80%92%E5%BD%92%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "http://example.com/2020/12/06/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%81%8D%E5%8E%86%E5%92%8C%E9%80%92%E5%BD%92%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "循环、迭代、遍历和递归的区别",
            "date_published": "2020-12-06T06:47:33.000Z",
            "content_html": "<ul>\n<li>**循环（loop）**，指的是在满足条件的情况下，重复执行同一段代码。比如，while语句。</li><br>\n<li>**迭代（iterate）**，指的是按照某种顺序逐个访问列表中的每一项。比如，for语句。</li><br>\n<li>**遍历（traversal）**，指的是按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次。</li><br>\n<li>**递归（recursion）**，指的是一个函数不断调用自身的行为。比如，以编程方式输出著名的斐波纳契数列。</li><br>\n</ul>",
            "tags": []
        },
        {
            "id": "http://example.com/2019/10/20/%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2019/10/20/%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "简单通俗的说一下什么是面向过程和面向对象",
            "date_published": "2019-10-20T07:47:36.000Z",
            "content_html": "<p>网上关于这两个的回答真的很多，但是都有一个共同特点：------------ 不容易懂。</p>\n<p>我今天就简单通俗的说一下（当然，如果你要非常深入的了解，这篇不适合你。如果你只是为了了解什么是面向过程和面向对象，怎么面对考试，面对面试，怎么和别人说两者区别，看我下面几段话够了。）</p>\n<p>--------------------------------------------- 先来两小段通俗解释</p>\n<p>面向过程（Procedure Oriented 简称 PO ：像 C 语言）：</p>\n<p>看名字它是注重过程的。当解决一个问题的时候，面向过程会把事情拆分成： 一个个函数和数据（用于方法的参数） 。然后按照一定的顺序，执行完这些方法（每个方法看作一个个过程），等方法执行完了，事情就搞定了。</p>\n<p>面向对象（Object Oriented 简称 OO ：像 C++，JAVA 等语言）：</p>\n<p>看名字它是注重对象的。当解决一个问题的时候，面向对象会把事物抽象成对象的概念，就是说这个问题里面有哪些对象，然后给对象赋一些属性和方法，然后让每个对象去执行自己的方法，问题得到解决。</p>\n<p>------------------------------------------ 最后来个例子</p>\n<p>问题：  冰箱里面放有脏衣服，怎么洗干净？</p>\n<p>面向过程：<br>\n                    1 执行加洗衣粉方法；<br>\n                    2 执行加水方法；<br>\n                    3 执行洗衣服方法；<br>\n                    4 执行清洗方法；<br>\n                    5 执行烘干方法；<br>\n---------- 解决问题       拆成一个个方法，是没有对象去调用的。 通过一个个方法的执行解决问题。<br>\n   面向对象： 我先搞个洗衣机对象和人对象</p>\n<p>洗衣机： 加入一些属性和方法  洗衣服方法  清洗方法  烘干方法       人：加洗衣粉方法  加水方法</p>\n<p>然后 人。加洗衣粉 人。加水   洗衣机。洗衣服 洗衣机。清洗  洗衣机。烘干</p>\n<p>---------- 同样解决问题    先抽象出对象，然后用对象执行方法的方式解决问题。</p>\n<p>然后在来一个我以前知乎看到的例子  ：  男女亲密例子      man   gril</p>\n<p>面向过程：        make_love (man，gril)  --------- 解决问题      拆成一个动作，把数据丢进去</p>\n<p>面向对象：        man.make_love (gril)  或者 gril.make_love（man） ----- 解决问题    抽象出对象，对象执行动作 。</p>\n<p>当然，你面试的时候，你不要做 make_love   … 你可以说是打牌 。</p>\n<p>面向过程就是    打牌 （你，我，他）</p>\n<p>面向对象就是  我。打牌（你，他） or 你。打牌（我，他）  or 他。打牌 (我，你)<br>\n————————————————</p>\n",
            "tags": []
        }
    ]
}