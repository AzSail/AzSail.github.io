{
    "version": "https://jsonfeed.org/version/1",
    "title": "書架 • All posts by \"算法\" category",
    "description": "花店不开了，花继续开",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/02/04/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/02/04/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/",
            "title": "最短路问题",
            "date_published": "2023-02-04T10:51:00.000Z",
            "content_html": "<h1 id=\"单源最短路\"><a href=\"#单源最短路\" class=\"headerlink\" title=\"单源最短路\"></a>单源最短路</h1><h2 id=\"dijkstra-稠密图\"><a href=\"#dijkstra-稠密图\" class=\"headerlink\" title=\"dijkstra 稠密图\"></a>dijkstra 稠密图</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e4;\n\nint n, m, s;\nint g[N][N];\nint dist[N];\nbool st[N];\n\nvoid dijkstra() &#123;\n    memset(dist, 0x3f, sizeof dist);\n\n    dist[s] = 0;\n\n    for (int i = 0; i &lt; n; i++) &#123;\n        int t = -1;\n        for (int j = 1; j &lt;= n; j++)\n            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))\n                t = j;\n        st[t] = true;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            dist[j] = min(dist[j], dist[t] + g[t][j]);\n        &#125;\n    &#125;\n\n    //\tif(dist[n] == 0x3f3f3f3f) return -1;\n    //\telse return n;\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);\n\n    memset(g, 0x3f, sizeof g);\n\n    int a, b, c;\n    while (m--) &#123;\n        scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);\n        g[a][b] = min(g[a][b], c);\n    &#125;\n\n    //\tint t = dijkstra();\n    //\tprintf(&quot;%d&quot;, t);\n\n    dijkstra();\n\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, dist[i]);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"堆优化dijkstra\"><a href=\"#堆优化dijkstra\" class=\"headerlink\" title=\"堆优化dijkstra\"></a>堆优化dijkstra</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 2e6 + 5;\ntypedef pair&lt;int, int&gt; PII;\n\nint n, m, s;\nint h[N], ne[N], e[N], w[N], idx;\nint dist[N];\nbool st[N];\n\nvoid add(int a, int b, int c) &#123;\n    w[idx] = c, e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n&#125;\n\nvoid dijkstra() &#123;\n    memset(dist, 127, sizeof dist);\n    dist[s] = 0;\n\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;\n    heap.push(&#123;0, s&#125;);\n\n    while (heap.size()) &#123;\n        auto t = heap.top();\n        heap.pop();\n\n        int ver = t.second, distance = t.first;\n\n        if (st[ver]) continue;\n        st[ver] = true;\n\n        for (int i = h[ver]; i != -1; i = ne[i]) &#123;\n            int j = e[i];\n            if (dist[j] &gt; distance + w[i]) &#123;\n                dist[j] = distance + w[i];\n                heap.push(&#123;dist[j], j&#125;);\n            &#125;\n        &#125;\n    &#125;\n\n    //\tif(dist[n] == 0x3f3f3f3f) return -1;\n    //\telse return n;\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);\n\n    memset(h, -1, sizeof h);\n    int a, b, c;\n    while (m--) &#123;\n        scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);\n        add(a, b, c);\n    &#125;\n    //\tint t = dijkstra();\n    //\tprintf(&quot;%d&quot;, t);\n\n    dijkstra();\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, dist[i]);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h2><pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 505, M = 10010;\n\nint n, m, k;\nint dist[N], backup[N], st[N];\n\nstruct Node &#123;\n    int a, b, w;\n&#125; edges[M];\n\nint b_f() &#123;\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n\n    for (int i = 0; i &lt; k; i++) &#123;\n        memcpy(backup, dist, sizeof dist);\n        for (int j = 0; j &lt; m; j++) &#123;\n            int a = edges[j].a, b = edges[j].b, w = edges[j].w;\n            dist[b] = min(dist[b], backup[a] + w);\n        &#125;\n    &#125;\n    if (dist[n] &gt;= 0x3f3f3f3f / 2) return -1;\n    else return dist[n];\n&#125;\n\nint main() &#123;\n    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);\n\n    for (int i = 0; i &lt; m; i++) &#123;\n        int x, y, z;\n        scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;z);\n        edges[i] = &#123;x, y, z&#125;;\n    &#125;\n\n    int t = b_f();\n    if (t == -1 &amp;&amp; dist[n] != -1) printf(&quot;impossible&quot;);\n    else printf(&quot;%d&quot;, t);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h2><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2023/02/568055134.png\" alt=\"《信息学奥赛一本通》 , usaco training 3.2\"></p>\n<h4 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><pre><code>3 4 5\n2\n3\n4\n1 2 1\n1 3 5\n2 3 7\n2 4 3\n3 4 5\n</code></pre>\n<h4 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><pre><code>8\n</code></pre>\n<h4 id=\"AC\"><a href=\"#AC\" class=\"headerlink\" title=\"AC\"></a>AC</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 510, P = 805, C = 1455 * 2;    // 无向图 边 * 2;\n\nbool st[P];\nint cow[N];\nint dist[P];\nint ne[C], e[C], h[C], w[C], idx;\n\nvoid add(int a, int b, int v) &#123;\n    e[idx] = b, w[idx] = v, ne[idx] = h[a], h[a] = idx++;\n&#125;\n\nvoid spfa(int cw) &#123;\n    memset(dist, 0x3f, sizeof dist);\n    dist[cw] = 0;\n\n    queue&lt;int&gt; q;\n    q.push(cw);\n    st[cw] = true;\n\n    while (!q.empty()) &#123;\n        int t = q.front();\n        q.pop();\n        st[t] = false;\n        for (int i = h[t]; i != -1; i = ne[i]) &#123;\n            int j = e[i];\n            if (dist[j] &gt; dist[t] + w[i]) &#123;\n                dist[j] = dist[t] + w[i];\n                if (!st[j]) &#123;\n                    q.push(j);\n                    st[j] = true;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, p, c;\n    cin &gt;&gt; n &gt;&gt; p &gt;&gt; c;\n\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; cow[i];\n\n    memset(h, -1, sizeof h);\n    for (int i = 0; i &lt; c; i++) &#123;\n        int a, b, v;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;\n        add(a, b, v);\n        add(b, a, v);\n    &#125;\n\n    int res = 0x3f3f3f3f, t = 0;\n    for (int i = 1; i &lt;= p; i++) &#123;\n        t = 0;\n        spfa(i);\n        for (int j = 0; j &lt; n; j++) &#123;\n            if (t &gt;= 0x3f3f3f3f) continue;\n            t += dist[cow[j]];\n        &#125;\n        res = min(res, t);\n    &#125;\n\n    cout &lt;&lt; res;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"负环判断\"><a href=\"#负环判断\" class=\"headerlink\" title=\"负环判断\"></a>负环判断</h2><pre><code class=\"cpp\">cnt[x] = cnt[i] + 1;\nif(cnt[x] &gt;= n) return true;\n</code></pre>\n<h1 id=\"多源最短路\"><a href=\"#多源最短路\" class=\"headerlink\" title=\"多源最短路\"></a>多源最短路</h1><h2 id=\"Floyd\"><a href=\"#Floyd\" class=\"headerlink\" title=\"Floyd\"></a>Floyd</h2><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 205, inf = 0x3f3f3f3f;\n\nint g[N][N], path[N][N];\nint n, m, q;\nint tx, ty;\n\nvoid writePath(int x, int y)&#123;\n    if (path[x][y] != 0) &#123;\n        writePath(x, path[x][y]);\n        cout &lt;&lt; path[x][y] &lt;&lt; &quot; &quot;;\n    &#125;\n    if (y == ty) cout &lt;&lt; y &lt;&lt; &quot; &quot;;\n&#125;\n\nvoid floyd() &#123;\n    for (int k = 1; k &lt;= n; k++)\n        for (int i = 1; i &lt;= n; i++)\n            for (int j = 1; j &lt;= n; j++)\n                if (g[i][k] + g[k][j] &lt; g[i][j]) &#123;\n                    g[i][j] = g[i][k] + g[k][j];\n                    path[i][j] = path[k][j];\n                &#125;\n&#125; \n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            if (i == j) g[i][j] = 0;\n            else g[i][j] = inf;\n        &#125;\n    &#125;\n\n    for (int i = 0; i &lt; m; i++) &#123;\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        path[x][y] = x;\n        g[x][y] = min(g[x][y], z);\n    &#125;\n\n    floyd();\n\n    cin &gt;&gt; tx &gt;&gt; ty;\n    cout &lt;&lt; g[tx][ty] &lt;&lt; endl;\n    writePath(tx, ty);\n\n    return 0;\n&#125;\n</code></pre>\n<pre><code>\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/03/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89/",
            "url": "http://example.com/2023/02/03/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89/",
            "title": "树的深度优先遍历（邻接表）",
            "date_published": "2023-02-03T10:24:20.000Z",
            "content_html": "<h4 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint idx, n;\nint h[N], e[N], ne[N];\nbool st[N];\n\nvoid ins(int a, int b)&#123;\n    e[idx] = b;\n    ne[idx] = h[a];\n    h[a] = idx++;\n&#125;\n\nvoid dfs(int u)&#123;\n    st[u] = true;\n    cout &lt;&lt; u;\n    for(int i = h[u]; i != -1; i = ne[i])&#123;\n        int j = e[i];\n        if(!st[j]) dfs(j);\n    &#125;\n&#125;\n\nint main()&#123;\n    memset(h, -1, sizeof h);\n\n    cin &gt;&gt; n;\n    int a, b;\n\n    while(n--)&#123;\n        cin &gt;&gt; a &gt;&gt; b;\n        ins(a, b);\n    &#125;\n\n    dfs(1);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "url": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "title": "字符串哈希",
            "date_published": "2023-02-02T08:36:57.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1010, P = 131;\n\nunsigned long long h[N], p[N];\nint n, m;\nchar str[N];\n\nunsigned long long gethash(int l, int r)&#123;\n    return h[r] - h[l - 1] * p[r - l + 1];\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d %d %s&quot;, &amp;n, &amp;m, str + 1);\n\n    p[0] = 1;\n    for(int i = 1; i &lt;= n; i++)&#123;\n        p[i] = p[i - 1] * P;\n        h[i] = h[i - 1] * P + str[i];\n    &#125;\n\n    int l1, r1, l2, r2;\n    while(m--)&#123;\n        scanf(&quot;%d %d %d %d&quot;, &amp;l1, &amp;r1, &amp;l2, &amp;r2);\n        if(gethash(l1, r1) == gethash(l2, r2)) printf(&quot;Yes\\n&quot;);\n        else printf(&quot;No\\n&quot;);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "url": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "title": "小根堆",
            "date_published": "2023-02-01T10:38:45.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e6+10;\n\nint hp[N], idx;\nint n;\n\nvoid down(int k)&#123;\n    int t = k;\n    if(hp[k &lt;&lt; 1] &lt; hp[t] &amp;&amp; (k &lt;&lt; 1) &lt;= idx) t = k &lt;&lt; 1;\n    if(hp[k &lt;&lt; 1 | 1] &lt; hp[t] &amp;&amp; (k &lt;&lt; 1 | 1) &lt;= idx) t = k &lt;&lt; 1 | 1;\n    if(t != k)&#123;\n        swap(hp[k], hp[t]);\n        down(t);\n    &#125;\n&#125;\n\nvoid up(int k)&#123;\n    while(k &gt;&gt; 1 &amp;&amp; hp[k &gt;&gt; 1] &gt; hp[k])&#123;\n        swap(hp[k &gt;&gt; 1], hp[k]);\n        k &gt;&gt;= 1;\n    &#125;\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d&quot;, &amp;n);\n\n    int x, y;\n    while(n--)&#123;\n        scanf(&quot;%d&quot;, &amp;x);\n        if(x == 1)&#123;\n            scanf(&quot;%d&quot;, &amp;y);\n            hp[++idx] = y;\n            up(idx);\n        &#125;else if(x == 2) printf(&quot;%d\\n&quot;, hp[1]);\n        else hp[1] = hp[idx], idx--, down(1);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/31/%E9%9B%86%E5%90%88%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "url": "http://example.com/2023/01/31/%E9%9B%86%E5%90%88%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "title": "集合与并查集",
            "date_published": "2023-01-31T10:11:00.000Z",
            "content_html": "<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint son[N][26], cnt[N], idx;\nint n;\n\nvoid insert(string str)&#123;\n    int p = 0;\n    for(int i = 0; str[i]; i++)&#123;\n        int u = str[i] - &#39;a&#39;;\n        if(!son[p][u]) son[p][u] = ++idx;\n        p = son[p][u];\n    &#125;\n    cnt[p]++;\n&#125;\n\nint query(string str)&#123;\n    int p = 0;\n    for(int i = 0; str[i]; i++)&#123;\n        int u = str[i] - &#39;a&#39;;\n        if(!son[p][u]) return 0;\n        p = son[p][u];\n    &#125;\n\n    return cnt[p];\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    while(n--)&#123;\n        char op;\n        string str;\n        cin &gt;&gt; op &gt;&gt; str;\n        if(op == &#39;I&#39;) insert(str);\n        else printf(&quot;%d\\n&quot;, query(str)); \n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 10010;\n\nint p[N], n, m;\n\nint find(int x)&#123;\n    if(p[x] != x) p[x] = find(p[x]);\n    return x;\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i++) p[i] = i;\n\n    while(m--)&#123;\n        int z, x, y;\n        scanf(&quot;%d%d%d&quot;, &amp;z, &amp;x, &amp;y);\n        if(z == 1) p[find(x)] = find(y);\n        else&#123;\n            if(find(x) == find(y)) printf(&quot;Y\\n&quot;);\n            else printf(&quot;N\\n&quot;);\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/30/KMP/",
            "url": "http://example.com/2023/01/30/KMP/",
            "title": "KMP",
            "date_published": "2023-01-30T10:25:00.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100, M = 1000;\n\nint n, m;\nchar p[N], s[M];\nint ne[N];\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;\n\n    for(int i = 2, j = 0; i &lt;= n; i++)&#123;\n        while(j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\n        if(p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    &#125;\n\n    for(int i = 1, j = 0; i &lt;= m; i++)&#123;\n        while(j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\n        if(s[i] == p[j + 1]) j++;\n        if(j == n)&#123;\n            printf(&quot;%d&quot;, i - n);\n            break;\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "url": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "title": "单调栈、滑动窗口（单调队列）",
            "date_published": "2023-01-30T09:07:00.000Z",
            "content_html": "<h4 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint stk[N], arr[N];\nint n, t;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++)&#123;\n        cin &gt;&gt; arr[i];\n        while(t &amp;&amp; arr[i] &lt;= stk[t]) t--;\n    \n        if(t) cout &lt;&lt; stk[t] &lt;&lt; &quot; &quot;;\n        else cout &lt;&lt; -1 &lt;&lt; &quot; &quot;;\n    \n        stk[++t] = arr[i];\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h4><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint arr[N], q[N];\nint n, k;\n\nint main()&#123;\n    scanf(&quot;%d %d&quot;, &amp;n, &amp;k);\n\n    for(int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;arr[i]);\n\n    int h = 0, r = -1;\n    for(int i = 0; i &lt; n; i++)&#123;\n        if(h &lt;= r &amp;&amp; i - k + 1 &gt; q[h]) h++;\n\n        while(h &lt;= r &amp;&amp; arr[q[r]] &gt;= arr[i]) r--;\n\n        q[++r] = i;\n\n        if(i &gt;= k - 1) printf(&quot;%d &quot;, arr[q[h]]);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "url": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "title": "双指针数组去重",
            "date_published": "2023-01-20T12:23:01.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\n\nint n; \nint arr[N];\n\nint main()&#123;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++) cin &gt;&gt; arr[i];\n\n    int j = 0;\t// 非重复个数\n    for(int i = 0; i &lt; n; i++)\n        if(!i || arr[i] != arr[i - 1])\n            arr[j++] = arr[i];\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/20/%E7%A6%BB%E6%95%A3%E5%8C%96%E5%8C%BA%E9%97%B4%E5%92%8C/",
            "url": "http://example.com/2023/01/20/%E7%A6%BB%E6%95%A3%E5%8C%96%E5%8C%BA%E9%97%B4%E5%92%8C/",
            "title": "离散化区间和",
            "date_published": "2023-01-20T11:29:00.000Z",
            "content_html": "<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100;\ntypedef pair&lt;int, int&gt; PII;\n\nint n, m;\nint arr[N], sum[N];\nvector&lt;int&gt; alls;\nvector&lt;PII&gt; add, query;\n\n// 查找x在alls数组中的下标\nint find(int x)&#123;\n    int l = 0, r = alls.size() - 1, mid;\n    while(l &lt; r)&#123;\n        mid = l + r &gt;&gt; 1;\n        if(alls[mid] &gt;= x) r = mid;\n        else l = mid + 1;\n    &#125;\n    return l + 1;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int x, c;\n    for(int i = 0; i &lt; n; i++)&#123;\n        cin &gt;&gt; x &gt;&gt; c;\n        add.push_back(&#123;x, c&#125;);\n        alls.push_back(x);\n    &#125;\n\n    int l, r;\n    for(int i = 0; i &lt; m; i++)&#123;\n        cin &gt;&gt; l &gt;&gt; r;\n        query.push_back(&#123;l, r&#125;);\n        alls.push_back(l);\n        alls.push_back(r);\n    &#125;\n\n    // 排序去重\n    sort(alls.begin(), alls.end());\n    alls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n    for(auto item : add)\n        arr[find(item.first)] += item.second;\n\n    // 处理前缀和\n    for(int i = 1; i &lt;= alls.size(); i++)\n        sum[i] = sum[i - 1] + arr[i];\n\n    for(auto item : query)\n        printf(&quot;%d\\n&quot;, sum[find(item.second)] - sum[find(item.first) - 1]);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/10/gcd%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%B4%A8%E6%95%B0%E7%AD%9B%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/10/gcd%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%B4%A8%E6%95%B0%E7%AD%9B%E6%A8%A1%E6%9D%BF/",
            "title": "gcd与欧拉质数筛模板",
            "date_published": "2023-01-10T08:04:00.000Z",
            "content_html": "<h2 id=\"欧几里得辗转相除法\"><a href=\"#欧几里得辗转相除法\" class=\"headerlink\" title=\"欧几里得辗转相除法\"></a>欧几里得辗转相除法</h2><p>$gcd(a, b)&#x3D;gcd(b,a\\ mod\\ b)&#x3D;···&#x3D;gcd(n,0)$</p>\n<pre><code class=\"c++\">int gcd(int a, int b)&#123;\n    return b ? gcd(b, a % b) : a;\n&#125;\n</code></pre>\n<h2 id=\"欧拉质数筛\"><a href=\"#欧拉质数筛\" class=\"headerlink\" title=\"欧拉质数筛\"></a>欧拉质数筛</h2><h4 id=\"时间复杂度-O-n\"><a href=\"#时间复杂度-O-n\" class=\"headerlink\" title=\"时间复杂度$O(n)$\"></a>时间复杂度$O(n)$</h4><pre><code class=\"c++\">const int N = 1e8 + 10;\nint p[N], cnt;\nbool st[N];\nvoid get_primes(int n)&#123;\n    for(int i = 2; i &lt;= n; i++)&#123;\n        if(!st[i]) p[cnt++] = i;\n        for(int j = 0; i * p[i] &lt;= n; j++)&#123;\n            st[p[j] * i] = true;\n            if(i % p[j] == 0) break;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "数论"
            ]
        },
        {
            "id": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "url": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "title": "树的直径",
            "date_published": "2023-01-08T08:58:43.000Z",
            "content_html": "<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nstruct Node&#123;\n    int id, w;\n&#125;;\n\nvector&lt;Node&gt; m[N];\nint dist[N];\nint n;\n\nvoid dfs(int idx, int root, int dst)&#123;\n    dist[idx] = dst;\n    for(auto node : m[idx])\n        if(node.id != root)\tdfs(node.id, idx, dst + node.w);\n&#125;\n\nint main()&#123;\n    int p, q, d, t;\n    cin &gt;&gt; n;\n    t = n - 1;\n    while(t--)&#123;\n        scanf(&quot;%d%d%d&quot;, &amp;p, &amp;q, &amp;d);\n        m[p].push_back(&#123;q, d&#125;);\n        m[q].push_back(&#123;p, d&#125;);\n    &#125;\n    dfs(1, -1, 0);\n    int idx = 1;\n    for(int i = 1; i &lt;= n; i++)\n        if(dist[i] &gt; dist[idx]) idx = i;\n    dfs(idx, -1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        if(dist[i] &gt; dist[idx]) idx = i;\n    idx = dist[idx];\n    printf(&quot;%lld&quot;, 10 * idx + (1ll + idx) * idx / 2);\t\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "title": "BFS模板",
            "date_published": "2023-01-05T09:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行，</p>\n<p>对于每一组数据，输出吃到奶酪的最少单位时间。</p>\n<p>若无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p>\n<p>在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h6 id=\"二维\"><a href=\"#二维\" class=\"headerlink\" title=\"二维\"></a>二维</h6><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 210;\n\n// 方向偏移量\nint dx[4] = &#123;-1, 0, 1, 0&#125;;\nint dy[4] = &#123;0, 1, 0, -1&#125;;\n// 距离\nint dist[N][N];\nint n, m;\npair&lt;int, int&gt; start;\npair&lt;int, int&gt; ed;\n// 迷宫\nchar g[N][N];\n\nint bfs(pair&lt;int, int&gt; s, pair&lt;int, int&gt; e)&#123;\n    queue&lt;pair&lt;int, int&gt;&gt; q;\n    memset(dist, -1, sizeof dist);\n\n    dist[s.first][s.second] = 0;\t\t\t\t\t\t// 起点\n    q.push(s);\n\n    while(!q.empty())&#123;\n        pair&lt;int, int&gt; t = q.front();\n        q.pop();\n\n        if(t == e) return dist[t.first][t.second];\t\t\t// 判断是否终点\n\n        for(int i = 0; i &lt; 4; i++)&#123;\n            int x = t.first + dx[i];\n            int y = t.second + dy[i];\n            if(x &lt; 0 || y &lt; 0 || x &gt;= n || y &gt;= m) continue;\t// 越界\n            if(g[x][y] == &#39;#&#39;) continue;\t\t\t\t// 碰墙\n            if(dist[x][y] != -1) continue;\t\t\t\t// 已遍历\n\n            dist[x][y] = dist[t.first][t.second] + 1;\t\t// 距离加一\n            q.push(&#123;x, y&#125;);\n        &#125;\n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--)&#123;\n        scanf(&quot;%d %d&quot;, &amp;n, &amp;m);\n        for(int i = 0; i &lt; n; i++) scanf(&quot;%s&quot;, g[i]);\n        for(int i = 0; i &lt; n; i++)&#123;\n            for(int j = 0; j &lt; m; j++)&#123;\n                if(g[i][j] == &#39;S&#39;) start = &#123;i, j&#125;;\n                if(g[i][j] == &#39;E&#39;) ed = &#123;i, j&#125;;\n            &#125;\n        &#125;\n\n        int d = bfs(start, ed);\n        if(d == -1) printf(&quot;oop!\\n&quot;);\n        else printf(&quot;%d\\n&quot;, d);\n    &#125;\n\n\n    return 0;\n&#125;\n</code></pre>\n<h5 id=\"三维\"><a href=\"#三维\" class=\"headerlink\" title=\"三维\"></a>三维</h5><pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 101;\n\npair&lt;int, pair&lt;int, int&gt;&gt; start, ed, tmp;\nchar g[N][N][N];\nint st[N][N][N];\nint dy[4] = &#123;-1, 0, 1, 0&#125;;\nint dz[4] = &#123;0, -1, 0, 1&#125;;\nint l, r, c;\n\nint bfs(pair&lt;int, pair&lt;int, int&gt;&gt; s, pair&lt;int, pair&lt;int, int&gt;&gt; e)&#123;\n    memset(st, -1, sizeof st);\n    queue&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; q;\n    st[s.first][s.second.first][s.second.second] = 0;\n    q.push(s);\n\n    while(!q.empty())&#123;\n        tmp = q.front();\n        q.pop();\n        if(tmp == e) return st[tmp.first][tmp.second.first][tmp.second.second];\n    \n        int x = tmp.first, y, z;\n    \n        if(x + 1 &lt; l &amp;&amp; st[x + 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x + 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x + 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x + 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n        if(x - 1 &gt;= 0 &amp;&amp; st[x - 1][tmp.second.first][tmp.second.second] == -1 &amp;&amp; g[x - 1][tmp.second.first][tmp.second.second] != &#39;#&#39;)&#123;\n            st[x - 1][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x - 1, &#123;tmp.second.first, tmp.second.second&#125;&#125;);\n        &#125;\n    \n        for(int i = 0; i &lt; 4; i++)&#123;\n            y = tmp.second.first + dy[i];\n            z = tmp.second.second + dz[i];\n            if(st[x][y][z] != -1) continue;\n            if(y &lt; 0 || z &lt; 0 || y &gt;= r || z &gt;= c) continue;\n            if(g[x][y][z] == &#39;#&#39;) continue;\n        \n            st[x][y][z] = st[tmp.first][tmp.second.first][tmp.second.second] + 1;\n            q.push(&#123;x, &#123;y, z&#125;&#125;);\n        &#125;\n    \n    \n    &#125;\n\n    return -1;\n&#125;\n\nint main()&#123;\n    while(1)&#123;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;\n        if(l == 0) break;\n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++) \n                scanf(&quot;%s&quot;, g[i][j]);\n    \n        for(int i = 0; i &lt; l; i++)\n            for(int j = 0; j &lt; r; j++)\n                for(int z = 0; z &lt; c; z++)\n                    if(g[i][j][z] == &#39;S&#39;) start = &#123;i, &#123;j, z&#125;&#125;;\n                    else if(g[i][j][z] == &#39;E&#39;) ed = &#123;i, &#123;j, z&#125;&#125;;\n    \n        int step = bfs(start, ed);\n        if(step == -1) printf(&quot;Trapped!\\n&quot;);\n        else printf(&quot;Escaped in %d minute(s).\\n&quot;, step);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "title": "线段树 / 树状数组 模板",
            "date_published": "2022-12-30T13:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>给定 <strong>n</strong> 个数组成的一个数列，规定有两种操作，一是修改某个元素，二是求子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含两个整数 <strong>n</strong> 和 <strong>m</strong>，分别表示数的个数和操作次数。</p>\n<p>第二行包含 <strong>n</strong> 个整数，表示完整数列。</p>\n<p>接下来 <strong>m</strong> 行，每行包含三个整数 <strong>k</strong>,<strong>a</strong>,<strong>b</strong> （<strong>k&#x3D;0</strong>，表示求子数列 <strong>[a,b]</strong> 的和；<strong>k&#x3D;1</strong>，表示第 <strong>a</strong> 个数加 <strong>b</strong>）。</p>\n<p>数列从 <strong>1</strong> 开始计数。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出若干行数字，表示 <strong>k</strong>&#x3D;<strong>0</strong> 时，对应的子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>n</strong>≤<strong>100000</strong>,<br><strong>1</strong>≤<strong>m</strong>≤<strong>100000，<br>1</strong>≤<strong>a</strong>≤<strong>b</strong>≤<strong>n</strong>,<br>数据保证在任何时候，数列中所有元素之和均在 int 范围内。</p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>10 5\n1 2 3 4 5 6 7 8 9 10\n1 1 5\n0 1 3\n0 4 8\n1 7 5\n0 4 8\n</code></pre>\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre><code>11\n30\n35\n</code></pre>\n<h4 id=\"树状数组模板\"><a href=\"#树状数组模板\" class=\"headerlink\" title=\"树状数组模板\"></a>树状数组模板</h4><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint arr[N], tr[N];\n\nint lowbit(int i)&#123;\n    return i &amp; -i;\n&#125;\n\nvoid add(int index, int x)&#123;\n    for(int i = index; i &lt;= n; i += lowbit(i))\n        tr[i] += x;\n    return;\n&#125;\n\nvoid change(int index, int x)&#123;\n    int c = x - arr[index];\n    for(int i = index; i &lt;= n; i += lowbit(i))\n        tr[i] += c;\n    return;\n&#125;\n\nint query(int index)&#123;\n    int res = 0;\n    for(int i = index; i; i -= lowbit(i))\n        res += tr[i];\n    return res;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;arr[i]);\n    for(int i = 1; i &lt;= n; i++) add(i, arr[i]);\n\n    while(m--)&#123;\n        int tag, l, r;\n        int res;\n        scanf(&quot;%d %d %d&quot;, &amp;tag, &amp;l, &amp;r);\n        if(tag) add(l, r);\n        else printf(&quot;%d\\n&quot;, query(r) - query(l - 1));\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"线段树模板\"><a href=\"#线段树模板\" class=\"headerlink\" title=\"线段树模板\"></a>线段树模板</h4><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint num[N];\n\nstruct node&#123;\n    int l, r;\n    int sum;\n&#125;sgt[N * 4];\t\t// 需要开N * 4\n\n// 更新当前节点\nvoid pushup(int root)&#123;\n    sgt[root].sum = sgt[root &lt;&lt; 1].sum + sgt[root &lt;&lt; 1 | 1].sum;\n&#125;\n\n// 初始化线段树\nvoid build(int root, int l, int r)&#123;\n    if(l == r) sgt[root].sum = num[l];\n    else&#123;\n        sgt[root] = &#123;l, r&#125;;\n        int mid = l + r &gt;&gt; 1;\n        build(root &lt;&lt; 1, l, mid);\n        build(root &lt;&lt; 1 | 1, mid + 1, r);\n        pushup(root);\n    &#125;\n    return;\n&#125;\n\nint query(int root, int l, int r)&#123;\n    if(sgt[root].l &gt;= l &amp;&amp; sgt[root].r &lt;= r) return sgt[root].sum;\n    int mid = sgt[root].l + sgt[root].r &gt;&gt; 1;\n    int sum = 0;\n    if(l &lt;= mid) sum += query(root &lt;&lt; 1, l, r);\n    if(r &gt; mid) sum += query(root &lt;&lt; 1 | 1, l, r);\n    return sum;\n&#125;\n\nvoid modify(int root, int index, int c)&#123;\n    if(sgt[root].l == sgt[root].r) sgt[root].sum += c;\n    else&#123;\n        int mid = sgt[root].l + sgt[root].r &gt;&gt; 1;\n        if(index &lt;= mid) modify(root &lt;&lt; 1, index, c);\n        else modify(root &lt;&lt; 1 | 1, index, c);\n        pushup(root);\n    &#125;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;num[i]);\n    build(1, 1, n);\n    int k, a, b;\n    while(m--)&#123;\n        scanf(&quot;%d %d %d&quot;, &amp;k, &amp;a, &amp;b);\n        if(k) modify(1, a, b);\n        else printf(&quot;%d\\n&quot;, query(1, a, b));\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法模板"
            ]
        },
        {
            "id": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "url": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "title": "stringstream 字符串转 int/double",
            "date_published": "2022-12-27T12:29:00.000Z",
            "content_html": "<p>某涉密单位下发了某种票据，并要在年终全部收回。</p>\n<p>每张票据有唯一的ID号。</p>\n<p>全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</p>\n<p>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</p>\n<p>你的任务是通过编程，找出断号的ID和重号的ID。</p>\n<p>假设断号不可能发生在最大和最小号。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含整数 <strong>N</strong>，表示后面共有 <strong>N</strong> 行数据。</p>\n<p>接下来 <strong>N</strong> 行，每行包含空格分开的若干个（不大于100个）正整数（不大于100000），每个整数代表一个ID号。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>要求程序输出1行，含两个整数 <strong>m</strong>,<strong>n</strong>用空格分隔。</p>\n<p>其中，<strong>m</strong>表示断号ID，<strong>n</strong>表示重号ID。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>N</strong>≤<strong>100</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>2\n5 6 8 11 9 \n10 12 9\n</code></pre>\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre><code>7 9\n</code></pre>\n<h4 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h4><pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint a[10001];\nint c, n;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    string line;\n    getline(cin, line);\t\\\\ cin 会读取换行符\n    while(n--)&#123;\n        getline(cin, line);\n        stringstream ssin(line);\n        while(ssin &gt;&gt; a[c])&#123;\n            c++;\n        &#125;\n    &#125;\n    sort(a, a + c);\n    int r1, r2;\n    for(int i = 1; i &lt; c; i++)&#123;\n        if(a[i] == a[i - 1]) r1 = a[i];\n        if(a[i] - 2 == a[i - 1]) r2 = a[i] - 1;\n    &#125;\n    cout &lt;&lt; r2 &lt;&lt; &quot; &quot; &lt;&lt; r1;\n\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"stringstream技巧：\"><a href=\"#stringstream技巧：\" class=\"headerlink\" title=\"stringstream技巧：\"></a>stringstream技巧：</h4><h5 id=\"转int-x2F-double\"><a href=\"#转int-x2F-double\" class=\"headerlink\" title=\"转int&#x2F;double\"></a>转int&#x2F;double</h5><pre><code class=\"c++\">string result = &quot;10000&quot;;\t// double 同理, result = &quot;1.5&quot;;\nstringstream stream(result);\t// 可以是字符串也可以是数字，总之后面直接输入到目标变量里面\nint n = 0;\nstream &gt;&gt; n;\t//n 等于10000\n</code></pre>\n<h5 id=\"转int-x2F-double数组\"><a href=\"#转int-x2F-double数组\" class=\"headerlink\" title=\"转int&#x2F;double数组\"></a>转int&#x2F;double数组</h5><p><code>stringstream</code>以空格作为分隔符</p>\n<pre><code class=\"c++\">string str = &quot;1 2 3 4 5&quot;;\t// double 同理\nstringstream ssin(str);\nint i = 0;\nint a[10] = &#123;0&#125;;\nwhile(ssin &gt;&gt; a[i]) i++;\t// 此时a[0] = 1, a[1] = 2 ...\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "url": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "title": "在整数运算里处理浮点数",
            "date_published": "2022-12-25T08:23:44.000Z",
            "content_html": "<p><code>n = m / 2</code> 可以写成 <code>n * 2 = m</code></p>\n<p>同理：</p>\n<p><code>n &lt; m / 2</code> -&gt; <code>n * 2 &lt; m</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "url": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "title": "AcWing 95. 费解的开关",
            "date_published": "2022-12-21T11:02:00.000Z",
            "content_html": "<p>你玩过“拉灯”游戏吗？</p>\n<p><strong>25</strong> 盏灯排成一个 <strong>5</strong>×<strong>5</strong> 的方形。</p>\n<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>\n<p>每一步，游戏者可以改变某一个灯的状态。</p>\n<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>\n<p>我们用数字 <strong>1</strong> 表示一盏开着的灯，用数字 <strong>0</strong> 表示关着的灯。</p>\n<p>下面这种状态</p>\n<pre><code>10111\n01101\n10111\n10000\n11011\n</code></pre>\n<p>在改变了最左上角的灯的状态后将变成：</p>\n<pre><code>01111\n11101\n10111\n10000\n11011\n</code></pre>\n<p>再改变它正中间的灯后状态将变成：</p>\n<pre><code>01111\n11001\n11001\n10100\n11011\n</code></pre>\n<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 <strong>6</strong>6 步以内使所有的灯都变亮。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行输入正整数 <strong>n</strong>，代表数据中共有 <strong>n</strong> 个待解决的游戏初始状态。</p>\n<p>以下若干行数据分为 <strong>n</strong> 组，每组数据有 <strong>5</strong> 行，每行 <strong>5</strong> 个字符。</p>\n<p>每组数据描述了一个游戏的初始状态。</p>\n<p>各组数据间用一个空行分隔。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>一共输出 <strong>n</strong> 行数据，每行有一个小于等于 <strong>6</strong> 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>\n<p>对于某一个游戏初始状态，若 <strong>6</strong> 步以内无法使所有灯变亮，则输出 <strong>−1</strong>。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>0</strong>&lt;<strong>n</strong>≤<strong>500</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><pre><code>3\n00111\n01011\n10001\n11010\n11100\n\n11101\n11101\n11110\n11111\n11111\n\n01111\n11111\n11111\n11111\n11111\n</code></pre>\n<p>输出样例：</p>\n<pre><code>3\n2\n-1\n</code></pre>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint light[7][7], backup[7][7];\n\nvoid turn(int x, int y)&#123;\n    backup[x][y] = !backup[x][y];\n    backup[x - 1][y] = !backup[x - 1][y];\n    backup[x][y - 1] = !backup[x ][y - 1];\n    backup[x + 1][y] = !backup[x + 1][y];\n    backup[x][y + 1] = !backup[x][y + 1];\n&#125;\n\nint main()&#123;\n    int n;\n    string str;\n    str.resize(7);\n    scanf(&quot;%d&quot;, &amp;n);\n    for(int i = 0; i &lt; n; i++)&#123;\n        int res = 10;\n\n        for(int x = 1; x &lt;= 5; x++)&#123;\n            string str;\n            scanf(&quot;%s&quot;, &amp;str[0]);\n            for(int y = 1; y &lt;= 5; y++)\n                light[x][y] = str[y - 1] - &#39;0&#39;;\n        &#125;\n        // 枚举操作而非状态\n        // 01001 表示操作第2和第5盏灯\n        for(int k = 0; k &lt; 32; k++)&#123;\n            memcpy(backup, light, sizeof light);\n            int step = 0;\n            for(int j = 1; j &lt;= 5; j++)&#123;\n                if((k &gt;&gt; (j - 1)) &amp; 1)&#123;\n                    turn(1, j);\n                    step++;\n                &#125;\n            &#125;\n\n            for(int j = 2; j &lt;= 5; j++)&#123;\n                for(int l = 1; l &lt;= 5; l++)&#123;\n                    if(backup[j - 1][l] == 0)&#123;\n                        turn(j, l);\n                        step++;\n                    &#125;\n                &#125;\n            &#125;\n            bool dark = false;\n            for(int j = 1; j &lt;= 5; j++)&#123;\n                if(backup[5][j] != 1)&#123;\n                    dark = true;\n                    break;\n                &#125;\n            &#125;\n            if(!dark)&#123;\n                res = min(res, step);\n            &#125;\n\n        &#125;\n        if(res == 10 || res &gt; 6) res = -1;\n\n        cout &lt;&lt; res;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/10/DFS%E5%88%A4%E6%96%AD%E8%BF%B7%E5%AE%AB%E6%97%A0%E8%A7%A3/",
            "url": "http://example.com/2022/11/10/DFS%E5%88%A4%E6%96%AD%E8%BF%B7%E5%AE%AB%E6%97%A0%E8%A7%A3/",
            "title": "DFS判断迷宫无解",
            "date_published": "2022-11-10T00:54:26.000Z",
            "content_html": "<p>回溯到原点既无解</p>\n<pre><code class=\"c++\">if(src_x == x &amp;&amp; src_y == y)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "title": "Map 单词分析",
            "date_published": "2021-11-08T07:30:00.000Z",
            "content_html": "<p><strong>蓝桥杯无法使用<code>for(x : y)&#123;&#125;</code> 、 <code>auto</code>等的C11语法和关键字</strong></p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nmap&lt;char, int&gt; m;\n\nint main(void)&#123;\n    string str;\n    char mc;\n    int s = 0;\n    for(int i = 97; i &lt;= 122; i++)&#123;\n        m.insert(make_pair((char)i, 0));\n    &#125;\n    cin &gt;&gt; str;\n    for(int i = 0; i &lt; str.size(); i++)&#123;\n        m[str[i]]++;\n    &#125;\n    for(map&lt;char, int&gt;::iterator i = m.begin(); i != m.end(); i++)&#123;\n        if(s &lt; i-&gt;second) mc = i-&gt;first, s = i-&gt;second;\t\t// 记录次数\n    &#125;\n    cout &lt;&lt; mc &lt;&lt; endl &lt;&lt; m[mc];\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "DFS迷宫问题",
            "date_published": "2021-11-08T06:36:00.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\n#pragma GCC optimize(2)\nusing namespace std;\n\nint m[101][101];\nint xS, yS, xE, yE;\nint s;\n\nvoid dfs(int x, int y)&#123;\n    if(x == xE &amp;&amp; y == yE)&#123;\n        s++;\n        return;\n    &#125;else&#123;\t\t// 遍历四个方向 \n        m[x][y] = 0;\n        if(m[x + 1][y])&#123;\n            m[x + 1][y] = 0;\t\t// 占位，防止死循环 \n            dfs(x + 1, y);\n            m[x + 1][y] = 1;\n        &#125;\n        if(m[x - 1][y])&#123;\n            m[x - 1][y] = 0;\n            dfs(x - 1, y);\n            m[x - 1][y] = 1;\n        &#125;\n        if(m[x][y + 1])&#123;\n            m[x][y + 1] = 0;\n            dfs(x, y + 1);\n            m[x][y + 1] = 1;\n        &#125;\n        if(m[x][y - 1])&#123;\n            m[x][y - 1] = 0;\n            dfs(x, y - 1);\n            m[x][y - 1] = 1;\n        &#125;\n    &#125;\n&#125;\n\nint main(void)&#123;\n    ios::sync_with_stdio(false);\n    int x, y, k, Ox, Oy;\n    cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n    for(int i = 1; i &lt;= x; i++)\t// 棋盘预定义\n        for(int j = 1; j &lt;= y; j++)\n            m[i][j] = 1;\n    cin &gt;&gt; xS &gt;&gt; yS &gt;&gt; xE &gt;&gt; yE;\n    for(int i = 0; i &lt; k; i++)&#123;\t// 预先写入障碍\n        cin &gt;&gt; Ox &gt;&gt; Oy;\n        m[Ox][Oy] = 0;\n    &#125;\n    dfs(xS, yS);\n    cout &lt;&lt; s;\n\n    return 0;\n&#125; \n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "Vector 二分查找",
            "date_published": "2021-11-04T07:39:00.000Z",
            "content_html": "<p>二分查找：</p>\n<ul>\n<li>lower_bound：查找第一个大于或等于某个元素的位置。</li>\n<li>upper_bound：查找第一个大于某个元素的位置。</li>\n</ul>\n<p>Vector 插入元素</p>\n<ul>\n<li>iterator insert(iterator it, const T&amp; x)：iterator向量中迭代器指向元素前增加一个元素x</li>\n<li>iterator insert(iterator it, int n,const T&amp; x)：向量中迭代器指向元素前增加n个相同的元素x</li>\n<li>iterator insert(iterator it, const_iterator first, const_iterator last)：向量中迭代器指向元素前插入另一个相同类型向量的[first, last)间的数据</li>\n</ul>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(void)&#123;\n    vector&lt;int&gt; arr;\n    int t, k, a;\n    for(int i = 0; i &lt; 9; i++)&#123;\n        cin &gt;&gt; t;\n        arr.push_back(t);\n    &#125;\n    cin &gt;&gt; k;\n    auto pos = upper_bound(arr.begin(), arr.end(), k); \t// vector&lt;int&gt;::iterator\n    arr.insert(pos, k);\n    for(int i = 0; i &lt; 10; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n\n    return 0;\n&#125; \n</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "title": "二叉树模板",
            "date_published": "2021-10-28T09:03:28.000Z",
            "content_html": "<pre><code>#include&lt;bits/stdc++.h&gt;\n#pragma GCC optimize(2)\nusing namespace std;\n\nstruct tree&#123;\n    int left;\n    int right;\n&#125;;\n\ntree t[1000];\n\nint dfs(int n)&#123;\t\t// 深度 \n    if(!n) return 0;\n    return max(dfs(t[n].left), dfs(t[n].right)) + 1;\n&#125;\n\nvoid f(int n)&#123;\t\t// 先序 \n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n    if(t[n].left) f(t[n].left);\n    if(t[n].right) f(t[n].right);\n&#125;\n\nvoid s(int n)&#123;\t\t// 中序 \n    if(t[n].left) s(t[n].left);\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n    if(t[n].right) s(t[n].right);\n&#125;\n\nvoid e(int n)&#123;\t\t// 后序 \n    if(t[n].left) e(t[n].left);\n    if(t[n].right) e(t[n].right);\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n&#125;\n\nint main(void)&#123;\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; t[i].left &gt;&gt; t[i].right;\n    \n    return 0;\n&#125; \n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "url": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "title": "卡常小技巧，肆无忌惮STL",
            "date_published": "2021-10-28T08:25:00.000Z",
            "content_html": "<pre><code>#pragma GCC optimize(2)\nios::sync_with_stdio(false);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/15/%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "url": "http://example.com/2021/10/15/%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "title": "类型字符串提取数字",
            "date_published": "2021-10-15T09:26:16.000Z",
            "content_html": "<p>洛谷P1615</p>\n<pre><code>cin &gt;&gt; time1\nsscanf(time1.c_str(), &quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1); // c_str()获取字符串地址\n// 或者直接这样写 scanf(&quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1);\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "url": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "title": "P2911 [USACO08OCT]Bovine Bones G (C)",
            "date_published": "2021-10-01T12:40:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/10/01/dcA2xWtmfYQRaqD.png\" alt=\"image.png\"></p>\n<pre><code>/*\n    根据题意，总共3个骰子，每个骰子有 S个面，因为数据范围较小，可以直接选择暴力\n    每次总和记录到相应的结构体(Sum = 10 -&gt; struct[10])，结构体中保存两个数据：总和(num)、次数(times) \n    最后使用快排(qsort)筛出次数(times)最小的目标 \n*/ \n\n#include&lt;stdio.h&gt;\n\nstruct A&#123;\t\t// 声明结构体，存放点数总和与次数 \n    int num;\n    int times;\n&#125;;\n\nint compare(const void *a, const void *b)&#123;\n    struct A *p1 = (struct A *)a;\n    struct A *p2 = (struct A *)b;\n    if(p1-&gt;times == p2-&gt;times) return p1-&gt;num - p2-&gt;num;\t\t// 题意：如果出现概率一样时输出最小总和 \n    return p2-&gt;times - p1-&gt;times;\n&#125;\n\nint main(void)&#123;\n    int s1, s2, s3, s, i, j, k;\n    struct A a[80];\n    scanf(&quot;%d %d %d&quot;, &amp;s1, &amp;s2, &amp;s3);\n    for(i = 0; i &lt; 81; i++)&#123;\n         a[i].times = 0;\n         a[i].num = 0;\n    &#125;\n    for(i = 1; i &lt;= s1; i++)\n        for(j = 1; j &lt;= s2; j++)\n            for(k = 1; k &lt;= s3; k++)&#123;\n                a[i + j + k].num = i + j + k;\n                a[i + j + k].times++;\n            &#125;\n\n    qsort(a, 80, sizeof(struct A), compare);\n    printf(&quot;%d&quot;, a[0].num);\n\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "url": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "title": "冒泡排序 C语言",
            "date_published": "2021-09-11T09:10:00.000Z",
            "content_html": "<pre><code>#include&lt;stdio.h&gt;\n\n/* 交换函数\nvoid swap(int *pa, int *pb)&#123;\n    int temp;\n    if(*pa &gt; *pb)&#123;\n        temp = *pb;\n        *pb = *pa;\n        *pa = temp; \n    &#125;\n&#125;\n*/\n\nint main(void)&#123;\n    int a[] = &#123;1, 3, 5, 2, 14, 8, 4 ,9&#125;;\n    int i, j;\n    int temp;\n    int num = (sizeof(a) / sizeof(a[0]));\n    printf(&quot;排序前：&quot;);\n    for(i = 0; i &lt; num; i++)&#123;\n        printf(&quot;%d &quot;, a[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    // 冒泡 \n    for(i = 0; i &lt; num; i++)&#123;\t\t// 游标 \n        for(j = i; j &lt; num - 1; j++)&#123;\t\t// 两两比较 \n            if(a[j] &gt; a[j + 1])&#123;\n                temp = a[j + 1];\n                a[j + 1] = a[j];\n                a[j] = temp;\n            &#125;\n            // swap((a + j), (a + j + 1));\n        &#125;\n    &#125;\n\n    printf(&quot;排序后：&quot;);\n    for(i = 0; i &lt; num; i++)&#123;\n        printf(&quot;%d &quot;, a[i]);\n    &#125;\n    return 1;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "url": "http://example.com/2021/09/04/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98%E7%BB%AD%EF%BC%88C%EF%BC%89/",
            "title": "P1223 排队接水问题续（C）",
            "date_published": "2021-09-04T10:32:00.000Z",
            "content_html": "<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nconst MAX = 1500;\n\n//创建结构体 \nstruct P&#123;\n    int id;\n    int time;\n&#125;;\n\n//排序函数 \nint comp(const void *p1, const void *p2)\n&#123;\n    const struct P *ps1 = (struct P *)p1;\n    const struct P *ps2 = (struct P *)p2;\t\n    if(ps1-&gt;time != ps2-&gt;time)\n        return ps1-&gt;time - ps2-&gt;time;\n    else\n        return ps1-&gt;id - ps2-&gt;id;\n&#125;\n\nint main()\n&#123;\n    struct P p[MAX];\n    int count = 0;\t\t//声明总人数 \n    int i, j;\n    double sum = 0.0; \n    scanf(&quot;%d&quot;, &amp;count);\n    for(i = 0; i &lt; count; i++)\t\t//创建(id , time)散列表 \n    &#123;\n        p[i].id = (i + 1);\n        scanf(&quot;%d&quot;, &amp;p[i].time);\n    &#125;\n    qsort(p, count, sizeof(p[1]), comp);\t\t//快排 \n    for(j = 0; j &lt; count; j++)\t\t//贪心算法求和计算总等待时间 \n        sum += p[j].time * (count - j - 1); \n    for(j = 0; j &lt; count; j++)\t\t//输出最优顺序 \n    &#123;\n        printf(&quot;%d &quot;,p[j].id);\n    &#125;\n    printf(&quot;\\n&quot;);\n    printf(&quot;%.2lf\\n&quot;, sum / count);\t\t//输出平均等待时间 \n    return 0;\n&#125;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21pb2UueHl6L2luZGV4LnBocC9hcmNoaXZlcy80Mi8=\">Python解法</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "url": "http://example.com/2021/06/02/P1223_%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4_python/",
            "title": "P1223 排队接水 python",
            "date_published": "2021-06-02T13:10:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/06/02/kzh7MsgTyiPWaUK.png\" alt=\"P1223 排队接水\"></p>\n<pre><code>n = int(input())\nlist1 = list(map(int, input().split()))\nc = 1\nsum1 = 0\nlist2 = []\nfor i in range(n):\n    list2.append(&#123;&quot;id&quot;: i + 1, &quot;time&quot;: list1[i]&#125;)\nlist2.sort(key=lambda rank: rank[&quot;time&quot;])\nfor i in list2:\n    sum1 += i[&quot;time&quot;] * (n - c)\n    c += 1\nfor i in range(n):\n    if i == n - 1:\n        print(list2[i][&quot;id&quot;], end=&quot;&quot;)\n    else:\n        print(list2[i][&quot;id&quot;], end=&quot; &quot;)\nprint()\nprint(&quot;%.2f&quot; % (sum1/n))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "url": "http://example.com/2021/06/01/%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0_python/",
            "title": "回文质数 python",
            "date_published": "2021-06-01T12:02:49.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/1304133883.png\" alt=\"6-01-2.png\"></p>\n<p>洛谷卡了很长时间，最终还是没有AC，最后两个超时，可能是我回文判断选择用字符串的方式导致的,最后没办法了，选择下策直接打表AC。</p>\n<p>注：</p>\n<ol>\n<li>除 11 外没有偶数位的回文质数，那么[10000000,100000000] 这个区间根本不用枚举。</li>\n<li>只需要[2, sqrt(i) + 1]</li>\n</ol>\n<p>代码如下：</p>\n<pre><code>import math\na, b = map(int, input().split())\nlist1 = []\nif b &gt; 10000000:\n    b = 10000000\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            print(i)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "url": "http://example.com/2021/06/01/%E6%B4%9B%E8%B0%B7_P1106_%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98_python%E8%A7%A3%E6%B3%95/",
            "title": "洛谷 P1106 删数问题 python解法",
            "date_published": "2021-06-01T11:48:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/06/3479330492.png\" alt=\"6-01-1.png\"></p>\n<p>第一次提交时，因为读题不清，3个WA。一开始理解为依次删除最大数，例50074897 2得500747，结果一直WA，然后被迫下载测试数据，发现正确答案为 4897。</p>\n<p>思索了一番，发现是个贪心问题,还是用 50074897 2 举例:<br>        (1) 5 &gt; 0 , 删除5, 0074897<br>        (2) 0 &#x3D; 0 , 不动 0074897<br>        (3) 0 &#x3D; 0 , 同理 0074897<br>        (5) 7 &gt; 4 , 删除7，004897<br>        (6) 去零整理，答案为 4897<br>Python天下第一，代码如下：</p>\n<pre><code>m = input()\nn = int(input())\ni = 0   # 用于下标索引\nwhile quit:\n    # 边界默认和0比\n    if i + 1 == len(m):\n        m = m[:len(m) - 1]\n        n -= 1\n        i -= 1\n    # 判断是否单调递增\n    elif m[i] &lt;= m[i + 1]:\n        i += 1\n        continue\n    # 删除非递增项\n    else:\n        m = m.replace(m[i], &quot;&quot;, 1)\n        n -= 1\n        i -= 1\n    # 循环结束\n    if n == 0:\n        break\nprint(int(m))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/31/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",
            "title": "贪婪算法之背包问题",
            "date_published": "2021-05-31T13:54:41.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/05/33685418.png\" alt=\"5-31.png\"></p>\n<pre><code>coins, capacity = map(int, input().split())\nemt = []\nsum_coin = 0.0\nfor i in range(coins):\n    temp_weight, temp_coin = map(int, input().split())\n    emt.append(&#123;&#39;coin&#39;: temp_coin, &#39;weight&#39;: temp_weight, &#39;avg&#39;: temp_coin/temp_weight&#125;)\nemt.sort(key=lambda emt_d: emt_d[&#39;avg&#39;], reverse=True)\nfor i in range(len(emt)):\n    if capacity &gt;= emt[i][&#39;weight&#39;]:\n        sum_coin += emt[i][&#39;coin&#39;]\n        capacity -= emt[i][&#39;weight&#39;]\n    elif capacity &lt; emt[i][&#39;weight&#39;] and capacity != 0:\n        sum_coin += emt[i][&#39;avg&#39;] * capacity\n        break\nprint(&#39;%.2f&#39; % sum_coin)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/31/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B(D&amp;C%EF%BC%89/",
            "url": "http://example.com/2021/03/31/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B(D&amp;C%EF%BC%89/",
            "title": "分而治之(D&amp;C）",
            "date_published": "2021-03-31T10:15:00.000Z",
            "content_html": "<p><strong>分而治之（Ｄ＆Ｃ）</strong>能将问题逐步分解，但并非可用于解决问题的算法，而是一种解决问题的思路。</p>\n<p><strong>分而治之算法</strong>是递归的，使用分而治之(D&amp;C)解决问题的过程包括两个步骤：</p>\n<ol>\n<li>找出递归边界条件，这种条件必须尽可能简单</li>\n<li>不断地将问题分解（或者说缩小规模），直到符合递归边界条件。</li>\n</ol>\n<blockquote>\n<p><strong>注意</strong>：假设要将一块地均匀地分成方块，确保分出的方块最大的条件，应采取Ｄ＆Ｃ策略：适用于这小块地的最大方块，也是适用于整块地的最大方案。原因可参考欧几里得算法。</p>\n</blockquote>\n<hr>\n<p>给定一个数字数组　arr &#x3D; [2, 4, 6]，如何将这些数字相加</p>\n<ol>\n<li>找出递归边界条件：数组不包含任何元素或只包含一个元素</li>\n<li>每次递归调用都必须离空数组更近一步。</li>\n</ol>\n<p><strong>例如：</strong><br>    arr &#x3D; [2, 4, 6]<br>    sum(arr) &#x3D; 12</p>\n<pre><code>#等效于下面的语句\narr = [4, 6]\n2 + sum(arr) = 12\n\n#再等效下面的语句\narr = [6]\n2 + 6 + sum(arr) = 12\n\n#依次类推，逐渐缩小了问题的规模\n</code></pre>\n<blockquote>\n<p>注意：编写涉及数组的递归函数时，递归边界条件通常是数组为空或只包含一个元素。陷入困境时，请检查递归边界条件是不是这样的。</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "url": "http://example.com/2021/03/31/%E9%80%92%E5%BD%92_-_%E6%95%B0%E7%BB%84%E7%B4%AF%E5%8A%A0/",
            "title": "递归 - 数组累加",
            "date_published": "2021-03-31T10:01:00.000Z",
            "content_html": "<pre><code>def sum(a):\n    if a == []:\n        return 0    #基线条件\n    return a[0] + sum(a[1:])    #递归条件\n\nprint(sum(a))\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "url": "http://example.com/2021/03/28/%E8%BF%AD%E4%BB%A3_-_%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/",
            "title": "迭代 - 水仙花数",
            "date_published": "2021-03-28T07:13:27.000Z",
            "content_html": "<p>偶然发现了一种用迭代算水仙花，太顶了：</p>\n<pre><code>for i in range(100, 1000):\n    sum = 0\n    temp = i\n    while temp:   #开始迭代\n        sum = sum + (temp%10) ** 3\n        temp //= 10\n    if sum == i:\n        print(i)\n</code></pre>\n<p>例如 153 这个数</p>\n<ol>\n<li>先取出个位数 152 % 10 &#x3D;&#x3D; 2 ，再对 temp 去除个位 (temp &#x2F;&#x2F;&#x3D; 10) ,这时 temp 等于 15</li>\n<li>while 为真，循环上一次操作，对 15 取各位 ，同理 temp 此时为 1</li>\n<li>对 1 求模 ，1 &#x2F;&#x2F; 10 为 0，跳出循环，至此 1,5,3 全部取出</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/03/28/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E9%98%B6%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "title": "爱因斯坦的阶梯问题",
            "date_published": "2021-03-28T06:10:00.000Z",
            "content_html": "<h2 id=\"爱因斯坦的阶梯难题\"><a href=\"#爱因斯坦的阶梯难题\" class=\"headerlink\" title=\"爱因斯坦的阶梯难题\"></a>爱因斯坦的阶梯难题</h2><p>爱因斯坦曾出过这样一道有趣的数学题：有一个长阶梯，若每步上2阶，最后剩1阶；若每步上3阶，最后剩2阶；若每步上5阶，最后剩4阶；若每步上6阶，最后剩5阶；只有每步上7阶，最后刚好一阶也不剩。</p>\n<pre><code>i = 0\nwhile True:\n    if i % 2 == 1 and i % 3 == 2 and i % 5 == 4 and i % 6 == 5 and i % 7 == 0:\n        print(i)\n        break\n    else:\n        i += 1\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/03/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "二分查找",
            "date_published": "2021-03-21T07:53:00.000Z",
            "content_html": "<pre><code>def binary(list, item):         #二分查找\n    low = 0\n    high = len(list)\n    while low &lt;= high:\n        mid = int((low + high) / 2)\n        if list[mid] == item:\n            return mid\n        if list[mid] &lt;= item:\n            low = mid + 1         #中值已经比较过，直接从下一值开始，提高效率\n        if list[mid] &gt;= item:\n            high = mid - 1         #同理\n \n \nlist1 = [1, 3, 5, 7, 9, 11, 15, 16]         #二分查找测试\nprint(binary(list1, 9))\n</code></pre>\n",
            "tags": []
        }
    ]
}