{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"c/c++\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/02/07/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "url": "http://example.com/2023/02/07/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "title": "最小生成树",
            "date_published": "2023-02-07T11:45:54.000Z",
            "content_html": "<h1 id=\"最短生成树\"><a href=\"#最短生成树\" class=\"headerlink\" title=\"最短生成树\"></a>最短生成树</h1><h2 id=\"Prim\"><a href=\"#Prim\" class=\"headerlink\" title=\"Prim\"></a>Prim</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">505</span>, INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">intprim</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;   <span class=\"comment\">// 第一个点一定在最小生成树中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;  <span class=\"comment\">// 用来存放权值之和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[j] &lt; dist[t]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dist[t] == INF) <span class=\"keyword\">return</span> INF;   <span class=\"comment\">// 尽早跳出循环防止TLE，如果不加则需要在输出的地方更改</span></span><br><span class=\"line\">        res += dist[t];</span><br><span class=\"line\">        st[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++)</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], g[t][j]); <span class=\"comment\">// 注意和dijkstra的区别</span></span><br><span class=\"line\">                                             <span class=\"comment\">// prim的dist是到已经生成的树的最短距离</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">intmain</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> g);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m --)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        g[a][b] = g[b][a] = <span class=\"built_in\">min</span>(g[a][b], c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"built_in\">prim</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t == INF) cout &lt;&lt; <span class=\"string\">&quot;impossible&quot;</span> &lt;&lt; endl;  <span class=\"comment\">// 如果上面不及时跳出循环则在这里改为(t &gt;= INF / 2)</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kruskal\"><a href=\"#kruskal\" class=\"headerlink\" title=\"kruskal\"></a>kruskal</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">structNode&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, w;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"type\">const</span> Node &amp;N) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &lt; N.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;edges[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, res, cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">intfind</span>(<span class=\"type\">int</span> a)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a != g[a]) g[a] = <span class=\"built_in\">find</span>(g[a]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g[a];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">intkruskal</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class=\"line\">  </span><br><span class=\"line\">        a = <span class=\"built_in\">find</span>(a), b = <span class=\"built_in\">find</span>(b);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a != b) &#123;</span><br><span class=\"line\">            g[a] = b;</span><br><span class=\"line\">            res += w;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt &lt; n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">intmain</span>()&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        edges[i] = &#123;a, b, c&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) g[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edges, edges + m);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"built_in\">kruskal</span>();</span><br><span class=\"line\">    cout &lt;&lt; t;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "url": "http://example.com/2023/02/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/",
            "title": "字符串哈希",
            "date_published": "2023-02-02T08:36:57.000Z",
            "content_html": "<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1010</span>, P = <span class=\"number\">131</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> h[N], p[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">char</span> str[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gethash</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> h[r] - h[l - <span class=\"number\">1</span>] * p[r - l + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %s&quot;</span>, &amp;n, &amp;m, str + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">\t\tp[i] = p[i - <span class=\"number\">1</span>] * P;</span><br><span class=\"line\">\t\th[i] = h[i - <span class=\"number\">1</span>] * P + str[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> l1, r1, l2, r2;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">gethash</span>(l1, r1) == <span class=\"built_in\">gethash</span>(l2, r2)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "url": "http://example.com/2023/02/01/%E5%B0%8F%E6%A0%B9%E5%A0%86/",
            "title": "小根堆",
            "date_published": "2023-02-01T10:38:45.000Z",
            "content_html": "<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> hp[N], idx;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">down</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t = k;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hp[k &lt;&lt; <span class=\"number\">1</span>] &lt; hp[t] &amp;&amp; (k &lt;&lt; <span class=\"number\">1</span>) &lt;= idx) t = k &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(hp[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] &lt; hp[t] &amp;&amp; (k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>) &lt;= idx) t = k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t != k)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(hp[k], hp[t]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">down</span>(t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">up</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(k &gt;&gt; <span class=\"number\">1</span> &amp;&amp; hp[k &gt;&gt; <span class=\"number\">1</span>] &gt; hp[k])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(hp[k &gt;&gt; <span class=\"number\">1</span>], hp[k]);</span><br><span class=\"line\">\t\tk &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;y);</span><br><span class=\"line\">\t\t\thp[++idx] = y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">up</span>(idx);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x == <span class=\"number\">2</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, hp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> hp[<span class=\"number\">1</span>] = hp[idx], idx--, <span class=\"built_in\">down</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "模板"
            ]
        },
        {
            "id": "http://example.com/2023/01/30/KMP/",
            "url": "http://example.com/2023/01/30/KMP/",
            "title": "KMP",
            "date_published": "2023-01-30T10:25:00.000Z",
            "content_html": "<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100</span>, M = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">char</span> p[N], s[M];</span><br><span class=\"line\"><span class=\"type\">int</span> ne[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; p + <span class=\"number\">1</span> &gt;&gt; m &gt;&gt; s + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>, j = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j &amp;&amp; p[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">\t\tne[i] = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j &amp;&amp; s[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j == n)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, i - n);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "url": "http://example.com/2023/01/30/%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%EF%BC%89/",
            "title": "单调栈、滑动窗口（单调队列）",
            "date_published": "2023-01-30T09:07:00.000Z",
            "content_html": "<h4 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> stk[N], arr[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(t &amp;&amp; arr[i] &lt;= stk[t]) t--;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t) cout &lt;&lt; stk[t] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tstk[++t] = arr[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> arr[N], q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> h = <span class=\"number\">0</span>, r = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(h &lt;= r &amp;&amp; i - k + <span class=\"number\">1</span> &gt; q[h]) h++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(h &lt;= r &amp;&amp; arr[q[r]] &gt;= arr[i]) r--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tq[++r] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &gt;= k - <span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, arr[q[h]]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "url": "http://example.com/2023/01/20/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/",
            "title": "双指针数组去重",
            "date_published": "2023-01-20T12:23:01.000Z",
            "content_html": "<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n; </span><br><span class=\"line\"><span class=\"type\">int</span> arr[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> j = <span class=\"number\">0</span>;\t<span class=\"comment\">// 非重复个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!i || arr[i] != arr[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\tarr[j++] = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "url": "http://example.com/2023/01/08/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/",
            "title": "树的直径",
            "date_published": "2023-01-08T08:58:43.000Z",
            "content_html": "<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> id, w;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;Node&gt; m[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> idx, <span class=\"type\">int</span> root, <span class=\"type\">int</span> dst)</span></span>&#123;</span><br><span class=\"line\">\tdist[idx] = dst;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node : m[idx])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node.id != root)\t<span class=\"built_in\">dfs</span>(node.id, idx, dst + node.w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> p, q, d, t;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tt = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;p, &amp;q, &amp;d);</span><br><span class=\"line\">\t\tm[p].<span class=\"built_in\">push_back</span>(&#123;q, d&#125;);</span><br><span class=\"line\">\t\tm[q].<span class=\"built_in\">push_back</span>(&#123;p, d&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dist[i] &gt; dist[idx]) idx = i;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dist[i] &gt; dist[idx]) idx = i;</span><br><span class=\"line\">\tidx = dist[idx];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, <span class=\"number\">10</span> * idx + (<span class=\"number\">1ll</span> + idx) * idx / <span class=\"number\">2</span>);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/01/05/BFS%E6%A8%A1%E6%9D%BF/",
            "title": "BFS模板",
            "date_published": "2023-01-05T09:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行，</p>\n<p>对于每一组数据，输出吃到奶酪的最少单位时间。</p>\n<p>若无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p>\n<p>在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><h6 id=\"二维\"><a href=\"#二维\" class=\"headerlink\" title=\"二维\"></a>二维</h6><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">210</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方向偏移量</span></span><br><span class=\"line\"><span class=\"type\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 距离</span></span><br><span class=\"line\"><span class=\"type\">int</span> dist[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; start;</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; ed;</span><br><span class=\"line\"><span class=\"comment\">// 迷宫</span></span><br><span class=\"line\"><span class=\"type\">char</span> g[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; s, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; e)</span></span>&#123;</span><br><span class=\"line\">\tqueue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdist[s.first][s.second] = <span class=\"number\">0</span>;\t\t\t\t\t\t<span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tq.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == e) <span class=\"keyword\">return</span> dist[t.first][t.second];\t\t\t<span class=\"comment\">// 判断是否终点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x = t.first + dx[i];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> y = t.second + dy[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span> || y &lt; <span class=\"number\">0</span> || x &gt;= n || y &gt;= m) <span class=\"keyword\">continue</span>;\t<span class=\"comment\">// 越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(g[x][y] == <span class=\"string\">&#x27;#&#x27;</span>) <span class=\"keyword\">continue</span>;\t\t\t\t<span class=\"comment\">// 碰墙</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dist[x][y] != <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;\t\t\t\t<span class=\"comment\">// 已遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdist[x][y] = dist[t.first][t.second] + <span class=\"number\">1</span>;\t\t<span class=\"comment\">// 距离加一</span></span><br><span class=\"line\">\t\t\tq.<span class=\"built_in\">push</span>(&#123;x, y&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin &gt;&gt; t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, g[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(g[i][j] == <span class=\"string\">&#x27;S&#x27;</span>) start = &#123;i, j&#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(g[i][j] == <span class=\"string\">&#x27;E&#x27;</span>) ed = &#123;i, j&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> d = <span class=\"built_in\">bfs</span>(start, ed);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d == <span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;oop!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三维\"><a href=\"#三维\" class=\"headerlink\" title=\"三维\"></a>三维</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">101</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; start, ed, tmp;</span><br><span class=\"line\"><span class=\"type\">char</span> g[N][N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> st[N][N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> dz[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> l, r, c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; s, pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; e)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(st, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> st);</span><br><span class=\"line\">\tqueue&lt;pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; q;</span><br><span class=\"line\">\tst[s.first][s.second.first][s.second.second] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tq.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\ttmp = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tmp == e) <span class=\"keyword\">return</span> st[tmp.first][tmp.second.first][tmp.second.second];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x = tmp.first, y, z;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x + <span class=\"number\">1</span> &lt; l &amp;&amp; st[x + <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] == <span class=\"number\">-1</span> &amp;&amp; g[x + <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] != <span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\tst[x + <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tq.<span class=\"built_in\">push</span>(&#123;x + <span class=\"number\">1</span>, &#123;tmp.second.first, tmp.second.second&#125;&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; st[x - <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] == <span class=\"number\">-1</span> &amp;&amp; g[x - <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] != <span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\tst[x - <span class=\"number\">1</span>][tmp.second.first][tmp.second.second] = st[tmp.first][tmp.second.first][tmp.second.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tq.<span class=\"built_in\">push</span>(&#123;x - <span class=\"number\">1</span>, &#123;tmp.second.first, tmp.second.second&#125;&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">\t\t\ty = tmp.second.first + dy[i];</span><br><span class=\"line\">\t\t\tz = tmp.second.second + dz[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(st[x][y][z] != <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(y &lt; <span class=\"number\">0</span> || z &lt; <span class=\"number\">0</span> || y &gt;= r || z &gt;= c) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(g[x][y][z] == <span class=\"string\">&#x27;#&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tst[x][y][z] = st[tmp.first][tmp.second.first][tmp.second.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tq.<span class=\"built_in\">push</span>(&#123;x, &#123;y, z&#125;&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; r; j++) </span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, g[i][j]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; r; j++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> z = <span class=\"number\">0</span>; z &lt; c; z++)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(g[i][j][z] == <span class=\"string\">&#x27;S&#x27;</span>) start = &#123;i, &#123;j, z&#125;&#125;;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(g[i][j][z] == <span class=\"string\">&#x27;E&#x27;</span>) ed = &#123;i, &#123;j, z&#125;&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> step = <span class=\"built_in\">bfs</span>(start, ed);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(step == <span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Trapped!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Escaped in %d minute(s).\\n&quot;</span>, step);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2022/12/30/%E7%BA%BF%E6%AE%B5%E6%A0%91___%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84_%E6%A8%A1%E6%9D%BF/",
            "title": "线段树 / 树状数组 模板",
            "date_published": "2022-12-30T13:40:00.000Z",
            "content_html": "<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>给定 <strong>n</strong> 个数组成的一个数列，规定有两种操作，一是修改某个元素，二是求子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含两个整数 <strong>n</strong> 和 <strong>m</strong>，分别表示数的个数和操作次数。</p>\n<p>第二行包含 <strong>n</strong> 个整数，表示完整数列。</p>\n<p>接下来 <strong>m</strong> 行，每行包含三个整数 <strong>k</strong>,<strong>a</strong>,<strong>b</strong> （<strong>k&#x3D;0</strong>，表示求子数列 <strong>[a,b]</strong> 的和；<strong>k&#x3D;1</strong>，表示第 <strong>a</strong> 个数加 <strong>b</strong>）。</p>\n<p>数列从 <strong>1</strong> 开始计数。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出若干行数字，表示 <strong>k</strong>&#x3D;<strong>0</strong> 时，对应的子数列 <strong>[<strong>a</strong>,<strong>b</strong>]</strong> 的连续和。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>n</strong>≤<strong>100000</strong>,<br><strong>1</strong>≤<strong>m</strong>≤<strong>100000，<br>1</strong>≤<strong>a</strong>≤<strong>b</strong>≤<strong>n</strong>,<br>数据保证在任何时候，数列中所有元素之和均在 int 范围内。</p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 5</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\">1 1 5</span><br><span class=\"line\">0 1 3</span><br><span class=\"line\">0 4 8</span><br><span class=\"line\">1 7 5</span><br><span class=\"line\">0 4 8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">30</span><br><span class=\"line\">35</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"树状数组模板\"><a href=\"#树状数组模板\" class=\"headerlink\" title=\"树状数组模板\"></a>树状数组模板</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> arr[N], tr[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i &amp; -i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = index; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">\t\ttr[i] += x;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c = x - arr[index];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = index; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">\t\ttr[i] += c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = index; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">\t\tres += tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">add</span>(i, arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> tag, l, r;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> res;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;tag, &amp;l, &amp;r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tag) <span class=\"built_in\">add</span>(l, r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">query</span>(r) - <span class=\"built_in\">query</span>(l - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线段树模板\"><a href=\"#线段树模板\" class=\"headerlink\" title=\"线段树模板\"></a>线段树模板</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> num[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum;</span><br><span class=\"line\">&#125;sgt[N * <span class=\"number\">4</span>];\t\t<span class=\"comment\">// 需要开N * 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新当前节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> root)</span></span>&#123;</span><br><span class=\"line\">\tsgt[root].sum = sgt[root &lt;&lt; <span class=\"number\">1</span>].sum + sgt[root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化线段树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> root, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) sgt[root].sum = num[l];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tsgt[root] = &#123;l, r&#125;;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(root &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> root, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sgt[root].l &gt;= l &amp;&amp; sgt[root].r &lt;= r) <span class=\"keyword\">return</span> sgt[root].sum;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = sgt[root].l + sgt[root].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l &lt;= mid) sum += <span class=\"built_in\">query</span>(root &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r &gt; mid) sum += <span class=\"built_in\">query</span>(root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> root, <span class=\"type\">int</span> index, <span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sgt[root].l == sgt[root].r) sgt[root].sum += c;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = sgt[root].l + sgt[root].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt;= mid) <span class=\"built_in\">modify</span>(root &lt;&lt; <span class=\"number\">1</span>, index, c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, index, c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"type\">int</span> k, a, b;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;k, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k) <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法模板"
            ]
        },
        {
            "id": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "url": "http://example.com/2022/12/27/stringstream_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC_int_double/",
            "title": "stringstream 字符串转 int/double",
            "date_published": "2022-12-27T12:29:00.000Z",
            "content_html": "<p>某涉密单位下发了某种票据，并要在年终全部收回。</p>\n<p>每张票据有唯一的ID号。</p>\n<p>全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</p>\n<p>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</p>\n<p>你的任务是通过编程，找出断号的ID和重号的ID。</p>\n<p>假设断号不可能发生在最大和最小号。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含整数 <strong>N</strong>，表示后面共有 <strong>N</strong> 行数据。</p>\n<p>接下来 <strong>N</strong> 行，每行包含空格分开的若干个（不大于100个）正整数（不大于100000），每个整数代表一个ID号。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>要求程序输出1行，含两个整数 <strong>m</strong>,<strong>n</strong>用空格分隔。</p>\n<p>其中，<strong>m</strong>表示断号ID，<strong>n</strong>表示重号ID。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>1</strong>≤<strong>N</strong>≤<strong>100</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5 6 8 11 9 </span><br><span class=\"line\">10 12 9</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 9</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> c, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tstring line;</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, line);\t\\\\ cin 会读取换行符</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getline</span>(cin, line);</span><br><span class=\"line\">\t\t<span class=\"function\">stringstream <span class=\"title\">ssin</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ssin &gt;&gt; a[c])&#123;</span><br><span class=\"line\">\t\t\tc++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a, a + c);</span><br><span class=\"line\">\t<span class=\"type\">int</span> r1, r2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; c; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] == a[i - <span class=\"number\">1</span>]) r1 = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] - <span class=\"number\">2</span> == a[i - <span class=\"number\">1</span>]) r2 = a[i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; r2 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; r1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"stringstream技巧：\"><a href=\"#stringstream技巧：\" class=\"headerlink\" title=\"stringstream技巧：\"></a>stringstream技巧：</h4><h5 id=\"转int-x2F-double\"><a href=\"#转int-x2F-double\" class=\"headerlink\" title=\"转int&#x2F;double\"></a>转int&#x2F;double</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string result = <span class=\"string\">&quot;10000&quot;</span>;\t<span class=\"comment\">// double 同理, result = &quot;1.5&quot;;</span></span><br><span class=\"line\"><span class=\"function\">stringstream <span class=\"title\">stream</span><span class=\"params\">(result)</span></span>;\t<span class=\"comment\">// 可以是字符串也可以是数字，总之后面直接输入到目标变量里面</span></span><br><span class=\"line\"><span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">stream &gt;&gt; n;\t<span class=\"comment\">//n 等于10000</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"转int-x2F-double数组\"><a href=\"#转int-x2F-double数组\" class=\"headerlink\" title=\"转int&#x2F;double数组\"></a>转int&#x2F;double数组</h5><p><code>stringstream</code>以空格作为分隔符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string str = <span class=\"string\">&quot;1 2 3 4 5&quot;</span>;\t<span class=\"comment\">// double 同理</span></span><br><span class=\"line\"><span class=\"function\">stringstream <span class=\"title\">ssin</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ssin &gt;&gt; a[i]) i++;\t<span class=\"comment\">// 此时a[0] = 1, a[1] = 2 ...</span></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "url": "http://example.com/2022/12/25/%E5%9C%A8%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E9%87%8C%E5%A4%84%E7%90%86%E6%B5%AE%E7%82%B9%E6%95%B0/",
            "title": "在整数运算里处理浮点数",
            "date_published": "2022-12-25T08:23:44.000Z",
            "content_html": "<p><code>n = m / 2</code> 可以写成 <code>n * 2 = m</code></p>\n<p>同理：</p>\n<p><code>n &lt; m / 2</code> -&gt; <code>n * 2 &lt; m</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "url": "http://example.com/2022/12/21/AcWing_95._%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/",
            "title": "AcWing 95. 费解的开关",
            "date_published": "2022-12-21T11:02:00.000Z",
            "content_html": "<p>你玩过“拉灯”游戏吗？</p>\n<p><strong>25</strong> 盏灯排成一个 <strong>5</strong>×<strong>5</strong> 的方形。</p>\n<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>\n<p>每一步，游戏者可以改变某一个灯的状态。</p>\n<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>\n<p>我们用数字 <strong>1</strong> 表示一盏开着的灯，用数字 <strong>0</strong> 表示关着的灯。</p>\n<p>下面这种状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10111</span><br><span class=\"line\">01101</span><br><span class=\"line\">10111</span><br><span class=\"line\">10000</span><br><span class=\"line\">11011</span><br></pre></td></tr></table></figure>\n\n<p>在改变了最左上角的灯的状态后将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01111</span><br><span class=\"line\">11101</span><br><span class=\"line\">10111</span><br><span class=\"line\">10000</span><br><span class=\"line\">11011</span><br></pre></td></tr></table></figure>\n\n<p>再改变它正中间的灯后状态将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01111</span><br><span class=\"line\">11001</span><br><span class=\"line\">11001</span><br><span class=\"line\">10100</span><br><span class=\"line\">11011</span><br></pre></td></tr></table></figure>\n\n<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 <strong>6</strong>6 步以内使所有的灯都变亮。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行输入正整数 <strong>n</strong>，代表数据中共有 <strong>n</strong> 个待解决的游戏初始状态。</p>\n<p>以下若干行数据分为 <strong>n</strong> 组，每组数据有 <strong>5</strong> 行，每行 <strong>5</strong> 个字符。</p>\n<p>每组数据描述了一个游戏的初始状态。</p>\n<p>各组数据间用一个空行分隔。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>一共输出 <strong>n</strong> 行数据，每行有一个小于等于 <strong>6</strong> 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>\n<p>对于某一个游戏初始状态，若 <strong>6</strong> 步以内无法使所有灯变亮，则输出 <strong>−1</strong>。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p><strong>0</strong>&lt;<strong>n</strong>≤<strong>500</strong></p>\n<h4 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">00111</span><br><span class=\"line\">01011</span><br><span class=\"line\">10001</span><br><span class=\"line\">11010</span><br><span class=\"line\">11100</span><br><span class=\"line\"></span><br><span class=\"line\">11101</span><br><span class=\"line\">11101</span><br><span class=\"line\">11110</span><br><span class=\"line\">11111</span><br><span class=\"line\">11111</span><br><span class=\"line\"></span><br><span class=\"line\">01111</span><br><span class=\"line\">11111</span><br><span class=\"line\">11111</span><br><span class=\"line\">11111</span><br><span class=\"line\">11111</span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> light[<span class=\"number\">7</span>][<span class=\"number\">7</span>], backup[<span class=\"number\">7</span>][<span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">turn</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\tbackup[x][y] = !backup[x][y];</span><br><span class=\"line\">\tbackup[x - <span class=\"number\">1</span>][y] = !backup[x - <span class=\"number\">1</span>][y];</span><br><span class=\"line\">\tbackup[x][y - <span class=\"number\">1</span>] = !backup[x ][y - <span class=\"number\">1</span>];</span><br><span class=\"line\">\tbackup[x + <span class=\"number\">1</span>][y] = !backup[x + <span class=\"number\">1</span>][y];</span><br><span class=\"line\">\tbackup[x][y + <span class=\"number\">1</span>] = !backup[x][y + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tstr.<span class=\"built_in\">resize</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> res = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> x = <span class=\"number\">1</span>; x &lt;= <span class=\"number\">5</span>; x++)&#123;</span><br><span class=\"line\">\t\t\tstring str;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, &amp;str[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> y = <span class=\"number\">1</span>; y &lt;= <span class=\"number\">5</span>; y++)</span><br><span class=\"line\">\t\t\t\tlight[x][y] = str[y - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 枚举操作而非状态</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 01001 表示操作第2和第5盏灯</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">32</span>; k++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(backup, light, <span class=\"keyword\">sizeof</span> light);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>((k &gt;&gt; (j - <span class=\"number\">1</span>)) &amp; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">turn</span>(<span class=\"number\">1</span>, j);</span><br><span class=\"line\">\t\t\t\t\tstep++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> l = <span class=\"number\">1</span>; l &lt;= <span class=\"number\">5</span>; l++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(backup[j - <span class=\"number\">1</span>][l] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">turn</span>(j, l);</span><br><span class=\"line\">\t\t\t\t\t\tstep++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"type\">bool</span> dark = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">5</span>; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(backup[<span class=\"number\">5</span>][j] != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tdark = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!dark)&#123;</span><br><span class=\"line\">\t\t\t\tres = <span class=\"built_in\">min</span>(res, step);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(res == <span class=\"number\">10</span> || res &gt; <span class=\"number\">6</span>) res = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcout &lt;&lt; res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/19/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2_%EF%BC%88%E5%90%91%E5%B7%A6%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%90%91%E5%8F%B3%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9B%B8%E5%B7%AE%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87_1%EF%BC%89/",
            "url": "http://example.com/2022/12/19/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2_%EF%BC%88%E5%90%91%E5%B7%A6%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%90%91%E5%8F%B3%E4%B8%8B%E8%B5%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9B%B8%E5%B7%AE%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87_1%EF%BC%89/",
            "title": "数字三角形 （向左下走的次数与向右下走的次数相差不能超过 1）",
            "date_published": "2022-12-19T12:01:00.000Z",
            "content_html": "<p><strong>二维数组初始化<code>fill(arr[0], arr[0] + n * n, 0)</code></strong></p>\n<h3 id=\"DFS-超时\"><a href=\"#DFS-超时\" class=\"headerlink\" title=\"DFS 超时\"></a>DFS 超时</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> num[<span class=\"number\">101</span>][<span class=\"number\">101</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> add[<span class=\"number\">101</span>][<span class=\"number\">101</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(l &gt; n/<span class=\"number\">2</span> || r &gt; n/<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == n - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(l - r) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(add[x][y]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    l++;</span><br><span class=\"line\">    add[x + <span class=\"number\">1</span>][y] = num[x + <span class=\"number\">1</span>][y] + add[x][y];</span><br><span class=\"line\">    <span class=\"built_in\">s</span>(l, r, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">    add[x + <span class=\"number\">1</span>][y] = num[x + <span class=\"number\">1</span>][y];</span><br><span class=\"line\">    l--;</span><br><span class=\"line\"></span><br><span class=\"line\">    r++;</span><br><span class=\"line\">    add[x + <span class=\"number\">1</span>][y + <span class=\"number\">1</span>] = num[x + <span class=\"number\">1</span>][y + <span class=\"number\">1</span>] + add[x][y];</span><br><span class=\"line\">    <span class=\"built_in\">s</span>(l, r, x + <span class=\"number\">1</span>, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">    add[x + <span class=\"number\">1</span>][y + <span class=\"number\">1</span>] = num[x + <span class=\"number\">1</span>][y + <span class=\"number\">1</span>];</span><br><span class=\"line\">    r--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    add[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = num[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> max = <span class=\"built_in\">max_element</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    cout &lt;&lt; *max;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num[n][n], dp[n][n];</span><br><span class=\"line\">\t<span class=\"built_in\">fill</span>(num[<span class=\"number\">0</span>], num[<span class=\"number\">0</span>] + n * n, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fill</span>(dp[<span class=\"number\">0</span>], dp[<span class=\"number\">0</span>] + n * n, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = num[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; j - <span class=\"number\">1</span> &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = dp[i - <span class=\"number\">1</span>][j] + num[i][j];</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + num[i][j], dp[i - <span class=\"number\">1</span>][j] + num[i][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为向左下走的次数与向右下走的次数相差不能超过 1</span></span><br><span class=\"line\"><span class=\"comment\">// 所以答案一定在中间</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"built_in\">max</span>(dp[n - <span class=\"number\">1</span>][n / <span class=\"number\">2</span> - <span class=\"number\">1</span>], dp[n - <span class=\"number\">1</span>][n / <span class=\"number\">2</span>]);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; dp[n - <span class=\"number\">1</span>][n / <span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/12/06/C++_%E6%8F%90%E5%8F%96%E5%B0%8F%E6%95%B0/",
            "url": "http://example.com/2022/12/06/C++_%E6%8F%90%E5%8F%96%E5%B0%8F%E6%95%B0/",
            "title": "C++ 提取小数",
            "date_published": "2022-12-06T09:45:00.000Z",
            "content_html": "<p>OpenAi写的一段代码，太值得学习了</p>\n<p><del>自己写for循环提取小数实在是太蠢了</del></p>\n<h2 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::<span class=\"built_in\">copy</span>(start, end, std::<span class=\"built_in\">back_inserter</span>(container));</span><br><span class=\"line\"></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(iterator source_first, iterator source_end, iterator target_start);</span><br></pre></td></tr></table></figure>\n\n<p>因为第三个参数要接受一个迭代器，所以需要使用<code>back_inserter(container)</code></p>\n<h2 id=\"regex\"><a href=\"#regex\" class=\"headerlink\" title=\"regex\"></a>regex</h2><p>pass</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string expression = <span class=\"string\">&quot;4.12*3.14&quot;</span>;</span><br><span class=\"line\"><span class=\"function\">regex <span class=\"title\">pattern</span><span class=\"params\">(<span class=\"string\">&quot;([\\\\d.]+)|([+\\\\-*/()])&quot;</span>)</span></span>;</span><br><span class=\"line\">vector&lt;string&gt; words;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(</span><br><span class=\"line\">\t<span class=\"built_in\">sregex_token_iterator</span>(expression.<span class=\"built_in\">begin</span>(), expression.<span class=\"built_in\">end</span>(), pattern),</span><br><span class=\"line\">\t<span class=\"built_in\">sregex_token_iterator</span>(),</span><br><span class=\"line\">\t<span class=\"built_in\">back_inserter</span>(words));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; words.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\tcout &lt;&lt; words[i] &lt;&lt; endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "url": "http://example.com/2022/11/28/%E4%BD%8D%E8%BF%90%E7%AE%97/",
            "title": "位运算",
            "date_published": "2022-11-28T03:47:00.000Z",
            "content_html": "<h6 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136. Single Number\"></a>136. Single Number</h6><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/4226140631.png\" alt=\"136\"></p>\n<ul>\n<li>交换律：a ^ b ^ c &lt;&#x3D;&gt; a ^ c ^ b</li>\n<li>任何数于0异或为任何数 0 ^ n &#x3D;&gt; n</li>\n<li>相同的数异或为0: n ^ n &#x3D;&gt; 0</li>\n</ul>\n<p><code>var a = [2, 3, 2, 4, 4]</code></p>\n<p><code>2 ^ 3 ^ 2 ^ 4 ^ 4 等价于 2 ^ 2 ^ 4 ^ 4 ^ 3 =&gt; 0 ^ 0 ^3 =&gt; 3</code></p>\n<h6 id=\"1758-Minimum-Changes-To-Make-Alternating-Binary-String\"><a href=\"#1758-Minimum-Changes-To-Make-Alternating-Binary-String\" class=\"headerlink\" title=\"1758. Minimum Changes To Make Alternating Binary String\"></a>1758. Minimum Changes To Make Alternating Binary String</h6><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/2630183447.png\" alt=\"1758\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 &amp; 1 = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 &amp; 0 = 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0 &amp; 0 = 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minOperations</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> a[<span class=\"number\">2</span>] = &#123;<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i &amp; <span class=\"number\">1</span>] == s[i]) ans++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(ans, t);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/11/C++%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "url": "http://example.com/2022/11/11/C++%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "title": "C++大作业",
            "date_published": "2022-11-11T06:04:00.000Z",
            "content_html": "<h4 id=\"暂时bug-x2F-问题\"><a href=\"#暂时bug-x2F-问题\" class=\"headerlink\" title=\"暂时bug&#x2F;问题\"></a>暂时bug&#x2F;问题</h4><ul>\n<li>无法计算负数</li>\n<li>只能整数</li>\n<li>减法只能前者大于后者</li>\n<li>无法判断表达式的准确性</li>\n<li><del>复数实部不能小于0</del><br><em><strong>……</strong></em><br><del>头秃</del></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准:GNU C++ 14</span></span><br><span class=\"line\"><span class=\"comment\">// 编译器:GNU GCC 8.1.0 64-bit Debug</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX 10000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">stack &lt;<span class=\"type\">char</span>&gt; opt;\t\t<span class=\"comment\">// 操作数</span></span><br><span class=\"line\">stack &lt;string&gt; num;\t\t<span class=\"comment\">// 符号位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 长度判断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">CompareLength</span><span class=\"params\">(string a, string b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.<span class=\"built_in\">length</span>() &gt;= b.<span class=\"built_in\">length</span>() ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精数大小判断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">CompareSize</span><span class=\"params\">(string a, string b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.<span class=\"built_in\">length</span>() &gt; b.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.<span class=\"built_in\">length</span>() &lt; b.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">length</span>(); i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; b[i]) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &lt; b[i]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度加法</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">BigAdd</span><span class=\"params\">(string a, string b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> la, lb, up = <span class=\"number\">0</span>, temp;\t<span class=\"comment\">// up进位数</span></span><br><span class=\"line\">\tstring n;</span><br><span class=\"line\">\tla = a.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\tlb = b.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">CompareLength</span>(a, b)) &#123;\t\t<span class=\"comment\">// 判断长度，短字符串前端补零</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; la - lb; i++)</span><br><span class=\"line\">\t\t\tb = <span class=\"string\">&quot;0&quot;</span> + b;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; lb - la; i++)</span><br><span class=\"line\">\t\t\ta = <span class=\"string\">&quot;0&quot;</span> + a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">max</span>(la, lb) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\ttemp = a[i] - <span class=\"string\">&#x27;0&#x27;</span> + b[i] - <span class=\"string\">&#x27;0&#x27;</span> + up;\t<span class=\"comment\">// 目标 = 被加数 + 加数 + 进位数</span></span><br><span class=\"line\">\t\tup = temp / <span class=\"number\">10</span>;\t\t\t<span class=\"comment\">// 进位数</span></span><br><span class=\"line\">\t\ttemp %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tn += <span class=\"built_in\">char</span>(temp) + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (up != <span class=\"number\">0</span>) n += <span class=\"built_in\">char</span>(up) + <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">// 99 + 1</span></span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(n.<span class=\"built_in\">begin</span>(), n.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度减法</span></span><br><span class=\"line\"><span class=\"comment\">// 被减数需大于减除</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">BigSub</span><span class=\"params\">(string a, string b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> na[MAX] = &#123;<span class=\"number\">0</span>&#125;, nb[MAX] = &#123;<span class=\"number\">0</span>&#125;, an[MAX] = &#123;<span class=\"number\">0</span>&#125;, la, lb;\t\t\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\tstring n;</span><br><span class=\"line\">\tla = a.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\tlb = b.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; la; i++) na[la - i - <span class=\"number\">1</span>] = a[i] - <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">// 反转操作数，写入整形数组方便运算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; lb; i++) nb[lb - i - <span class=\"number\">1</span>] = b[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; la; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (na[i] &lt; nb[i]) &#123;\t\t\t<span class=\"comment\">// 借位操作</span></span><br><span class=\"line\">\t\t\tna[i] += <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tna[i + <span class=\"number\">1</span>]--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tan[i] = na[i] - nb[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; la; i++)\t\t\t<span class=\"comment\">// 写入输出</span></span><br><span class=\"line\">\t\tn += an[i] + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(n.<span class=\"built_in\">begin</span>(), n.<span class=\"built_in\">end</span>());\t\t\t<span class=\"comment\">// 反转目标</span></span><br><span class=\"line\">\tn.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, n.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));\t\t\t<span class=\"comment\">// 去除前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"string\">&quot;&quot;</span>) n = <span class=\"string\">&quot;0&quot;</span>;\t\t\t<span class=\"comment\">// 100-100</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度乘法</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">BigMul</span><span class=\"params\">(string a, string b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> la, lb, temp_int, up = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tstring temp_str, n = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">\tla = a.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\tlb = b.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>());\t\t\t<span class=\"comment\">// 反转方便操作</span></span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; la; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; lb; j++) &#123;</span><br><span class=\"line\">\t\t\ttemp_int = (a[i] - <span class=\"string\">&#x27;0&#x27;</span>) * (b[j] - <span class=\"string\">&#x27;0&#x27;</span>) + up;\t\t\t<span class=\"comment\">// 加法同理，进位操作</span></span><br><span class=\"line\">\t\t\tup =  temp_int / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\ttemp_int %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\ttemp_str += temp_int + <span class=\"string\">&#x27;0&#x27;</span>;\t\t\t\t<span class=\"comment\">// 按位写入临时字符串</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (up &amp;&amp; j == lb - <span class=\"number\">1</span>) temp_str += (<span class=\"type\">char</span>)(up + <span class=\"string\">&#x27;0&#x27;</span>);\t\t\t<span class=\"comment\">// 防止2*5无法进位</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(temp_str.<span class=\"built_in\">begin</span>(), temp_str.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\tup = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// \t置空进位符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)\ttemp_str += <span class=\"string\">&quot;0&quot;</span>;\t\t\t<span class=\"comment\">// 移位处理，n+10*i同理</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\t\tcout &lt;&lt; temp_str &lt;&lt; endl;</span></span><br><span class=\"line\">\t\tn = <span class=\"built_in\">BigAdd</span>(temp_str, n);</span><br><span class=\"line\">\t\ttemp_str = <span class=\"string\">&quot;&quot;</span>;\t\t\t<span class=\"comment\">// 置空按位乘</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tn.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, n.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));\t\t\t<span class=\"comment\">// 0*1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"string\">&quot;&quot;</span>) n = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度除法</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">BigDiv</span><span class=\"params\">(string a, string b, <span class=\"type\">int</span> flag = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">\tstring temp = b, n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> l = a.<span class=\"built_in\">length</span>() - b.<span class=\"built_in\">length</span>();\t\t\t<span class=\"comment\">// 商预操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">length</span>(); i++) n += <span class=\"string\">&quot;0&quot;</span>;\t\t\t<span class=\"comment\">// 商预操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)&#123;\t\t\t<span class=\"comment\">// 被除数添零</span></span><br><span class=\"line\">\t\t\ttemp += <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">CompareSize</span>(a, temp) &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tn[i]++;</span><br><span class=\"line\">\t\t\ta = <span class=\"built_in\">BigSub</span>(a, temp);\t\t\t<span class=\"comment\">// 减法模拟</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttemp = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(n.<span class=\"built_in\">begin</span>(), n.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tn.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, n.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&quot;0&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"string\">&quot;&quot;</span>) n = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> a;\t\t\t<span class=\"comment\">// a为余数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">BigMod</span><span class=\"params\">(string a, string b)</span> </span>&#123;\t<span class=\"keyword\">return</span> <span class=\"built_in\">BigDiv</span>(a, b, <span class=\"number\">0</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中缀</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Priority</span><span class=\"params\">(<span class=\"type\">char</span> a)</span> </span>&#123;\t\t<span class=\"comment\">// 符号优先级</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a == <span class=\"string\">&#x27;+&#x27;</span> || a == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"string\">&#x27;*&#x27;</span> || a == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Clc</span><span class=\"params\">(<span class=\"type\">char</span> tag)</span> </span>&#123;</span><br><span class=\"line\">\tstring a = num.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\tnum.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\tstring b = num.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\tnum.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;+&#x27;</span>) num.<span class=\"built_in\">push</span>(<span class=\"built_in\">BigAdd</span>(a, b));</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;-&#x27;</span>) num.<span class=\"built_in\">push</span>(<span class=\"built_in\">BigSub</span>(b, a));\t\t\t<span class=\"comment\">// 注意出栈顺序</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;*&#x27;</span>) num.<span class=\"built_in\">push</span>(<span class=\"built_in\">BigMul</span>(a, b));</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;/&#x27;</span>) num.<span class=\"built_in\">push</span>(<span class=\"built_in\">BigDiv</span>(b, a));</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;%&#x27;</span>) num.<span class=\"built_in\">push</span>(<span class=\"built_in\">BigMod</span>(b, a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 整数运算</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">InitNum</span><span class=\"params\">(string str)</span></span>&#123;</span><br><span class=\"line\">\tstring temp;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\ttemp += str[i];</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;\t\t\t<span class=\"comment\">// 为后续判断是否有剩余未入栈，如 1+1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tnum.<span class=\"built_in\">push</span>(temp);</span><br><span class=\"line\">\t\t\ttemp = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str[i] == <span class=\"string\">&#x27;(&#x27;</span>) opt.<span class=\"built_in\">push</span>(str[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str[i] == <span class=\"string\">&#x27;+&#x27;</span> || str[i] == <span class=\"string\">&#x27;-&#x27;</span> || str[i] == <span class=\"string\">&#x27;*&#x27;</span> || str[i] == <span class=\"string\">&#x27;/&#x27;</span> || str[i] == <span class=\"string\">&#x27;%&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (opt.<span class=\"built_in\">empty</span>())\topt.<span class=\"built_in\">push</span>(str[i]);\t\t\t<span class=\"comment\">// 栈空直接入栈</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Priority</span>(opt.<span class=\"built_in\">top</span>()) &gt;= <span class=\"built_in\">Priority</span>(str[i])) &#123;\t\t\t<span class=\"comment\">// 判断优先级，当栈顶大于等于当前操作符，当前操作符不入栈直接运算</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">Clc</span>(opt.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">\t\t\t\t\topt.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t\t\topt.<span class=\"built_in\">push</span>(str[i]);\t\t\t<span class=\"comment\">// 运算结束，高优先级出栈，当前操作符入栈</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> opt.<span class=\"built_in\">push</span>(str[i]);\t\t\t<span class=\"comment\">// 反之出栈</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;\t\t\t<span class=\"comment\">// 右括号全出栈，直至栈顶为左括号相匹配结束出栈</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (opt.<span class=\"built_in\">top</span>() != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">Clc</span>(opt.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">\t\t\t\topt.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\topt.<span class=\"built_in\">pop</span>();\t\t\t<span class=\"comment\">// 弹出左括号</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag) num.<span class=\"built_in\">push</span>(temp);\t\t\t<span class=\"comment\">// 标记判断是否有剩余为入栈</span></span><br><span class=\"line\">\t<span class=\"comment\">// 操作符平级</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!opt.<span class=\"built_in\">empty</span>()) &#123;\t\t\t<span class=\"comment\">// 循环结束到操作栈为空</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">Clc</span>(opt.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">\t\topt.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; num.top();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复数运算</span></span><br><span class=\"line\"><span class=\"function\">complex&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; <span class=\"title\">Clc_complex</span><span class=\"params\">(<span class=\"type\">char</span> tag, complex&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; c1, complex&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; c2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;+&#x27;</span>)\t<span class=\"keyword\">return</span> c1+c2;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> c1-c2;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;*&#x27;</span>) <span class=\"keyword\">return</span> c1*c2;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> c1/c2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">InitComplex</span><span class=\"params\">(string str)</span></span>&#123;</span><br><span class=\"line\">\tstring com = <span class=\"string\">&quot;&quot;</span>, tempReal = <span class=\"string\">&quot;&quot;</span>, tempComplex = <span class=\"string\">&quot;&quot;</span>;\t\t<span class=\"comment\">// 临时复数、临时实部、临时虚部</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> complexOpt;\t\t\t<span class=\"comment\">// 虚部符号位</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> indexRight, indexLeft;</span><br><span class=\"line\">\t<span class=\"type\">int</span> complexCount;\t\t\t<span class=\"comment\">// 复数个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">length</span>(); i++)\t\t<span class=\"comment\">// 判断复数个数，一个i为一个复数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;i&#x27;</span>) complexCount++;</span><br><span class=\"line\">\tcomplex&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; c[complexCount];</span><br><span class=\"line\">\tcomplexCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(str != <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提取复数</span></span><br><span class=\"line\">\t\tindexRight = str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;(&#x27;</span>);</span><br><span class=\"line\">\t\tindexLeft = str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">\t\tcom = str.<span class=\"built_in\">substr</span>(indexRight, indexLeft + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tcomplexOpt = com.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;+&#x27;</span>)!=string::npos?<span class=\"string\">&#x27;+&#x27;</span>:<span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">\t\ttempReal = com.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>, com.<span class=\"built_in\">find</span>(complexOpt) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttempComplex = com.<span class=\"built_in\">substr</span>(com.<span class=\"built_in\">find</span>(complexOpt) + <span class=\"number\">1</span>, com.<span class=\"built_in\">length</span>() - <span class=\"number\">4</span> - tempReal.<span class=\"built_in\">length</span>());</span><br><span class=\"line\"><span class=\"comment\">//\t\tcout &lt;&lt; com.length() &lt;&lt; &quot; &quot; &lt;&lt;tempReal &lt;&lt; &quot; &quot; &lt;&lt; tempComplex &lt;&lt; endl;</span></span><br><span class=\"line\">\t\tc[complexCount] = &#123;<span class=\"built_in\">stol</span>(tempReal), <span class=\"built_in\">stol</span>(complexOpt+tempComplex)&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提取完成后擦除</span></span><br><span class=\"line\">\t\tstr.<span class=\"built_in\">erase</span>(indexRight, indexLeft + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 四则运算判断优先级</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;+&#x27;</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;-&#x27;</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;*&#x27;</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (opt.<span class=\"built_in\">empty</span>())\topt.<span class=\"built_in\">push</span>(str[<span class=\"number\">0</span>]);\t\t\t<span class=\"comment\">// 栈空直接入栈</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Priority</span>(opt.<span class=\"built_in\">top</span>()) &gt;= <span class=\"built_in\">Priority</span>(str[<span class=\"number\">0</span>])) &#123;\t\t\t<span class=\"comment\">// 判断优先级，当栈顶大于等于当前操作符，当前操作符不入栈直接运算</span></span><br><span class=\"line\">\t\t\t\t\tc[complexCount - <span class=\"number\">1</span>] = <span class=\"built_in\">Clc_complex</span>(opt.<span class=\"built_in\">top</span>(), c[complexCount - <span class=\"number\">1</span>], c[complexCount]);</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\tcout &lt;&lt; c[complexCount - 1];</span></span><br><span class=\"line\">\t\t\t\t\tcomplexCount -= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\topt.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t\t\topt.<span class=\"built_in\">push</span>(str[<span class=\"number\">0</span>]);\t\t\t<span class=\"comment\">// 运算结束，高优先级出栈，当前操作符入栈</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> opt.<span class=\"built_in\">push</span>(str[<span class=\"number\">0</span>]);\t\t\t<span class=\"comment\">// 反之入栈</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 擦除操作符</span></span><br><span class=\"line\">\t\t\tstr.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcomplexCount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 操作符平级</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!opt.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tc[complexCount - <span class=\"number\">2</span>] = <span class=\"built_in\">Clc_complex</span>(opt.<span class=\"built_in\">top</span>(), c[complexCount - <span class=\"number\">2</span>], c[complexCount - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\tcomplexCount--;</span><br><span class=\"line\">\t\topt.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcom = <span class=\"built_in\">to_string</span>(c[<span class=\"number\">0</span>].<span class=\"built_in\">real</span>()) + complexOpt + <span class=\"built_in\">to_string</span>(c[<span class=\"number\">0</span>].<span class=\"built_in\">imag</span>()) + <span class=\"string\">&#x27;i&#x27;</span>;</span><br><span class=\"line\">\tcomplexOpt = (c[<span class=\"number\">0</span>].<span class=\"built_in\">imag</span>() &lt; <span class=\"number\">0</span>)?<span class=\"string\">&#x27;-&#x27;</span>:<span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断复数、实数</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Complex_Or_Real</span><span class=\"params\">(string str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">length</span>(); i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;i&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">InitComplex</span>(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">InitNum</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstring str, a;</span><br><span class=\"line\">\tcin &gt;&gt; str;</span><br><span class=\"line\">\ta = <span class=\"built_in\">Complex_Or_Real</span>(str);</span><br><span class=\"line\">\tcout &lt;&lt; a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2021/11/08/Map_%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/",
            "title": "Map 单词分析",
            "date_published": "2021-11-08T07:30:00.000Z",
            "content_html": "<p><strong>蓝桥杯无法使用<code>for(x : y)&#123;&#125;</code> 、 <code>auto</code>等的C11语法和关键字</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;char, int&gt; m;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tchar mc;</span><br><span class=\"line\">\tint s = 0;</span><br><span class=\"line\">\tfor(int i = 97; i &lt;= 122; i++)&#123;</span><br><span class=\"line\">\t\tm.insert(make_pair((char)i, 0));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcin &gt;&gt; str;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; str.size(); i++)&#123;</span><br><span class=\"line\">\t\tm[str[i]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(map&lt;char, int&gt;::iterator i = m.begin(); i != m.end(); i++)&#123;</span><br><span class=\"line\">\t\tif(s &lt; i-&gt;second) mc = i-&gt;first, s = i-&gt;second;\t\t// 记录次数</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; mc &lt;&lt; endl &lt;&lt; m[mc];</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/11/08/DFS%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "DFS迷宫问题",
            "date_published": "2021-11-08T06:36:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">#pragma GCC optimize(2)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int m[101][101];</span><br><span class=\"line\">int xS, yS, xE, yE;</span><br><span class=\"line\">int s;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs(int x, int y)&#123;</span><br><span class=\"line\">\tif(x == xE &amp;&amp; y == yE)&#123;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;else&#123;\t\t// 遍历四个方向 </span><br><span class=\"line\">\t\tm[x][y] = 0;</span><br><span class=\"line\">\t\tif(m[x + 1][y])&#123;</span><br><span class=\"line\">\t\t\tm[x + 1][y] = 0;\t\t// 占位，防止死循环 </span><br><span class=\"line\">\t\t\tdfs(x + 1, y);</span><br><span class=\"line\">\t\t\tm[x + 1][y] = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(m[x - 1][y])&#123;</span><br><span class=\"line\">\t\t\tm[x - 1][y] = 0;</span><br><span class=\"line\">\t\t\tdfs(x - 1, y);</span><br><span class=\"line\">\t\t\tm[x - 1][y] = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(m[x][y + 1])&#123;</span><br><span class=\"line\">\t\t\tm[x][y + 1] = 0;</span><br><span class=\"line\">\t\t\tdfs(x, y + 1);</span><br><span class=\"line\">\t\t\tm[x][y + 1] = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(m[x][y - 1])&#123;</span><br><span class=\"line\">\t\t\tm[x][y - 1] = 0;</span><br><span class=\"line\">\t\t\tdfs(x, y - 1);</span><br><span class=\"line\">\t\t\tm[x][y - 1] = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(false);</span><br><span class=\"line\">\tint x, y, k, Ox, Oy;</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class=\"line\">\tfor(int i = 1; i &lt;= x; i++)\t// 棋盘预定义</span><br><span class=\"line\">\t\tfor(int j = 1; j &lt;= y; j++)</span><br><span class=\"line\">\t\t\tm[i][j] = 1;</span><br><span class=\"line\">\tcin &gt;&gt; xS &gt;&gt; yS &gt;&gt; xE &gt;&gt; yE;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; k; i++)&#123;\t// 预先写入障碍</span><br><span class=\"line\">\t\tcin &gt;&gt; Ox &gt;&gt; Oy;</span><br><span class=\"line\">\t\tm[Ox][Oy] = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdfs(xS, yS);</span><br><span class=\"line\">\tcout &lt;&lt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/05/C++_STL%E4%B8%AD%E7%9A%84next_permutation/",
            "url": "http://example.com/2021/11/05/C++_STL%E4%B8%AD%E7%9A%84next_permutation/",
            "title": "C++ STL中的next_permutation",
            "date_published": "2021-11-05T06:45:00.000Z",
            "content_html": "<blockquote>\n<p>Rearranges the elements in the range <code>[first,last)</code> into the next <em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL2xleGljb2dyYXBoaWNhbF9jb21wYXJl\">lexicographically</span> greater</em> permutation.</p>\n<p><em>将范围内的元素重新排列<code>[first,last)</code>为下一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL2xleGljb2dyYXBoaWNhbF9jb21wYXJl\">字典序</span>更大的排列。</em></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tLw==\">–cplusplus.com</span></p>\n</blockquote>\n<p>对于next_permutation函数，其函数原型为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">bool next_permutation(iterator start,iterator end)</span><br></pre></td></tr></table></figure>\n\n<p>如下例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int num[3]=&#123;1, 2, 3&#125;;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        cout &lt;&lt; num[0] &lt;&lt; &quot; &quot; &lt;&lt; num[1] &lt;&lt; &quot; &quot; &lt;&lt; num[2] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;while(next_permutation(num, num + 3));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">1 3 2</span><br><span class=\"line\">2 1 3</span><br><span class=\"line\">2 3 1</span><br><span class=\"line\">3 1 2</span><br><span class=\"line\">3 2 1</span><br></pre></td></tr></table></figure>\n\n<p>当我们把<code>while(next_permutation(num, num + 3))</code>中的<code>3</code>改为<code>2</code>时，输出就变为了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3</span><br><span class=\"line\">2 1 3</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，next_permutation是对数组前n项进行全排列</p>\n<p>同理，既然有下一个全排列函数，那肯定是有上一个全排列函数：<code>prev_permutation</code>使用方法与<code>next_permutation</code>一致。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2021/11/04/Vector_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "Vector 二分查找",
            "date_published": "2021-11-04T07:39:00.000Z",
            "content_html": "<p>二分查找：</p>\n<ul>\n<li>lower_bound：查找第一个大于或等于某个元素的位置。</li>\n<li>upper_bound：查找第一个大于某个元素的位置。</li>\n</ul>\n<p>Vector 插入元素</p>\n<ul>\n<li>iterator insert(iterator it, const T&amp; x)：iterator向量中迭代器指向元素前增加一个元素x</li>\n<li>iterator insert(iterator it, int n,const T&amp; x)：向量中迭代器指向元素前增加n个相同的元素x</li>\n<li>iterator insert(iterator it, const_iterator first, const_iterator last)：向量中迭代器指向元素前插入另一个相同类型向量的[first, last)间的数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tvector&lt;int&gt; arr;</span><br><span class=\"line\">\tint t, k, a;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 9; i++)&#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; t;</span><br><span class=\"line\">\t\tarr.push_back(t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcin &gt;&gt; k;</span><br><span class=\"line\">\tauto pos = upper_bound(arr.begin(), arr.end(), k); \t// vector&lt;int&gt;::iterator</span><br><span class=\"line\">\tarr.insert(pos, k);</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 10; i++)</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2021/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF/",
            "title": "二叉树模板",
            "date_published": "2021-10-28T09:03:28.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">#pragma GCC optimize(2)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct tree&#123;</span><br><span class=\"line\">\tint left;</span><br><span class=\"line\">\tint right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tree t[1000];</span><br><span class=\"line\"></span><br><span class=\"line\">int dfs(int n)&#123;\t\t// 深度 </span><br><span class=\"line\">\tif(!n) return 0;</span><br><span class=\"line\">\treturn max(dfs(t[n].left), dfs(t[n].right)) + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void f(int n)&#123;\t\t// 先序 </span><br><span class=\"line\">\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">\tif(t[n].left) f(t[n].left);</span><br><span class=\"line\">\tif(t[n].right) f(t[n].right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void s(int n)&#123;\t\t// 中序 </span><br><span class=\"line\">\tif(t[n].left) s(t[n].left);</span><br><span class=\"line\">\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">\tif(t[n].right) s(t[n].right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void e(int n)&#123;\t\t// 后序 </span><br><span class=\"line\">\tif(t[n].left) e(t[n].left);</span><br><span class=\"line\">\tif(t[n].right) e(t[n].right);</span><br><span class=\"line\">\tcout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tint n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tfor(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">\t\tcin &gt;&gt; t[i].left &gt;&gt; t[i].right;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "url": "http://example.com/2021/10/28/%E5%8D%A1%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%8C%E8%82%86%E6%97%A0%E5%BF%8C%E6%83%AESTL/",
            "title": "卡常小技巧，肆无忌惮STL",
            "date_published": "2021-10-28T08:25:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma GCC optimize(2)</span><br><span class=\"line\">ios::sync_with_stdio(false);</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "url": "http://example.com/2021/10/28/%E6%95%B0%E7%BB%84%E7%B2%98%E8%B4%B4%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96C++/",
            "title": "数组粘贴，初始化C++",
            "date_published": "2021-10-28T03:51:00.000Z",
            "content_html": "<p>粘贴：memcpy()</p>\n<p>初始化（可初始化结构体内的数组元素）：memset()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[5];</span><br><span class=\"line\">int b[5] = &#123;1, 2, 3, 4, 5&#125;</span><br><span class=\"line\">memset(a, 0, sizeof(int));\t// 把a中所有数组元素初始化为1</span><br><span class=\"line\">memcpy(a, b, 5 * sizeof(int));\t// 把b数组覆盖到a数组</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/27/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%98%B6%E4%B9%98%E6%A8%A1%E6%9D%BF(C++)/",
            "url": "http://example.com/2021/10/27/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%98%B6%E4%B9%98%E6%A8%A1%E6%9D%BF(C++)/",
            "title": "高精度阶乘模板(C++)",
            "date_published": "2021-10-27T04:13:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int MAX = 10000;</span><br><span class=\"line\">struct N&#123;</span><br><span class=\"line\">\tint len;</span><br><span class=\"line\">\tint a[MAX];</span><br><span class=\"line\">\tN(int x = 0)&#123;\t\t// 初始化</span><br><span class=\"line\">\t\tmemset(a, 0, sizeof(a));</span><br><span class=\"line\">\t\tfor(len = 1; x; len++)&#123;</span><br><span class=\"line\">\t\t\ta[len] = x % 10;</span><br><span class=\"line\">\t\t\tx /= 10;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvoid f(int _l)&#123;\t\t// 进位</span><br><span class=\"line\">\t\tlen = _l;</span><br><span class=\"line\">\t\tfor(int i = 1; i &lt;= len; i++)&#123;</span><br><span class=\"line\">\t\t\ta[i + 1] += a[i] / 10;</span><br><span class=\"line\">\t\t\ta[i] %= 10;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor(;!a[len];) len--;\t\t// 去除无效前置0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvoid print()&#123;</span><br><span class=\"line\">\t\tfor(int i = max(len, 1); i &gt;= 1; i--)</span><br><span class=\"line\">\t\t\tprintf(&quot;%d&quot;, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tint &amp;operator[](int i)&#123;\t\t// 重载[]，方便直接使用Node[num]访问Node数组</span><br><span class=\"line\">\t\treturn a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tN operator*(int t)&#123;\t\t// 重载*</span><br><span class=\"line\">\t\tN c;</span><br><span class=\"line\">\t\tfor(int i = 1; i &lt;= len; i++)</span><br><span class=\"line\">\t\t\tc[i] = a[i] * t;</span><br><span class=\"line\">\t\tc.f(len + 11);</span><br><span class=\"line\">\t\treturn c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tN fac(1);</span><br><span class=\"line\">\tint n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tfor(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">\t\tfac = fac * i; </span><br><span class=\"line\">\tfac.print();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "http://example.com/2021/10/26/c_str()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "c_str()使用方法",
            "date_published": "2021-10-26T13:52:15.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//标准库的string类提供了三个成员函数来从一个string得到c类型的字符数组</span><br><span class=\"line\">//c_str()：生成一个const char*指针，指向以空字符终止的数组。</span><br><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //string--&gt;char*</span><br><span class=\"line\">    //c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同</span><br><span class=\"line\">    //这个数组的数据是临时的，当有一个改变这些数据的成员函数被调用后，其中的数据就会失效。</span><br><span class=\"line\">    //因此要么现用先转换，要么把它的数据复制到用户自己可以管理的内存中</span><br><span class=\"line\">    const char *c;</span><br><span class=\"line\">    string s = &quot;1234&quot;;</span><br><span class=\"line\">    c = s.c_str();</span><br><span class=\"line\">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">    s = &quot;abcde&quot;;</span><br><span class=\"line\">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1234</span><br><span class=\"line\">abcde</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "url": "http://example.com/2021/10/23/C++_STL%E5%AE%B9%E5%99%A8%EF%BC%8811%E4%B8%AA%EF%BC%89/",
            "title": "C++ STL容器（11个）",
            "date_published": "2021-10-23T08:33:00.000Z",
            "content_html": "<h1 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque :\"></a><code>deque</code> :</h1><h1 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list :\"></a><code>list</code> :</h1><h1 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue :\"></a><code>queue</code> :</h1><p><img data-src=\"https://mioe-xyz.oss-cn-shanghai.aliyuncs.com/usr/uploads/2022/11/3285107056.jpg\"></p>\n<h1 id=\"priority-queue\"><a href=\"#priority-queue\" class=\"headerlink\" title=\"priority_queue :\"></a><code>priority_queue</code> :</h1><h4 id=\"默认大顶堆（后两参数可缺省）\"><a href=\"#默认大顶堆（后两参数可缺省）\" class=\"headerlink\" title=\"#### 默认大顶堆（后两参数可缺省）\"></a>#### 默认大顶堆（后两参数可缺省）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;int&gt; big_heap;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"大顶堆\"><a href=\"#大顶堆\" class=\"headerlink\" title=\"大顶堆\"></a>大顶堆</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; big_heap2;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小顶堆\"><a href=\"#小顶堆\" class=\"headerlink\" title=\"小顶堆\"></a>小顶堆</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; small_heap;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p><code>bool empty() const</code>：返回值为true，说明队列为空</p>\n<p><code>int size() const</code>：返回优先队列中元素的数量</p>\n<p><code>void pop()</code>：删除队列顶部的元素，也即根节点</p>\n<p><code>int top()</code>：返回队列中的顶部元素，但不删除该元素</p>\n<p><code>void push(int arg)</code>：将元素arg插入到队列之中；</p>\n<h1 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack :\"></a><code>stack</code> :</h1><h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector :\"></a><code>vector</code> :</h1><h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map :\"></a><code>map</code> :</h1><h1 id=\"multimap\"><a href=\"#multimap\" class=\"headerlink\" title=\"multimap :\"></a><code>multimap</code> :</h1><h1 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set :\"></a><code>set</code> :</h1><h1 id=\"multiset\"><a href=\"#multiset\" class=\"headerlink\" title=\"multiset :\"></a><code>multiset</code> :</h1><h1 id=\"bitset\"><a href=\"#bitset\" class=\"headerlink\" title=\"bitset :\"></a><code>bitset</code> :</h1>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/19/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84sort%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2021/10/19/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84sort%E6%8E%92%E5%BA%8F/",
            "title": "二维数组sort排序",
            "date_published": "2021-10-19T07:25:51.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\tsort(s[i], s[i] + len);</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "url": "http://example.com/2021/10/16/%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98_%E5%88%86%E7%B3%96%E6%9E%9C%E3%80%90%E7%AC%AC%E4%BA%94%E5%B1%8A%E3%80%91%E3%80%90%E7%9C%81%E8%B5%9B%E3%80%91%E3%80%90C%E7%BB%84%E3%80%91/",
            "title": "历届真题 分糖果【第五届】【省赛】【C组】",
            "date_published": "2021-10-16T08:35:00.000Z",
            "content_html": "<p><img data-src=\"http://mioe.xyz/usr/uploads/2021/10/3684429808.png\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int eq(int *t, int l)&#123;</span><br><span class=\"line\">\tfor(int i = 1; i &lt; l; i++)</span><br><span class=\"line\">\t\tif(t[0] != t[i]) return 0;</span><br><span class=\"line\">\treturn 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tint n, m;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tint c[n], i, s = 0, bf[n];\t\t// bf[n] 缓存区 </span><br><span class=\"line\">\tfor(i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i];</span><br><span class=\"line\">\twhile(1)&#123;\t\t\t\t\t\t// 思路：每次分糖果，把第i个 分出 的糖果记录到 对应的 缓存区， </span><br><span class=\"line\">\t\tfor(i = 0; i &lt; n; i++)&#123;\t\t// \t\t 第i个小朋友的苹果等于 自身糖果的一半 加  i - 1 缓冲区的糖果 </span><br><span class=\"line\">\t\t\tc[i] /= 2;\t\t\t\t//\t例如： 有三个小朋友</span><br><span class=\"line\">\t\t\tbf[i] = c[i];\t\t\t//         2 2 4 </span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t\t\t// 对半分：1 1 2(1)</span><br><span class=\"line\">\t\tc[0] += bf[n - 1];\t\t\t//          / / / </span><br><span class=\"line\">\t\tfor(i = 1; i &lt; n; i++)\t \t// 缓冲区：1 1 2 </span><br><span class=\"line\">\t\t\tc[i] += bf[i - 1];\t\t//         | | | </span><br><span class=\"line\">\t\tfor(i = 0; i &lt; n; i++)\t\t// 完成：3 2 3(3) </span><br><span class=\"line\">\t\t\tif(c[i] % 2 != 0)&#123;</span><br><span class=\"line\">\t\t\t\tc[i]++;</span><br><span class=\"line\">\t\t\t\ts++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tif(eq(c, n) == 1) break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; s;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/15/XX_XX_XX%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "url": "http://example.com/2021/10/15/XX_XX_XX%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97/",
            "title": "XX:XX:XX类型字符串提取数字",
            "date_published": "2021-10-15T09:26:16.000Z",
            "content_html": "<p>洛谷P1615</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin &gt;&gt; time1</span><br><span class=\"line\">sscanf(time1.c_str(), &quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1); // c_str()获取字符串地址</span><br><span class=\"line\">// 或者直接这样写 scanf(&quot;%d:%d:%d&quot;, &amp;h1, &amp;m1, &amp;s1);</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "url": "http://example.com/2021/10/01/P2911_[USACO08OCT]Bovine_Bones_G_(C)/",
            "title": "P2911 [USACO08OCT]Bovine Bones G (C)",
            "date_published": "2021-10-01T12:40:00.000Z",
            "content_html": "<p><img data-src=\"https://i.loli.net/2021/10/01/dcA2xWtmfYQRaqD.png\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">\t根据题意，总共3个骰子，每个骰子有 S个面，因为数据范围较小，可以直接选择暴力</span><br><span class=\"line\">\t每次总和记录到相应的结构体(Sum = 10 -&gt; struct[10])，结构体中保存两个数据：总和(num)、次数(times) </span><br><span class=\"line\">\t最后使用快排(qsort)筛出次数(times)最小的目标 </span><br><span class=\"line\">*/ </span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct A&#123;\t\t// 声明结构体，存放点数总和与次数 </span><br><span class=\"line\">\tint num;</span><br><span class=\"line\">\tint times;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int compare(const void *a, const void *b)&#123;</span><br><span class=\"line\">\tstruct A *p1 = (struct A *)a;</span><br><span class=\"line\">\tstruct A *p2 = (struct A *)b;</span><br><span class=\"line\">\tif(p1-&gt;times == p2-&gt;times) return p1-&gt;num - p2-&gt;num;\t\t// 题意：如果出现概率一样时输出最小总和 </span><br><span class=\"line\">\treturn p2-&gt;times - p1-&gt;times;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tint s1, s2, s3, s, i, j, k;</span><br><span class=\"line\">\tstruct A a[80];</span><br><span class=\"line\">\tscanf(&quot;%d %d %d&quot;, &amp;s1, &amp;s2, &amp;s3);</span><br><span class=\"line\">\tfor(i = 0; i &lt; 81; i++)&#123;</span><br><span class=\"line\">\t\t a[i].times = 0;</span><br><span class=\"line\">\t\t a[i].num = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(i = 1; i &lt;= s1; i++)</span><br><span class=\"line\">\t\tfor(j = 1; j &lt;= s2; j++)</span><br><span class=\"line\">\t\t\tfor(k = 1; k &lt;= s3; k++)&#123;</span><br><span class=\"line\">\t\t\t\ta[i + j + k].num = i + j + k;</span><br><span class=\"line\">\t\t\t\ta[i + j + k].times++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tqsort(a, 80, sizeof(struct A), compare);</span><br><span class=\"line\">\tprintf(&quot;%d&quot;, a[0].num);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "url": "http://example.com/2021/09/11/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_C%E8%AF%AD%E8%A8%80/",
            "title": "冒泡排序 C语言",
            "date_published": "2021-09-11T09:10:00.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 交换函数</span><br><span class=\"line\">void swap(int *pa, int *pb)&#123;</span><br><span class=\"line\">\tint temp;</span><br><span class=\"line\">\tif(*pa &gt; *pb)&#123;</span><br><span class=\"line\">\t\ttemp = *pb;</span><br><span class=\"line\">\t\t*pb = *pa;</span><br><span class=\"line\">\t\t*pa = temp; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tint a[] = &#123;1, 3, 5, 2, 14, 8, 4 ,9&#125;;</span><br><span class=\"line\">\tint i, j;</span><br><span class=\"line\">\tint temp;</span><br><span class=\"line\">\tint num = (sizeof(a) / sizeof(a[0]));</span><br><span class=\"line\">\tprintf(&quot;排序前：&quot;);</span><br><span class=\"line\">\tfor(i = 0; i &lt; num; i++)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d &quot;, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 冒泡 </span><br><span class=\"line\">\tfor(i = 0; i &lt; num; i++)&#123;\t\t// 游标 </span><br><span class=\"line\">\t\tfor(j = i; j &lt; num - 1; j++)&#123;\t\t// 两两比较 </span><br><span class=\"line\">\t\t\tif(a[j] &gt; a[j + 1])&#123;</span><br><span class=\"line\">\t\t\t\ttemp = a[j + 1];</span><br><span class=\"line\">\t\t\t\ta[j + 1] = a[j];</span><br><span class=\"line\">\t\t\t\ta[j] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t// swap((a + j), (a + j + 1));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;排序后：&quot;);</span><br><span class=\"line\">\tfor(i = 0; i &lt; num; i++)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d &quot;, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}